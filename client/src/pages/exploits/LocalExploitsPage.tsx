import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Search, Filter, Plus, Shield, AlertTriangle, CheckCircle } from "lucide-react";
import { useQuery } from "@tanstack/react-query";

interface LocalExploit {
  id: string;
  name: string;
  cve?: string;
  severity: string;
  verified: boolean;
  platform: string[];
  description?: string;
  published?: string;
}

function ExploitCard({ exploit }: { exploit: LocalExploit }) {
  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical": return "bg-red-500/20 text-red-400 border-red-500/30";
      case "high": return "bg-orange-500/20 text-orange-400 border-orange-500/30";
      case "medium": return "bg-yellow-500/20 text-yellow-400 border-yellow-500/30";
      case "low": return "bg-blue-500/20 text-blue-400 border-blue-500/30";
      default: return "bg-gray-500/20 text-gray-400 border-gray-500/30";
    }
  };

  return (
    <Card className="bg-card/50 border-border/50 hover:bg-card/80 transition-colors">
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between">
          <div className="flex items-center gap-2">
            <Shield className="h-4 w-4 text-red-400" />
            <CardTitle className="text-sm">{exploit.name}</CardTitle>
          </div>
          <div className="flex items-center gap-2">
            <Badge className={getSeverityColor(exploit.severity)}>
              {exploit.severity}
            </Badge>
            {exploit.verified && (
              <CheckCircle className="h-4 w-4 text-green-400" />
            )}
          </div>
        </div>
        <CardDescription className="line-clamp-2">
          {exploit.cve && <span className="font-mono text-xs">{exploit.cve} â€¢ </span>}
          {exploit.description || "Local privilege escalation exploit"}
        </CardDescription>
      </CardHeader>
      <CardContent className="pt-0">
        <div className="space-y-2 text-xs text-muted-foreground">
          <div>Platforms: {exploit.platform.join(", ")}</div>
          {exploit.published && (
            <div>Published: {new Date(exploit.published).toLocaleDateString()}</div>
          )}
          <div className="flex items-center gap-1">
            Status: {exploit.verified ? (
              <span className="text-green-400">Verified</span>
            ) : (
              <span className="text-yellow-400">Unverified</span>
            )}
          </div>
        </div>
        <div className="flex gap-2 mt-4">
          <Button size="sm" className="h-7 text-xs bg-red-600 hover:bg-red-700">
            Execute
          </Button>
          <Button size="sm" variant="secondary" className="h-7 text-xs">
            Configure
          </Button>
          <Button size="sm" variant="outline" className="h-7 text-xs">
            Details
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}

export default function LocalExploitsPage() {
  const [searchQuery, setSearchQuery] = useState("");
  const [severityFilter, setSeverityFilter] = useState<string>("all");

  const { data: exploitsData, isLoading } = useQuery({
    queryKey: ["exploits", "local"],
    queryFn: async () => {
      const response = await fetch("/api/exploits/scope/local");
      if (!response.ok) throw new Error("Failed to fetch local exploits");
      return response.json();
    }
  });

  const exploits = exploitsData?.data || [];

  const filteredExploits = exploits.filter((exploit: LocalExploit) => {
    const matchesSearch = exploit.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         exploit.cve?.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         exploit.description?.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesSeverity = severityFilter === "all" || exploit.severity === severityFilter;
    return matchesSearch && matchesSeverity;
  });

  return (
    <div className="container-responsive py-6">
      <div className="flex items-center justify-between mb-6">
        <div>
          <h1 className="text-2xl font-bold tracking-tight text-red-400">Local Exploits</h1>
          <p className="text-muted-foreground">Local privilege escalation and system exploits</p>
        </div>
        <Button className="bg-red-600 hover:bg-red-700">
          <Plus className="h-4 w-4 mr-2" />
          Add Exploit
        </Button>
      </div>

      <div className="flex flex-col sm:flex-row gap-4 mb-6">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search local exploits..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10"
          />
        </div>
        <div className="flex gap-2">
          <Select value={severityFilter} onValueChange={setSeverityFilter}>
            <SelectTrigger className="w-[130px]">
              <Filter className="h-4 w-4 mr-2" />
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Severity</SelectItem>
              <SelectItem value="critical">Critical</SelectItem>
              <SelectItem value="high">High</SelectItem>
              <SelectItem value="medium">Medium</SelectItem>
              <SelectItem value="low">Low</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>

      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {isLoading ? (
          Array.from({ length: 6 }).map((_, i) => (
            <Card key={i} className="bg-card/50 border-border/50 animate-pulse">
              <CardHeader>
                <div className="h-4 bg-muted rounded w-32"></div>
                <div className="h-3 bg-muted rounded w-24"></div>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  <div className="h-3 bg-muted rounded w-full"></div>
                  <div className="h-3 bg-muted rounded w-3/4"></div>
                </div>
              </CardContent>
            </Card>
          ))
        ) : filteredExploits.length > 0 ? (
          filteredExploits.map((exploit: LocalExploit) => (
            <ExploitCard key={exploit.id} exploit={exploit} />
          ))
        ) : (
          <div className="col-span-full text-center py-12">
            <AlertTriangle className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
            <h3 className="text-lg font-semibold mb-2">No local exploits found</h3>
            <p className="text-muted-foreground mb-4">
              {searchQuery || severityFilter !== "all" 
                ? "No exploits match your current filters." 
                : "No local exploits are available."}
            </p>
            <Button variant="outline">
              <Plus className="h-4 w-4 mr-2" />
              Add Exploit
            </Button>
          </div>
        )}
      </div>

      {!isLoading && filteredExploits.length > 0 && (
        <div className="mt-6 text-center text-sm text-muted-foreground">
          Showing {filteredExploits.length} local exploits
        </div>
      )}
    </div>
  );
}