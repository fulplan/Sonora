{"file_contents":{"design_guidelines.md":{"content":"# BYOB-Lab Design Guidelines\n\n## Design Approach\n**Cyberpunk Military Opsec Theme** - Inspired by military command centers, cyberpunk aesthetics, and tactical operations interfaces. Combines the technical precision of military systems with the futuristic edge of cyberpunk design.\n\n## Core Design Elements\n\n### Color Palette\n**Cyberpunk Military Theme**:\n- Background: 220 25% 4% (deep tactical black)\n- Surface: 220 20% 8% (command center dark)\n- Primary: 180 100% 45% (cyberpunk cyan for active states)  \n- Secondary: 130 70% 45% (matrix green for success/online)\n- Accent: 15 100% 50% (tactical red for alerts/critical)\n- Warning: 45 100% 50% (amber warning for compromised)\n- Text Primary: 180 20% 95% (cyan-tinted white)\n- Text Secondary: 180 15% 70% (muted cyan-gray)\n\n### Typography\n- **Primary**: 'JetBrains Mono' (monospace for terminal/code authenticity)\n- **Secondary**: 'Inter' (clean sans-serif for UI elements)\n- Terminal text: 14px regular weight\n- UI text: 14-16px medium weight\n- Headers: 18-24px semibold\n\n### Layout System\n**Tailwind spacing units**: 2, 4, 6, 8, 12, 16\n- Consistent 4-unit (1rem) grid system\n- 8-unit margins for major sections\n- 2-unit padding for tight spacing\n\n### Component Library\n\n**Navigation**: Fixed sidebar with collapsible sections\n- Lab environments, target machines, terminal, resources, progress\n\n**Dashboard Cards**: Glass-morphism effect with subtle borders\n- Status indicators using color-coded dots\n- Progress bars with gradient fills\n- Hover states with subtle glow effects\n\n**Terminal Interface**: Full-screen overlay capability\n- Authentic command prompt styling\n- Syntax highlighting for commands\n- Scrollable history with timestamps\n\n**Target Machine Grid**: Card-based layout\n- OS icons and vulnerability badges\n- Status indicators (online/offline/compromised)\n- Difficulty level visualization\n\n**Network Topology**: Interactive SVG-based visualization\n- Node connections with animated data flow\n- Clickable nodes revealing machine details\n- Zoom and pan capabilities\n\n## Key Design Principles\n\n1. **Authenticity**: Interface should feel like professional cybersecurity tools\n2. **Educational Clarity**: Complex concepts presented with clear visual hierarchy\n3. **Controlled Environment**: Visual cues that reinforce this is simulation/training\n4. **Progressive Disclosure**: Advanced features accessible but not overwhelming for beginners\n\n## Visual Treatment\n- **Background**: Dark gradient from deep navy to black\n- **Borders**: Subtle cyan glows on interactive elements\n- **Shadows**: Soft, dark shadows for depth without distraction\n- **Icons**: Line-style icons from Heroicons for consistency\n\n## Unique Features\n- **Simulation Badge**: Persistent \"SIMULATION\" indicator in header\n- **Progress Visualization**: Skill tree showing technique mastery\n- **Replay Controls**: Video-like controls for scenario playback\n- **Network Health**: Real-time simulated network status monitoring\n\nThis design balances professional cybersecurity aesthetics with educational accessibility, ensuring users feel they're working with realistic tools while maintaining clear learning objectives.","size_bytes":3140},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# BYOB-Lab - Cybersecurity Training Platform\n\n## Overview\n\nBYOB-Lab is a cybersecurity training platform designed to simulate post-exploitation techniques in controlled lab environments. The platform provides hands-on training through interactive target machines, network topologies, and terminal interfaces with a cyberpunk military aesthetic. It serves as an educational tool for learning penetration testing, lateral movement, and privilege escalation techniques in a safe, offline environment.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React with TypeScript**: Single-page application built with React 18 and TypeScript for type safety\n- **Vite Build System**: Fast development server and optimized production builds\n- **Wouter Routing**: Lightweight client-side routing for navigation between dashboard, targets, terminal, network map, scenarios, and telemetry pages\n- **Component-Based Design**: Modular UI components including target machine cards, terminal interface, network topology visualizer, and telemetry panels\n- **Styling Framework**: Tailwind CSS with custom cyberpunk/military theme variables and shadcn/ui component library\n- **State Management**: TanStack React Query for server state management and caching\n\n### Backend Architecture\n- **Express.js Server**: Node.js backend with Express framework for API endpoints\n- **TypeScript**: Full-stack TypeScript implementation for consistency and type safety\n- **Modular Route System**: Centralized route registration with placeholder for API endpoints\n- **Memory Storage**: In-memory storage implementation with interface for future database integration\n- **Development Integration**: Vite middleware integration for hot module replacement in development\n\n### Data Storage Solutions\n- **Database ORM**: Drizzle ORM configured for PostgreSQL with schema definitions\n- **Connection**: Neon serverless PostgreSQL database integration\n- **Schema Management**: Centralized schema definitions in shared directory with user authentication models\n- **Migration System**: Drizzle Kit for database schema migrations and version control\n\n### Authentication and Authorization\n- **User Management**: User schema with username/password authentication structure\n- **Session Handling**: Infrastructure prepared for session-based authentication\n- **Storage Interface**: Abstracted storage layer supporting user CRUD operations\n- **Security Considerations**: Password hashing and session management framework in place\n\n### External Dependencies\n\n#### UI and Styling\n- **Radix UI**: Comprehensive component library for accessible UI primitives (dialogs, dropdowns, navigation)\n- **Tailwind CSS**: Utility-first CSS framework with custom cyberpunk color scheme\n- **Lucide React**: Icon library providing consistent iconography throughout the application\n- **Class Variance Authority**: Component variant management for consistent styling patterns\n\n#### Database and ORM\n- **Neon Database**: Serverless PostgreSQL database service for production deployment\n- **Drizzle ORM**: Type-safe ORM for database operations and schema management\n- **Drizzle Kit**: CLI tool for database migrations and schema synchronization\n\n#### Development and Build Tools\n- **Vite**: Frontend build tool with React plugin and development server\n- **ESBuild**: Fast JavaScript bundler for production server builds\n- **PostCSS**: CSS processing with Tailwind CSS and Autoprefixer plugins\n\n#### Frontend State Management\n- **TanStack React Query**: Server state management, caching, and synchronization\n- **React Hook Form**: Form state management with validation support\n- **Zod**: Runtime type validation and schema parsing\n\n#### Additional Utilities\n- **Date-fns**: Date manipulation and formatting utilities\n- **clsx/tailwind-merge**: Conditional CSS class name management\n- **Embla Carousel**: Carousel component for UI interactions","size_bytes":3948},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        warning: {\n          DEFAULT: \"hsl(15 85% 55%)\",\n          foreground: \"hsl(15 20% 95%)\",\n        },\n        success: {\n          DEFAULT: \"hsl(130 70% 45%)\",\n          foreground: \"hsl(130 20% 95%)\",\n        },\n        terminal: {\n          green: \"hsl(130 70% 55%)\",\n          red: \"hsl(15 85% 65%)\",\n          yellow: \"hsl(45 85% 65%)\",\n          blue: \"hsl(220 85% 65%)\",\n          cyan: \"hsl(180 85% 65%)\",\n          magenta: \"hsl(280 85% 65%)\",\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"Inter\", \"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"JetBrains Mono\", \"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4547},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Existing users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Comprehensive client data schema for C2 management\nexport const clients = pgTable(\"clients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hostname: text(\"hostname\").notNull(),\n  ipAddress: text(\"ip_address\").notNull(),\n  macAddress: text(\"mac_address\"),\n  \n  // Operating System & Hardware\n  operatingSystem: text(\"operating_system\").notNull(),\n  osVersion: text(\"os_version\"),\n  architecture: text(\"architecture\"),\n  processorType: text(\"processor_type\"),\n  totalMemory: integer(\"total_memory\"), // in GB\n  \n  // Geographic & Network Location\n  country: text(\"country\"),\n  city: text(\"city\"),\n  region: text(\"region\"),\n  latitude: text(\"latitude\"),\n  longitude: text(\"longitude\"),\n  timezone: text(\"timezone\"),\n  \n  // Connection & Status\n  status: text(\"status\").notNull(), // online, offline, compromised, error\n  lastSeen: timestamp(\"last_seen\", { withTimezone: true }).defaultNow(),\n  firstSeen: timestamp(\"first_seen\", { withTimezone: true }).defaultNow(),\n  uptime: integer(\"uptime\"), // in seconds\n  connectionQuality: text(\"connection_quality\"), // excellent, good, fair, poor\n  \n  // Security & Privileges\n  currentUser: text(\"current_user\"),\n  isElevated: boolean(\"is_elevated\").default(false),\n  availablePrivileges: json(\"available_privileges\"), // array of privilege types\n  userAccounts: json(\"user_accounts\"), // array of user account objects\n  \n  // System Information\n  installedSoftware: json(\"installed_software\"), // array of software objects\n  runningProcesses: json(\"running_processes\"), // array of process objects\n  openPorts: json(\"open_ports\"), // array of port objects\n  networkInterfaces: json(\"network_interfaces\"), // array of network interface objects\n  \n  // Assessment & Classification\n  riskLevel: text(\"risk_level\"), // low, medium, high, critical\n  vulnerabilityCount: integer(\"vulnerability_count\").default(0),\n  difficulty: text(\"difficulty\"), // beginner, intermediate, advanced\n  \n  // Metadata\n  tags: json(\"tags\"), // array of strings\n  notes: text(\"notes\"),\n  isActive: boolean(\"is_active\").default(true),\n  \n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow(),\n});\n\nexport const insertClientSchema = createInsertSchema(clients).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertClient = z.infer<typeof insertClientSchema>;\nexport type Client = typeof clients.$inferSelect;\n\n// Session management schema\nexport const sessions = pgTable(\"sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").notNull(),\n  sessionType: text(\"session_type\").notNull(), // shell, file_manager, remote_desktop, surveillance\n  status: text(\"status\").notNull(), // active, inactive, terminated\n  \n  startedAt: timestamp(\"started_at\", { withTimezone: true }).defaultNow(),\n  lastActivity: timestamp(\"last_activity\", { withTimezone: true }).defaultNow(),\n  endedAt: timestamp(\"ended_at\", { withTimezone: true }),\n  \n  metadata: json(\"metadata\"), // session-specific data\n});\n\nexport const insertSessionSchema = createInsertSchema(sessions).omit({\n  id: true,\n  startedAt: true,\n  lastActivity: true,\n});\n\nexport type InsertSession = z.infer<typeof insertSessionSchema>;\nexport type Session = typeof sessions.$inferSelect;\n\n// Enhanced type definitions for frontend use\nexport interface ClientSystemInfo {\n  os: string;\n  version: string;\n  architecture: string;\n  processor: string;\n  memory: number;\n  uptime: number;\n}\n\nexport interface ClientLocation {\n  country: string;\n  city: string;\n  region: string;\n  latitude: number;\n  longitude: number;\n  timezone: string;\n}\n\nexport interface ClientUserAccount {\n  username: string;\n  isAdmin: boolean;\n  isActive: boolean;\n  lastLogin?: Date;\n  groups: string[];\n}\n\nexport interface ClientSoftware {\n  name: string;\n  version: string;\n  vendor: string;\n  installDate?: Date;\n  isSystemCritical: boolean;\n}\n\nexport interface ClientProcess {\n  pid: number;\n  name: string;\n  cpu: number;\n  memory: number;\n  user: string;\n  startTime: Date;\n}\n\nexport interface ClientNetworkInterface {\n  name: string;\n  type: string; // ethernet, wifi, vpn\n  ipAddress: string;\n  macAddress: string;\n  isActive: boolean;\n  speed?: number;\n}\n\nexport interface ClientPort {\n  port: number;\n  protocol: string; // TCP, UDP\n  state: string; // LISTENING, ESTABLISHED\n  service?: string;\n  processName?: string;\n}\n","size_bytes":5114},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { TopNavbar } from \"@/components/TopNavbar\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport ClientsPage from \"@/pages/ClientsPage\";\nimport TerminalPage from \"@/pages/TerminalPage\";\nimport NetworkPage from \"@/pages/NetworkPage\";\nimport ScenariosPage from \"@/pages/ScenariosPage\";\nimport TelemetryPage from \"@/pages/TelemetryPage\";\nimport NotFound from \"@/pages/not-found\";\nimport { useEffect } from \"react\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/clients\" component={ClientsPage} />\n      <Route path=\"/remote-access\" component={TerminalPage} />\n      <Route path=\"/network\" component={NetworkPage} />\n      <Route path=\"/scenarios\" component={ScenariosPage} />\n      <Route path=\"/surveillance\" component={() => <div className=\"container-responsive py-6\"><div className=\"text-center py-20\"><h1 className=\"text-2xl font-semibold mb-4\">Surveillance & Monitoring</h1><p className=\"text-muted-foreground\">Advanced surveillance features coming soon...</p></div></div>} />\n      <Route path=\"/post-exploitation\" component={() => <div className=\"container-responsive py-6\"><div className=\"text-center py-20\"><h1 className=\"text-2xl font-semibold mb-4\">Post-Exploitation Tools</h1><p className=\"text-muted-foreground\">Advanced exploitation tools coming soon...</p></div></div>} />\n      <Route path=\"/automation\" component={() => <div className=\"container-responsive py-6\"><div className=\"text-center py-20\"><h1 className=\"text-2xl font-semibold mb-4\">Automation & Tasking</h1><p className=\"text-muted-foreground\">Command automation features coming soon...</p></div></div>} />\n      <Route path=\"/telemetry\" component={TelemetryPage} />\n      <Route path=\"/batch\" component={() => <div className=\"container-responsive py-6\"><div className=\"text-center py-20\"><h1 className=\"text-2xl font-semibold mb-4\">Batch Operations</h1><p className=\"text-muted-foreground\">Advanced batch command execution coming soon...</p></div></div>} />\n      <Route path=\"/analysis\" component={() => <div className=\"container-responsive py-6\"><div className=\"text-center py-20\"><h1 className=\"text-2xl font-semibold mb-4\">Analysis & Intelligence</h1><p className=\"text-muted-foreground\">Data analysis and intelligence tools coming soon...</p></div></div>} />\n      <Route path=\"/reports\" component={() => <div className=\"container-responsive py-6\"><div className=\"text-center py-20\"><h1 className=\"text-2xl font-semibold mb-4\">Reports & Documentation</h1><p className=\"text-muted-foreground\">Operational reports and documentation coming soon...</p></div></div>} />\n      <Route path=\"/users\" component={() => <div className=\"container-responsive py-6\"><div className=\"text-center py-20\"><h1 className=\"text-2xl font-semibold mb-4\">User Management</h1><p className=\"text-muted-foreground\">User access control and management coming soon...</p></div></div>} />\n      <Route path=\"/logs\" component={() => <div className=\"container-responsive py-6\"><div className=\"text-center py-20\"><h1 className=\"text-2xl font-semibold mb-4\">System Logs</h1><p className=\"text-muted-foreground\">Comprehensive system logging and audit trails coming soon...</p></div></div>} />\n      <Route path=\"/resources\" component={() => <div className=\"container-responsive py-6\"><div className=\"text-center py-20\"><h1 className=\"text-2xl font-semibold mb-4\">Resources</h1><p className=\"text-muted-foreground\">Resources page coming soon...</p></div></div>} />\n      <Route path=\"/settings\" component={() => <div className=\"container-responsive py-6\"><div className=\"text-center py-20\"><h1 className=\"text-2xl font-semibold mb-4\">Settings</h1><p className=\"text-muted-foreground\">Settings page coming soon...</p></div></div>} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  // Initialize dark mode\n  useEffect(() => {\n    document.documentElement.classList.add('dark');\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen w-full bg-background text-foreground\">\n          <TopNavbar />\n          <main className=\"w-full\">\n            <Router />\n          </main>\n        </div>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":4565},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE - Clean Government Style */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 220 15% 97%;\n  --foreground: 224 16% 15%;\n  --border: 220 10% 85%;\n\n  --card: 220 10% 95%;\n  --card-foreground: 224 16% 18%;\n  --card-border: 220 10% 82%;\n\n  --sidebar: 220 12% 92%;\n  --sidebar-foreground: 224 16% 20%;\n  --sidebar-border: 220 10% 80%;\n\n  --sidebar-primary: 215 85% 45%;\n  --sidebar-primary-foreground: 220 20% 98%;\n\n  --sidebar-accent: 220 15% 88%;\n  --sidebar-accent-foreground: 224 16% 22%;\n\n  --sidebar-ring: 215 85% 45%;\n\n  --popover: 220 12% 92%;\n  --popover-foreground: 224 16% 18%;\n  --popover-border: 220 10% 78%;\n\n  --primary: 215 85% 45%;\n  --primary-foreground: 220 20% 98%;\n\n  --secondary: 220 12% 88%;\n  --secondary-foreground: 224 16% 25%;\n\n  --muted: 220 10% 90%;\n  --muted-foreground: 220 15% 45%;\n\n  --accent: 215 70% 50%;\n  --accent-foreground: 220 20% 98%;\n\n  --destructive: 358 75% 55%;\n  --destructive-foreground: 220 20% 98%;\n\n  --input: 220 15% 80%;\n  --ring: 215 85% 45%;\n  --chart-1: 215 85% 45%;\n  --chart-2: 25 85% 55%;\n  --chart-3: 358 75% 55%;\n  --chart-4: 280 70% 50%;\n  --chart-5: 45 70% 50%;\n\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: 'Georgia', serif;\n  --font-mono: 'JetBrains Mono', 'Consolas', monospace;\n  --radius: .375rem; /* 6px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(224 16% 15% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(224 16% 15% / 0.06);\n  --shadow-sm: 0px 1px 3px 0px hsl(224 16% 15% / 0.08), 0px 1px 2px -1px hsl(224 16% 15% / 0.08);\n  --shadow: 0px 1px 3px 0px hsl(224 16% 15% / 0.10), 0px 1px 2px -1px hsl(224 16% 15% / 0.10);\n  --shadow-md: 0px 4px 6px -1px hsl(224 16% 15% / 0.08), 0px 2px 4px -2px hsl(224 16% 15% / 0.08);\n  --shadow-lg: 0px 10px 15px -3px hsl(224 16% 15% / 0.08), 0px 4px 6px -4px hsl(224 16% 15% / 0.08);\n  --shadow-xl: 0px 20px 25px -5px hsl(224 16% 15% / 0.08), 0px 8px 10px -6px hsl(224 16% 15% / 0.08);\n  --shadow-2xl: 0px 25px 50px -12px hsl(224 16% 15% / 0.20);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n/* DARK MODE - Professional Government Style */\n.dark {\n  --button-outline: rgba(255, 255, 255, .08);\n  --badge-outline: rgba(255, 255, 255, .05);\n\n  --opaque-button-border-intensity: 8;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255, 255, 255, .04);\n  --elevate-2: rgba(255, 255, 255, .08);\n\n  --background: 224 20% 8%;\n  --foreground: 220 20% 92%;\n  --border: 224 20% 18%;\n\n  --card: 224 18% 12%;\n  --card-foreground: 220 20% 88%;\n  --card-border: 224 18% 20%;\n\n  --sidebar: 224 22% 10%;\n  --sidebar-foreground: 220 20% 85%;\n  --sidebar-border: 224 20% 16%;\n\n  --sidebar-primary: 215 85% 55%;\n  --sidebar-primary-foreground: 224 20% 95%;\n\n  --sidebar-accent: 224 15% 15%;\n  --sidebar-accent-foreground: 220 18% 80%;\n\n  --sidebar-ring: 215 85% 55%;\n\n  --popover: 224 18% 14%;\n  --popover-foreground: 220 20% 85%;\n  --popover-border: 224 16% 25%;\n\n  --primary: 215 85% 55%;\n  --primary-foreground: 224 20% 95%;\n\n  --secondary: 224 15% 18%;\n  --secondary-foreground: 220 18% 75%;\n\n  --muted: 224 15% 16%;\n  --muted-foreground: 220 12% 60%;\n\n  --accent: 215 70% 60%;\n  --accent-foreground: 224 20% 95%;\n\n  --destructive: 358 75% 60%;\n  --destructive-foreground: 224 20% 95%;\n\n  /* Used as the border around inputs. Dark mode: Should be a border that is light enough to have high contrast when rendered on a --card background. More contrast than standard --border */\n  --input: 224 16% 25%;\n  --ring: 215 85% 55%;\n  --chart-1: 215 85% 60%;\n  --chart-2: 25 85% 65%;\n  --chart-3: 358 75% 65%;\n  --chart-4: 280 70% 65%;\n  --chart-5: 45 70% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(224 20% 5% / 0.15);\n  --shadow-xs: 0px 1px 3px 0px hsl(224 20% 5% / 0.20);\n  --shadow-sm: 0px 1px 3px 0px hsl(224 20% 5% / 0.25), 0px 1px 2px -1px hsl(224 20% 5% / 0.25);\n  --shadow: 0px 1px 3px 0px hsl(224 20% 5% / 0.30), 0px 1px 2px -1px hsl(224 20% 5% / 0.30);\n  --shadow-md: 0px 4px 6px -1px hsl(224 20% 5% / 0.30), 0px 2px 4px -2px hsl(224 20% 5% / 0.30);\n  --shadow-lg: 0px 10px 15px -3px hsl(224 20% 5% / 0.30), 0px 4px 6px -4px hsl(224 20% 5% / 0.30);\n  --shadow-xl: 0px 20px 25px -5px hsl(224 20% 5% / 0.30), 0px 8px 10px -6px hsl(224 20% 5% / 0.30);\n  --shadow-2xl: 0px 25px 50px -12px hsl(224 20% 5% / 0.40);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Clean elevation system for professional UI\n * No glow effects - just subtle background changes\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n  /**\n   * Professional elevation system - clean and minimal\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n\n  /* Professional Status Indicators */\n  .status-online {\n    background: hsl(var(--chart-2));\n  }\n\n  .status-compromised {\n    background: hsl(var(--chart-5));\n  }\n\n  .status-critical {\n    background: hsl(var(--destructive));\n  }\n\n  .status-offline {\n    background: hsl(var(--muted-foreground));\n  }\n\n  /* Clean Professional Typography */\n  .gov-header {\n    font-family: var(--font-sans);\n    font-weight: 600;\n    letter-spacing: -0.025em;\n    line-height: 1.2;\n  }\n\n  .gov-body {\n    font-family: var(--font-sans);\n    font-weight: 400;\n    line-height: 1.5;\n  }\n\n  .gov-mono {\n    font-family: var(--font-mono);\n    font-weight: 400;\n    letter-spacing: 0.025em;\n  }\n\n  /* Government Classification Styling */\n  .classification-banner {\n    background: linear-gradient(90deg, hsl(var(--destructive)) 0%, hsl(var(--destructive) / 0.8) 100%);\n    color: hsl(var(--destructive-foreground));\n    font-family: var(--font-mono);\n    font-weight: 600;\n    font-size: 11px;\n    letter-spacing: 0.5px;\n    text-align: center;\n    padding: 4px 12px;\n    border: 1px solid hsl(var(--destructive-border));\n  }\n\n  .classification-simulation {\n    background: linear-gradient(90deg, hsl(25 85% 55%) 0%, hsl(25 85% 55% / 0.8) 100%);\n    color: white;\n    border-color: hsl(25 85% 45%);\n  }\n\n  /* Professional Grid System */\n  .gov-grid {\n    display: grid;\n    gap: 1.5rem;\n    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n  }\n\n  /* Clean Card Styling */\n  .gov-card {\n    background: hsl(var(--card));\n    border: 1px solid hsl(var(--card-border));\n    border-radius: var(--radius);\n    box-shadow: var(--shadow-sm);\n    transition: all 0.2s ease-in-out;\n  }\n\n  .gov-card:hover {\n    box-shadow: var(--shadow-md);\n    border-color: hsl(var(--border));\n  }\n\n  /* Professional Button Variants */\n  .btn-primary {\n    background: hsl(var(--primary));\n    color: hsl(var(--primary-foreground));\n    border: 1px solid hsl(var(--primary-border));\n  }\n\n  .btn-secondary {\n    background: hsl(var(--secondary));\n    color: hsl(var(--secondary-foreground));\n    border: 1px solid hsl(var(--secondary-border));\n  }\n\n  /* Clean Terminal Styling */\n  .terminal-clean {\n    background: hsl(224 25% 8%);\n    color: hsl(220 20% 90%);\n    font-family: var(--font-mono);\n    border: 1px solid hsl(224 20% 18%);\n  }\n\n  .terminal-prompt {\n    color: hsl(215 85% 60%);\n  }\n\n  .terminal-success {\n    color: hsl(142 76% 60%);\n  }\n\n  .terminal-error {\n    color: hsl(358 75% 65%);\n  }\n\n  .terminal-info {\n    color: hsl(220 90% 70%);\n  }\n\n  /* Responsive Design Utilities */\n  .container-responsive {\n    max-width: 100%;\n    margin: 0 auto;\n    padding: 0 1rem;\n  }\n\n  @screen sm {\n    .container-responsive {\n      max-width: 640px;\n    }\n  }\n\n  @screen md {\n    .container-responsive {\n      max-width: 768px;\n      padding: 0 1.5rem;\n    }\n  }\n\n  @screen lg {\n    .container-responsive {\n      max-width: 1024px;\n      padding: 0 2rem;\n    }\n  }\n\n  @screen xl {\n    .container-responsive {\n      max-width: 1280px;\n    }\n  }\n\n  @screen 2xl {\n    .container-responsive {\n      max-width: 1536px;\n    }\n  }\n}","size_bytes":12556},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AppSidebar.tsx":{"content":"import { Shield, Terminal, Network, Target, BookOpen, Activity, Settings, Play } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar\";\n\nconst menuItems = [\n  {\n    title: \"Dashboard\",\n    url: \"/\",\n    icon: Shield,\n  },\n  {\n    title: \"Target Machines\",\n    url: \"/targets\",\n    icon: Target,\n  },\n  {\n    title: \"Terminal\",\n    url: \"/terminal\",\n    icon: Terminal,\n  },\n  {\n    title: \"Network Map\",\n    url: \"/network\",\n    icon: Network,\n  },\n  {\n    title: \"Lab Scenarios\",\n    url: \"/scenarios\",\n    icon: Play,\n  },\n  {\n    title: \"Resources\",\n    url: \"/resources\",\n    icon: BookOpen,\n  },\n  {\n    title: \"Telemetry\",\n    url: \"/telemetry\",\n    icon: Activity,\n  },\n  {\n    title: \"Settings\",\n    url: \"/settings\",\n    icon: Settings,\n  },\n];\n\nexport function AppSidebar() {\n  const [location] = useLocation();\n\n  return (\n    <Sidebar data-testid=\"sidebar-main\" className=\"cyber-border\">\n      <SidebarContent className=\"hud-overlay\">\n        <SidebarGroup>\n          <SidebarGroupLabel className=\"text-primary font-mono text-sm tactical-font neon-glow tracking-wider\">\n            ◢ BYOB-LAB ◣<br />\n            <span className=\"text-xs text-muted-foreground\">TACTICAL OPS</span>\n          </SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton \n                    asChild \n                    isActive={location === item.url}\n                    className={`tactical-font hover:neon-glow transition-all duration-200 ${\n                      location === item.url ? 'cyber-border neon-glow' : ''\n                    }`}\n                  >\n                    <Link href={item.url} data-testid={`link-${item.title.toLowerCase().replace(' ', '-')}`}>\n                      <item.icon className=\"w-4 h-4\" />\n                      <span className=\"tracking-wide\">{item.title.toUpperCase()}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  );\n}","size_bytes":2411},"client/src/components/ClientCard.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Monitor, Wifi, WifiOff, Shield, AlertTriangle, CheckCircle, \n  Server, Globe, Lock, Users, HardDrive, Activity, Eye, Terminal,\n  MapPin, Clock, Cpu, MemoryStick, User, Crown, Database,\n  Network, Zap, FileText, Settings, Play, Square, MoreVertical\n} from \"lucide-react\";\nimport type { Client } from '@shared/schema';\n\ninterface ClientCardProps extends Client {\n  onConnect?: (clientId: string, connectionType: string) => void;\n  onViewDetails?: (clientId: string) => void;\n  onSelect?: (clientId: string, selected: boolean) => void;\n  isSelected?: boolean;\n}\n\nexport function ClientCard({ \n  id, hostname, ipAddress, operatingSystem, osVersion, architecture,\n  country, city, status, lastSeen, uptime, currentUser, isElevated,\n  userAccounts, riskLevel, vulnerabilityCount, difficulty, tags,\n  connectionQuality, totalMemory, processorType, notes,\n  onConnect, onViewDetails, onSelect, isSelected = false\n}: ClientCardProps) {\n  const statusConfig = {\n    online: { \n      color: 'text-green-600 dark:text-green-400', \n      icon: Wifi, \n      text: 'Online',\n      bgColor: 'bg-green-50 dark:bg-green-950',\n      borderColor: 'border-green-200 dark:border-green-800',\n      dotColor: 'status-online'\n    },\n    offline: { \n      color: 'text-gray-500 dark:text-gray-400', \n      icon: WifiOff, \n      text: 'Offline',\n      bgColor: 'bg-gray-50 dark:bg-gray-900',\n      borderColor: 'border-gray-200 dark:border-gray-700',\n      dotColor: 'status-offline'\n    },\n    compromised: { \n      color: 'text-amber-600 dark:text-amber-400', \n      icon: AlertTriangle, \n      text: 'Compromised',\n      bgColor: 'bg-amber-50 dark:bg-amber-950',\n      borderColor: 'border-amber-200 dark:border-amber-800',\n      dotColor: 'status-compromised'\n    },\n    error: {\n      color: 'text-red-600 dark:text-red-400', \n      icon: AlertTriangle, \n      text: 'Error',\n      bgColor: 'bg-red-50 dark:bg-red-950',\n      borderColor: 'border-red-200 dark:border-red-800',\n      dotColor: 'status-critical'\n    }\n  };\n\n  const riskConfig = {\n    low: { color: 'text-green-700 dark:text-green-300', variant: 'outline' as const },\n    medium: { color: 'text-amber-700 dark:text-amber-300', variant: 'secondary' as const },\n    high: { color: 'text-red-700 dark:text-red-300', variant: 'default' as const },\n    critical: { color: 'text-red-800 dark:text-red-200', variant: 'destructive' as const }\n  };\n\n  type ConnectionQuality = 'excellent' | 'good' | 'fair' | 'poor';\n  \n  const qualityConfig: Record<ConnectionQuality, { progress: number; color: string }> = {\n    excellent: { progress: 95, color: 'text-green-600' },\n    good: { progress: 75, color: 'text-blue-600' },\n    fair: { progress: 50, color: 'text-amber-600' },\n    poor: { progress: 25, color: 'text-red-600' }\n  };\n\n  const getOSIcon = (os: string) => {\n    const osLower = os.toLowerCase();\n    if (osLower.includes('windows')) return '🪟';\n    if (osLower.includes('linux') || osLower.includes('ubuntu') || osLower.includes('debian')) return '🐧';\n    if (osLower.includes('mac') || osLower.includes('darwin')) return '🍎';\n    if (osLower.includes('android')) return '🤖';\n    if (osLower.includes('ios')) return '📱';\n    return '💻';\n  };\n\n  const formatUptime = (seconds: number) => {\n    if (!seconds) return 'N/A';\n    const days = Math.floor(seconds / 86400);\n    const hours = Math.floor((seconds % 86400) / 3600);\n    return `${days}d ${hours}h`;\n  };\n\n  const formatLastSeen = (timestamp: Date) => {\n    if (!timestamp) return 'Never';\n    const now = new Date();\n    const diff = now.getTime() - new Date(timestamp).getTime();\n    const minutes = Math.floor(diff / 60000);\n    const hours = Math.floor(diff / 3600000);\n    const days = Math.floor(diff / 86400000);\n    \n    if (days > 0) return `${days}d ago`;\n    if (hours > 0) return `${hours}h ago`;\n    if (minutes > 0) return `${minutes}m ago`;\n    return 'Now';\n  };\n\n  const handleConnect = (type: string) => {\n    if (onConnect) onConnect(id, type);\n  };\n\n  const handleViewDetails = () => {\n    if (onViewDetails) onViewDetails(id);\n  };\n\n  const handleSelect = () => {\n    if (onSelect) onSelect(id, !isSelected);\n  };\n\n  const StatusIcon = statusConfig[status as keyof typeof statusConfig]?.icon || Monitor;\n  const currentConfig = statusConfig[status as keyof typeof statusConfig] || statusConfig.offline;\n  \n  // Pre-calculate connection quality values for type safety\n  const isValidConnectionQuality = connectionQuality && (connectionQuality in qualityConfig);\n  const connectionQualityColor = isValidConnectionQuality \n    ? qualityConfig[connectionQuality as ConnectionQuality].color \n    : 'text-muted-foreground';\n  const connectionQualityProgress = isValidConnectionQuality \n    ? qualityConfig[connectionQuality as ConnectionQuality].progress \n    : 0;\n  const connectionQualityDisplayText = connectionQuality?.toUpperCase() || 'UNKNOWN';\n  \n  return (\n    <Card \n      className={`gov-card transition-all duration-200 ${currentConfig.borderColor} hover:shadow-lg ${\n        isSelected ? 'ring-2 ring-primary ring-offset-2' : ''\n      }`} \n      data-testid={`card-client-${id}`}\n    >\n      <CardHeader className=\"pb-3\">\n        {/* Header with selection and status */}\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-start gap-3 flex-1\">\n            <input\n              type=\"checkbox\"\n              checked={isSelected}\n              onChange={handleSelect}\n              className=\"mt-1 h-4 w-4 text-primary focus:ring-primary border-border rounded\"\n              data-testid={`checkbox-select-${id}`}\n            />\n            <div className={`p-2 rounded-lg ${currentConfig.bgColor}`}>\n              <Server className={`w-5 h-5 ${currentConfig.color}`} />\n            </div>\n            <div className=\"space-y-1 flex-1\">\n              <div className=\"flex items-center gap-2\">\n                <CardTitle className=\"text-base font-semibold gov-header\">{hostname}</CardTitle>\n                <span className=\"text-lg\" title={operatingSystem}>{getOSIcon(operatingSystem)}</span>\n              </div>\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <Globe className=\"w-3 h-3\" />\n                <span className=\"font-mono\">{ipAddress}</span>\n                {country && city && (\n                  <>\n                    <Separator orientation=\"vertical\" className=\"h-3\" />\n                    <MapPin className=\"w-3 h-3\" />\n                    <span>{city}, {country}</span>\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className={`w-2 h-2 rounded-full ${currentConfig.dotColor}`}></div>\n            <StatusIcon className={`w-4 h-4 ${currentConfig.color}`} />\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {/* System Information Grid */}\n        <div className=\"grid grid-cols-2 gap-3 text-xs\">\n          <div className=\"space-y-1\">\n            <span className=\"text-muted-foreground uppercase tracking-wide\">OS & Arch</span>\n            <p className=\"font-medium gov-body\">{operatingSystem.split(' ').slice(0, 2).join(' ')}</p>\n            <p className=\"text-muted-foreground font-mono\">{architecture}</p>\n          </div>\n          <div className=\"space-y-1\">\n            <span className=\"text-muted-foreground uppercase tracking-wide\">User Context</span>\n            <div className=\"flex items-center gap-1\">\n              <User className=\"w-3 h-3\" />\n              <p className=\"font-medium font-mono\">{currentUser || 'N/A'}</p>\n              {isElevated && <Crown className=\"w-3 h-3 text-amber-500\" />}\n            </div>\n          </div>\n        </div>\n\n        {/* System Specs */}\n        <div className=\"grid grid-cols-2 gap-3 text-xs\">\n          <div className=\"space-y-1\">\n            <span className=\"text-muted-foreground uppercase tracking-wide flex items-center gap-1\">\n              <Cpu className=\"w-3 h-3\" />\n              Processor\n            </span>\n            <p className=\"font-medium text-xs leading-tight\">{processorType || 'Unknown'}</p>\n          </div>\n          <div className=\"space-y-1\">\n            <span className=\"text-muted-foreground uppercase tracking-wide flex items-center gap-1\">\n              <MemoryStick className=\"w-3 h-3\" />\n              Memory\n            </span>\n            <p className=\"font-medium\">{totalMemory ? `${totalMemory} GB` : 'Unknown'}</p>\n          </div>\n        </div>\n\n        {/* Connection Quality & Uptime */}\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between text-xs\">\n            <span className=\"text-muted-foreground uppercase tracking-wide\">Connection Quality</span>\n            <span className={`font-medium ${connectionQualityColor}`}>\n              {String(connectionQualityDisplayText)}\n            </span>\n          </div>\n          <Progress \n            value={Number(connectionQualityProgress)} \n            className=\"h-1.5\"\n          />\n        </div>\n\n        {/* Risk Assessment */}\n        <div className=\"flex items-center justify-between p-3 rounded-lg bg-muted/30 border border-border\">\n          <div className=\"space-y-1\">\n            <span className=\"text-xs text-muted-foreground uppercase tracking-wide\">Risk Assessment</span>\n            <div className=\"flex items-center gap-2\">\n              <Badge \n                variant={riskConfig[riskLevel as keyof typeof riskConfig]?.variant || 'outline'}\n                className=\"text-xs font-mono\"\n              >\n                {riskLevel?.toUpperCase() || 'UNKNOWN'}\n              </Badge>\n              <span className=\"text-sm text-muted-foreground\">\n                {vulnerabilityCount || 0} CVE{vulnerabilityCount !== 1 ? 's' : ''}\n              </span>\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <Badge \n              variant=\"outline\"\n              className=\"text-xs capitalize\"\n            >\n              {difficulty || 'Unknown'}\n            </Badge>\n          </div>\n        </div>\n\n        {/* User Accounts Summary */}\n        {userAccounts && Array.isArray(userAccounts) && userAccounts.length > 0 && (\n          <div className=\"space-y-2\">\n            <span className=\"text-xs text-muted-foreground uppercase tracking-wide flex items-center gap-1\">\n              <Users className=\"w-3 h-3\" />\n              User Accounts ({userAccounts.length})\n            </span>\n            <div className=\"flex flex-wrap gap-1\">\n              {userAccounts.slice(0, 3).map((account: { username: string; isAdmin?: boolean }, index: number) => (\n                <Badge key={index} variant=\"outline\" className=\"text-xs font-mono px-2 py-1\">\n                  {account.username}\n                  {account.isAdmin && <Crown className=\"w-2 h-2 ml-1 text-amber-500\" />}\n                </Badge>\n              ))}\n              {userAccounts.length > 3 && (\n                <Badge variant=\"outline\" className=\"text-xs px-2 py-1\">\n                  +{userAccounts.length - 3} more\n                </Badge>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Tags */}\n        {tags && Array.isArray(tags) && tags.length > 0 && (\n          <div className=\"space-y-2\">\n            <span className=\"text-xs text-muted-foreground uppercase tracking-wide\">Tags</span>\n            <div className=\"flex flex-wrap gap-1\">\n              {tags.slice(0, 4).map((tag: string, index: number) => (\n                <Badge key={index} variant=\"secondary\" className=\"text-xs px-2 py-1\">\n                  {tag}\n                </Badge>\n              ))}\n              {tags.length > 4 && (\n                <Badge variant=\"secondary\" className=\"text-xs px-2 py-1\">\n                  +{tags.length - 4}\n                </Badge>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"flex items-center gap-2 pt-2\">\n          <Button \n            size=\"sm\" \n            variant={status === 'compromised' ? 'default' : 'outline'}\n            className=\"flex-1\" \n            onClick={() => handleConnect('shell')}\n            disabled={status === 'offline'}\n            data-testid={`button-shell-${id}`}\n          >\n            {status === 'compromised' ? (\n              <>\n                <Terminal className=\"w-3 h-3 mr-1\" />\n                Shell\n              </>\n            ) : status === 'online' ? (\n              <>\n                <Lock className=\"w-3 h-3 mr-1\" />\n                Exploit\n              </>\n            ) : (\n              <>\n                <WifiOff className=\"w-3 h-3 mr-1\" />\n                Offline\n              </>\n            )}\n          </Button>\n          \n          <Button \n            size=\"sm\" \n            variant=\"outline\"\n            onClick={() => handleConnect('files')}\n            disabled={status !== 'compromised'}\n            data-testid={`button-files-${id}`}\n          >\n            <HardDrive className=\"w-3 h-3\" />\n          </Button>\n          \n          <Button \n            size=\"sm\" \n            variant=\"outline\"\n            onClick={() => handleConnect('surveillance')}\n            disabled={status !== 'compromised'}\n            data-testid={`button-surveillance-${id}`}\n          >\n            <Eye className=\"w-3 h-3\" />\n          </Button>\n          \n          <Button \n            size=\"sm\" \n            variant=\"ghost\"\n            onClick={handleViewDetails}\n            data-testid={`button-details-${id}`}\n          >\n            <MoreVertical className=\"w-3 h-3\" />\n          </Button>\n        </div>\n\n        {/* Status Footer */}\n        <div className=\"flex items-center justify-between text-xs text-muted-foreground pt-2 border-t border-border\">\n          <div className=\"flex items-center gap-3\">\n            <span className=\"flex items-center gap-1\">\n              <Activity className=\"w-3 h-3\" />\n              {currentConfig.text}\n            </span>\n            <span className=\"flex items-center gap-1\">\n              <Clock className=\"w-3 h-3\" />\n              {formatUptime(uptime || 0)}\n            </span>\n          </div>\n          <span className=\"font-mono\">\n            Last: {formatLastSeen(lastSeen || new Date())}\n          </span>\n        </div>\n\n        {/* Notes (if any) */}\n        {notes && (\n          <div className=\"pt-2 border-t border-border\">\n            <p className=\"text-xs text-muted-foreground italic\">{notes}</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":14938},"client/src/components/DashboardHeader.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { Sun, Moon, Shield, AlertTriangle } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport function DashboardHeader() {\n  const [isDarkMode, setIsDarkMode] = useState(true);\n\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n    document.documentElement.classList.toggle('dark');\n    console.log('Theme toggled:', isDarkMode ? 'light' : 'dark');\n  };\n\n  return (\n    <header className=\"flex items-center justify-between p-4 border-b bg-card hud-overlay cyber-border\" data-testid=\"header-dashboard\">\n      <div className=\"flex items-center gap-4\">\n        <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n        <div className=\"classification-bar simulation tactical-font\">\n          <Shield className=\"w-3 h-3 inline mr-1\" />\n          SIMULATION MODE - TRAINING ENVIRONMENT\n        </div>\n      </div>\n      \n      <div className=\"flex items-center gap-2\">\n        <Badge variant=\"secondary\" className=\"font-mono text-xs cyber-border\" data-testid=\"badge-connection-status\">\n          <div className=\"w-2 h-2 rounded-full status-online mr-2\"></div>\n          LAB NETWORK: SECURE\n        </Badge>\n        <div className=\"text-xs font-mono text-muted-foreground terminal-cursor\">\n          OPSEC STATUS: ACTIVE\n        </div>\n        <Button \n          variant=\"ghost\" \n          size=\"icon\" \n          onClick={toggleTheme}\n          data-testid=\"button-theme-toggle\"\n          className=\"cyber-border neon-glow\"\n        >\n          {isDarkMode ? <Sun className=\"w-4 h-4\" /> : <Moon className=\"w-4 h-4\" />}\n        </Button>\n      </div>\n    </header>\n  );\n}","size_bytes":1746},"client/src/components/LabEnvironmentSelector.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Play, Clock, Users, Shield, AlertTriangle, CheckCircle } from \"lucide-react\";\n\ninterface LabEnvironment {\n  id: string;\n  name: string;\n  description: string;\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\n  duration: string;\n  participants: number;\n  maxParticipants: number;\n  techniques: string[];\n  status: 'available' | 'in-progress' | 'completed';\n}\n\nexport function LabEnvironmentSelector() {\n  //todo: remove mock functionality\n  const environments: LabEnvironment[] = [\n    {\n      id: 'windows-domain',\n      name: 'Windows Domain Compromise',\n      description: 'Learn lateral movement and persistence techniques in an Active Directory environment.',\n      difficulty: 'intermediate',\n      duration: '45-60 min',\n      participants: 1,\n      maxParticipants: 4,\n      techniques: ['Lateral Movement', 'Credential Dumping', 'Domain Admin'],\n      status: 'available'\n    },\n    {\n      id: 'linux-privilege-esc',\n      name: 'Linux Privilege Escalation',\n      description: 'Explore various methods to escalate privileges from a low-privileged user account.',\n      difficulty: 'beginner',\n      duration: '30-45 min',\n      participants: 2,\n      maxParticipants: 3,\n      techniques: ['SUID Binaries', 'Cron Jobs', 'Sudo Exploitation'],\n      status: 'in-progress'\n    },\n    {\n      id: 'web-app-pentest',\n      name: 'Web Application Penetration',\n      description: 'Advanced techniques for compromising web applications and maintaining access.',\n      difficulty: 'advanced',\n      duration: '60-90 min',\n      participants: 0,\n      maxParticipants: 2,\n      techniques: ['SQL Injection', 'XSS', 'Command Injection', 'File Upload'],\n      status: 'completed'\n    },\n    {\n      id: 'network-pivoting',\n      name: 'Network Pivoting & Tunneling',\n      description: 'Master network pivoting techniques to access isolated network segments.',\n      difficulty: 'advanced',\n      duration: '75-90 min',\n      participants: 0,\n      maxParticipants: 3,\n      techniques: ['Proxychains', 'SSH Tunneling', 'Meterpreter Pivoting'],\n      status: 'available'\n    }\n  ];\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'beginner': return 'bg-success text-success-foreground';\n      case 'intermediate': return 'bg-warning text-warning-foreground';\n      case 'advanced': return 'bg-destructive text-destructive-foreground';\n      default: return 'bg-secondary text-secondary-foreground';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'available': return <Play className=\"w-4 h-4\" />;\n      case 'in-progress': return <Clock className=\"w-4 h-4 text-warning\" />;\n      case 'completed': return <CheckCircle className=\"w-4 h-4 text-success\" />;\n      default: return <AlertTriangle className=\"w-4 h-4\" />;\n    }\n  };\n\n  const handleStartLab = (envId: string) => {\n    console.log(`Starting lab environment: ${envId}`);\n  };\n\n  return (\n    <div className=\"space-y-4\" data-testid=\"lab-environment-selector\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-lg font-semibold\">Lab Environments</h2>\n          <p className=\"text-sm text-muted-foreground\">Choose a scenario to practice post-exploitation techniques</p>\n        </div>\n        <Badge variant=\"outline\" className=\"text-xs\">\n          {environments.filter(e => e.status === 'available').length} Available\n        </Badge>\n      </div>\n\n      <div className=\"grid gap-4\">\n        {environments.map((env) => (\n          <Card key={env.id} className=\"hover-elevate\" data-testid={`lab-environment-${env.id}`}>\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"space-y-1\">\n                  <div className=\"flex items-center gap-2\">\n                    {getStatusIcon(env.status)}\n                    <CardTitle className=\"text-base\">{env.name}</CardTitle>\n                  </div>\n                  <CardDescription className=\"text-sm\">{env.description}</CardDescription>\n                </div>\n                <Badge className={`${getDifficultyColor(env.difficulty)} text-xs`}>\n                  {env.difficulty}\n                </Badge>\n              </div>\n            </CardHeader>\n\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                <div className=\"flex items-center gap-1\">\n                  <Clock className=\"w-3 h-3\" />\n                  <span>{env.duration}</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <Users className=\"w-3 h-3\" />\n                  <span>{env.participants}/{env.maxParticipants} participants</span>\n                </div>\n              </div>\n\n              <div className=\"flex flex-wrap gap-1\">\n                {env.techniques.map((technique, index) => (\n                  <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                    {technique}\n                  </Badge>\n                ))}\n              </div>\n\n              <div className=\"flex justify-between items-center\">\n                <div className=\"flex items-center gap-2\">\n                  <Shield className=\"w-4 h-4 text-muted-foreground\" />\n                  <span className=\"text-xs text-muted-foreground\">Isolated Environment</span>\n                </div>\n                <Button \n                  size=\"sm\"\n                  variant={env.status === 'available' ? 'default' : 'secondary'}\n                  disabled={env.status === 'in-progress'}\n                  onClick={() => handleStartLab(env.id)}\n                  data-testid={`button-start-${env.id}`}\n                >\n                  {env.status === 'available' ? 'Start Lab' : \n                   env.status === 'in-progress' ? 'In Progress' : 'Review'}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":6236},"client/src/components/NetworkTopology.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Network, Router, Monitor, Server, Smartphone, Shield } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface NetworkNode {\n  id: string;\n  name: string;\n  type: 'router' | 'server' | 'workstation' | 'mobile' | 'firewall';\n  status: 'online' | 'offline' | 'compromised';\n  ip: string;\n  x: number;\n  y: number;\n}\n\nexport function NetworkTopology() {\n  //todo: remove mock functionality\n  const [nodes] = useState<NetworkNode[]>([\n    { id: 'router', name: 'Gateway Router', type: 'router', status: 'online', ip: '192.168.1.1', x: 50, y: 20 },\n    { id: 'firewall', name: 'Firewall', type: 'firewall', status: 'online', ip: '192.168.1.2', x: 50, y: 45 },\n    { id: 'server1', name: 'Web Server', type: 'server', status: 'compromised', ip: '192.168.1.10', x: 20, y: 70 },\n    { id: 'server2', name: 'DB Server', type: 'server', status: 'online', ip: '192.168.1.11', x: 50, y: 70 },\n    { id: 'workstation1', name: 'Admin PC', type: 'workstation', status: 'online', ip: '192.168.1.20', x: 80, y: 70 },\n    { id: 'workstation2', name: 'User PC', type: 'workstation', status: 'offline', ip: '192.168.1.21', x: 20, y: 90 },\n    { id: 'mobile1', name: 'Mobile Device', type: 'mobile', status: 'online', ip: '192.168.1.30', x: 80, y: 90 },\n  ]);\n\n  const [selectedNode, setSelectedNode] = useState<string | null>(null);\n\n  const getIcon = (type: NetworkNode['type']) => {\n    switch (type) {\n      case 'router': return Router;\n      case 'server': return Server;\n      case 'workstation': return Monitor;\n      case 'mobile': return Smartphone;\n      case 'firewall': return Shield;\n      default: return Monitor;\n    }\n  };\n\n  const getStatusColor = (status: NetworkNode['status']) => {\n    switch (status) {\n      case 'online': return 'text-success';\n      case 'offline': return 'text-muted-foreground';\n      case 'compromised': return 'text-warning';\n      default: return 'text-muted-foreground';\n    }\n  };\n\n  const connections = [\n    { from: 'router', to: 'firewall' },\n    { from: 'firewall', to: 'server1' },\n    { from: 'firewall', to: 'server2' },\n    { from: 'firewall', to: 'workstation1' },\n    { from: 'firewall', to: 'workstation2' },\n    { from: 'firewall', to: 'mobile1' },\n  ];\n\n  const handleNodeClick = (nodeId: string) => {\n    setSelectedNode(nodeId);\n    console.log('Selected network node:', nodeId);\n  };\n\n  return (\n    <Card data-testid=\"network-topology\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Network className=\"w-5 h-5 text-primary\" />\n            <div>\n              <CardTitle>Network Topology</CardTitle>\n              <CardDescription>Lab network layout and device status</CardDescription>\n            </div>\n          </div>\n          <Badge variant=\"outline\" className=\"text-xs\">\n            7 devices\n          </Badge>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"p-6\">\n        <div className=\"relative bg-muted/20 rounded-lg p-4 min-h-[400px]\">\n          {/* Connection lines */}\n          <svg className=\"absolute inset-0 w-full h-full pointer-events-none\">\n            {connections.map((connection, index) => {\n              const fromNode = nodes.find(n => n.id === connection.from);\n              const toNode = nodes.find(n => n.id === connection.to);\n              if (!fromNode || !toNode) return null;\n              \n              return (\n                <line\n                  key={index}\n                  x1={`${fromNode.x}%`}\n                  y1={`${fromNode.y}%`}\n                  x2={`${toNode.x}%`}\n                  y2={`${toNode.y}%`}\n                  stroke=\"hsl(var(--border))\"\n                  strokeWidth=\"1\"\n                  strokeDasharray=\"2,2\"\n                />\n              );\n            })}\n          </svg>\n\n          {/* Network nodes */}\n          {nodes.map((node) => {\n            const IconComponent = getIcon(node.type);\n            const isSelected = selectedNode === node.id;\n            \n            return (\n              <div\n                key={node.id}\n                className=\"absolute transform -translate-x-1/2 -translate-y-1/2 cursor-pointer\"\n                style={{ left: `${node.x}%`, top: `${node.y}%` }}\n                onClick={() => handleNodeClick(node.id)}\n                data-testid={`node-${node.id}`}\n              >\n                <div className={`\n                  flex flex-col items-center gap-1 p-2 rounded-lg border\n                  ${isSelected ? 'bg-primary/20 border-primary' : 'bg-card border-border'}\n                  hover-elevate\n                `}>\n                  <IconComponent className={`w-6 h-6 ${getStatusColor(node.status)}`} />\n                  <div className=\"text-center\">\n                    <div className=\"text-xs font-medium\">{node.name}</div>\n                    <div className=\"text-xs text-muted-foreground font-mono\">{node.ip}</div>\n                    <Badge \n                      variant={node.status === 'compromised' ? 'destructive' : 'secondary'} \n                      className=\"text-xs mt-1\"\n                    >\n                      {node.status}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {selectedNode && (\n          <div className=\"mt-4 p-3 bg-muted rounded-lg\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h4 className=\"text-sm font-medium\">\n                  {nodes.find(n => n.id === selectedNode)?.name}\n                </h4>\n                <p className=\"text-xs text-muted-foreground font-mono\">\n                  {nodes.find(n => n.id === selectedNode)?.ip}\n                </p>\n              </div>\n              <Button size=\"sm\" variant=\"outline\" data-testid={`button-scan-${selectedNode}`}>\n                Scan Device\n              </Button>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6213},"client/src/components/TargetMachineCard.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Monitor, Wifi, WifiOff, Shield, AlertTriangle, CheckCircle, \n  Server, Globe, Lock, Users, HardDrive, Activity, Eye, Terminal\n} from \"lucide-react\";\n\ninterface TargetMachineCardProps {\n  id: string;\n  name: string;\n  os: string;\n  ip: string;\n  status: 'online' | 'offline' | 'compromised';\n  vulnerabilities: number;\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\n  domain?: string;\n  services?: string[];\n}\n\nexport function TargetMachineCard({ \n  id, name, os, ip, status, vulnerabilities, difficulty, domain = \"N/A\", services = []\n}: TargetMachineCardProps) {\n  const statusConfig = {\n    online: { \n      color: 'text-green-600 dark:text-green-400', \n      icon: Wifi, \n      text: 'Online',\n      bgColor: 'bg-green-50 dark:bg-green-950',\n      borderColor: 'border-green-200 dark:border-green-800'\n    },\n    offline: { \n      color: 'text-gray-500 dark:text-gray-400', \n      icon: WifiOff, \n      text: 'Offline',\n      bgColor: 'bg-gray-50 dark:bg-gray-900',\n      borderColor: 'border-gray-200 dark:border-gray-700'\n    },\n    compromised: { \n      color: 'text-amber-600 dark:text-amber-400', \n      icon: AlertTriangle, \n      text: 'Compromised',\n      bgColor: 'bg-amber-50 dark:bg-amber-950',\n      borderColor: 'border-amber-200 dark:border-amber-800'\n    }\n  };\n\n  const difficultyConfig = {\n    beginner: { \n      color: 'text-green-700 dark:text-green-300', \n      text: 'Beginner',\n      bgColor: 'bg-green-100 dark:bg-green-900'\n    },\n    intermediate: { \n      color: 'text-amber-700 dark:text-amber-300', \n      text: 'Intermediate',\n      bgColor: 'bg-amber-100 dark:bg-amber-900'\n    },\n    advanced: { \n      color: 'text-red-700 dark:text-red-300', \n      text: 'Advanced',\n      bgColor: 'bg-red-100 dark:bg-red-900'\n    }\n  };\n\n  const getRiskLevel = () => {\n    if (status === 'compromised') return 'HIGH';\n    if (vulnerabilities > 10) return 'CRITICAL';\n    if (vulnerabilities > 5) return 'HIGH';\n    if (vulnerabilities > 2) return 'MEDIUM';\n    return 'LOW';\n  };\n\n  const handleConnect = () => {\n    console.log(`Connecting to target machine: ${name} (${ip})`);\n  };\n\n  const handleViewDetails = () => {\n    console.log(`Viewing details for target machine: ${name}`);\n  };\n\n  const StatusIcon = statusConfig[status].icon;\n  const riskLevel = getRiskLevel();\n\n  return (\n    <Card \n      className={`gov-card transition-all duration-200 ${statusConfig[status].borderColor} hover:shadow-lg`} \n      data-testid={`card-target-${id}`}\n    >\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className={`p-2 rounded-lg ${statusConfig[status].bgColor}`}>\n              <Server className={`w-5 h-5 ${statusConfig[status].color}`} />\n            </div>\n            <div className=\"space-y-1\">\n              <CardTitle className=\"text-base font-semibold gov-header\">{name}</CardTitle>\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <Globe className=\"w-3 h-3\" />\n                <span className=\"font-mono\">{ip}</span>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className={`w-2 h-2 rounded-full ${\n              status === 'online' ? 'status-online' : \n              status === 'compromised' ? 'status-compromised' : \n              'status-offline'\n            }`}></div>\n            <StatusIcon className={`w-4 h-4 ${statusConfig[status].color}`} />\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {/* System Information */}\n        <div className=\"grid grid-cols-2 gap-3 text-xs\">\n          <div className=\"space-y-1\">\n            <span className=\"text-muted-foreground uppercase tracking-wide\">OS</span>\n            <p className=\"font-medium gov-body\">{os}</p>\n          </div>\n          <div className=\"space-y-1\">\n            <span className=\"text-muted-foreground uppercase tracking-wide\">Domain</span>\n            <p className=\"font-medium font-mono\">{domain}</p>\n          </div>\n        </div>\n\n        {/* Risk Assessment */}\n        <div className=\"flex items-center justify-between p-3 rounded-lg bg-muted/30 border border-border\">\n          <div className=\"space-y-1\">\n            <span className=\"text-xs text-muted-foreground uppercase tracking-wide\">Risk Level</span>\n            <div className=\"flex items-center gap-2\">\n              <Badge \n                variant={\n                  riskLevel === 'CRITICAL' ? 'destructive' : \n                  riskLevel === 'HIGH' ? 'default' : \n                  riskLevel === 'MEDIUM' ? 'secondary' : \n                  'outline'\n                }\n                className=\"text-xs font-mono\"\n              >\n                {riskLevel}\n              </Badge>\n              <span className=\"text-sm text-muted-foreground\">\n                {vulnerabilities} CVE{vulnerabilities !== 1 ? 's' : ''}\n              </span>\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <Badge \n              className={`${difficultyConfig[difficulty].bgColor} ${difficultyConfig[difficulty].color} border-0 text-xs`}\n            >\n              {difficultyConfig[difficulty].text}\n            </Badge>\n          </div>\n        </div>\n\n        {/* Services */}\n        {services.length > 0 && (\n          <div className=\"space-y-2\">\n            <span className=\"text-xs text-muted-foreground uppercase tracking-wide\">Services</span>\n            <div className=\"flex flex-wrap gap-1\">\n              {services.slice(0, 4).map((service, index) => (\n                <Badge key={index} variant=\"outline\" className=\"text-xs font-mono px-2 py-1\">\n                  {service}\n                </Badge>\n              ))}\n              {services.length > 4 && (\n                <Badge variant=\"outline\" className=\"text-xs px-2 py-1\">\n                  +{services.length - 4} more\n                </Badge>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"flex items-center gap-2 pt-2\">\n          <Button \n            size=\"sm\" \n            variant={status === 'compromised' ? 'default' : 'outline'}\n            className=\"flex-1\" \n            onClick={handleConnect}\n            disabled={status === 'offline'}\n            data-testid={`button-connect-${id}`}\n          >\n            {status === 'compromised' ? (\n              <>\n                <Terminal className=\"w-3 h-3 mr-1\" />\n                Access Shell\n              </>\n            ) : status === 'online' ? (\n              <>\n                <Lock className=\"w-3 h-3 mr-1\" />\n                Exploit\n              </>\n            ) : (\n              <>\n                <WifiOff className=\"w-3 h-3 mr-1\" />\n                Offline\n              </>\n            )}\n          </Button>\n          <Button \n            size=\"sm\" \n            variant=\"ghost\"\n            onClick={handleViewDetails}\n            data-testid={`button-details-${id}`}\n          >\n            <Eye className=\"w-3 h-3\" />\n          </Button>\n        </div>\n\n        {/* Status Footer */}\n        <div className=\"flex items-center justify-between text-xs text-muted-foreground pt-2 border-t border-border\">\n          <span className=\"flex items-center gap-1\">\n            <Activity className=\"w-3 h-3\" />\n            {statusConfig[status].text}\n          </span>\n          <span className=\"font-mono\">\n            Last seen: {status === 'offline' ? '2h ago' : 'Now'}\n          </span>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7863},"client/src/components/TelemetryPanel.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Activity, BarChart3, Network, Shield, AlertTriangle, \n  TrendingUp, TrendingDown, Eye, Download, Zap, Clock, \n  Server, Database, Cpu, HardDrive, Wifi\n} from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface TelemetryEvent {\n  id: string;\n  timestamp: string;\n  source: string;\n  event: string;\n  details: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  category: 'network' | 'system' | 'security' | 'application';\n}\n\nexport function TelemetryPanel() {\n  // Professional government-style telemetry data with comprehensive events\n  const [events] = useState<TelemetryEvent[]>([\n    {\n      id: '001',\n      timestamp: '2024-03-14 14:32:15',\n      source: 'WIN-DC-2019',\n      event: 'Privilege Escalation Detected',\n      details: 'SeDebugPrivilege enabled for process: cmd.exe (PID: 2847)',\n      severity: 'high',\n      category: 'security'\n    },\n    {\n      id: '002',\n      timestamp: '2024-03-14 14:32:42',\n      source: 'UBUNTU-WEB', \n      event: 'Reverse Shell Connection',\n      details: 'Outbound TCP connection established to 10.0.1.100:4444',\n      severity: 'critical',\n      category: 'network'\n    },\n    {\n      id: '003',\n      timestamp: '2024-03-14 14:33:01',\n      source: 'CENTOS-DB',\n      event: 'Authentication Failure',\n      details: 'Multiple failed SSH login attempts from 10.0.1.20 (user: root)',\n      severity: 'medium',\n      category: 'security'\n    },\n    {\n      id: '004',\n      timestamp: '2024-03-14 14:33:15',\n      source: 'MACOS-DEV',\n      event: 'Suspicious Process Creation',\n      details: '/bin/bash spawned by launchctl with elevated privileges',\n      severity: 'high',\n      category: 'system'\n    },\n    {\n      id: '005',\n      timestamp: '2024-03-14 14:33:28',\n      source: 'WIN-DC-2019',\n      event: 'Registry Persistence Mechanism',\n      details: 'New autorun entry: HKLM\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\SecurityUpdate',\n      severity: 'critical',\n      category: 'system'\n    },\n    {\n      id: '006',\n      timestamp: '2024-03-14 14:33:45',\n      source: 'UBUNTU-WEB',\n      event: 'Data Exfiltration Attempt',\n      details: 'Large file transfer detected: /etc/passwd, /etc/shadow (2.3MB)',\n      severity: 'critical',\n      category: 'network'\n    },\n    {\n      id: '007',\n      timestamp: '2024-03-14 14:34:12',\n      source: 'FIREWALL-01',\n      event: 'Port Scan Detected',\n      details: 'Nmap scan detected from 10.0.1.20 targeting DMZ network',\n      severity: 'medium',\n      category: 'network'\n    },\n    {\n      id: '008',\n      timestamp: '2024-03-14 14:34:28',\n      source: 'CENTOS-DB',\n      event: 'Database Query Injection',\n      details: 'SQL injection attempt in login form: UNION SELECT * FROM users',\n      severity: 'high',\n      category: 'application'\n    }\n  ]);\n\n  const networkTraffic = [\n    { protocol: \"HTTPS\", requests: 2847, status: \"normal\", trend: \"up\" },\n    { protocol: \"SSH\", connections: 156, status: \"elevated\", trend: \"up\" },\n    { protocol: \"RDP\", attempts: 23, status: \"suspicious\", trend: \"down\" },\n    { protocol: \"SMB\", transfers: 892, status: \"normal\", trend: \"stable\" }\n  ];\n\n  const systemMetrics = {\n    cpuUsage: 34,\n    memoryUsage: 68,\n    networkLoad: 23,\n    diskIO: 12,\n    activeConnections: 892,\n    blockedAttempts: 156,\n    dataProcessed: \"2.3 GB\",\n    uptime: \"99.7%\"\n  };\n\n  const [selectedSeverity, setSelectedSeverity] = useState<string | null>(null);\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'low': return 'text-green-700 dark:text-green-300 bg-green-100 dark:bg-green-900';\n      case 'medium': return 'text-amber-700 dark:text-amber-300 bg-amber-100 dark:bg-amber-900';\n      case 'high': return 'text-red-700 dark:text-red-300 bg-red-100 dark:bg-red-900';\n      case 'critical': return 'text-red-100 bg-red-600 dark:bg-red-800';\n      default: return 'text-muted-foreground bg-muted';\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'network': return Network;\n      case 'security': return Shield;\n      case 'system': return Server;\n      case 'application': return Database;\n      default: return Activity;\n    }\n  };\n\n  const getTrendIcon = (trend: string) => {\n    switch (trend) {\n      case 'up': return <TrendingUp className=\"w-3 h-3 text-green-600 dark:text-green-400\" />;\n      case 'down': return <TrendingDown className=\"w-3 h-3 text-red-600 dark:text-red-400\" />;\n      default: return <div className=\"w-3 h-3 rounded-full bg-muted-foreground\" />;\n    }\n  };\n\n  const filteredEvents = selectedSeverity \n    ? events.filter(event => event.severity === selectedSeverity)\n    : events;\n\n  const severityCounts = {\n    low: events.filter(e => e.severity === 'low').length,\n    medium: events.filter(e => e.severity === 'medium').length,\n    high: events.filter(e => e.severity === 'high').length,\n    critical: events.filter(e => e.severity === 'critical').length,\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-xl font-semibold gov-header flex items-center gap-2\">\n          <BarChart3 className=\"w-5 h-5\" />\n          Real-Time Intelligence & Monitoring\n        </h2>\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"outline\" size=\"sm\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export Logs\n          </Button>\n          <Button variant=\"outline\" size=\"sm\">\n            <Eye className=\"w-4 h-4 mr-2\" />\n            Live Feed\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-6\">\n        {/* System Performance */}\n        <Card className=\"gov-card\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 gov-header\">\n              <Cpu className=\"w-4 h-4\" />\n              System Performance\n            </CardTitle>\n            <CardDescription className=\"gov-body\">\n              Real-time infrastructure monitoring\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-3\">\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"gov-body\">CPU Usage</span>\n                  <span className=\"font-mono\">{systemMetrics.cpuUsage}%</span>\n                </div>\n                <Progress value={systemMetrics.cpuUsage} className=\"h-2\" />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"gov-body\">Memory Usage</span>\n                  <span className=\"font-mono\">{systemMetrics.memoryUsage}%</span>\n                </div>\n                <Progress value={systemMetrics.memoryUsage} className=\"h-2\" />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"gov-body\">Network Load</span>\n                  <span className=\"font-mono\">{systemMetrics.networkLoad}%</span>\n                </div>\n                <Progress value={systemMetrics.networkLoad} className=\"h-2\" />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"gov-body\">Disk I/O</span>\n                  <span className=\"font-mono\">{systemMetrics.diskIO}%</span>\n                </div>\n                <Progress value={systemMetrics.diskIO} className=\"h-2\" />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4 pt-4 border-t border-border\">\n              <div className=\"text-center\">\n                <p className=\"text-lg font-semibold\">{systemMetrics.activeConnections}</p>\n                <p className=\"text-xs text-muted-foreground\">Active Connections</p>\n              </div>\n              <div className=\"text-center\">\n                <p className=\"text-lg font-semibold\">{systemMetrics.uptime}</p>\n                <p className=\"text-xs text-muted-foreground\">System Uptime</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Network Traffic */}\n        <Card className=\"gov-card\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 gov-header\">\n              <Wifi className=\"w-4 h-4\" />\n              Network Traffic Analysis\n            </CardTitle>\n            <CardDescription className=\"gov-body\">\n              Protocol analysis and traffic patterns\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {networkTraffic.map((traffic, index) => (\n              <div key={index} className=\"flex items-center justify-between p-3 rounded-lg bg-muted/20 border border-border\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"space-y-1\">\n                    <p className=\"font-medium text-sm gov-body\">{traffic.protocol}</p>\n                    <p className=\"text-xs text-muted-foreground gov-mono\">\n                      {traffic.protocol === 'HTTPS' ? 'Requests' : \n                       traffic.protocol === 'SSH' ? 'Connections' : \n                       traffic.protocol === 'RDP' ? 'Attempts' : \n                       'Transfers'}: {traffic.requests || traffic.connections || traffic.attempts || traffic.transfers}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Badge \n                    variant={traffic.status === 'suspicious' ? 'destructive' : traffic.status === 'elevated' ? 'default' : 'secondary'}\n                    className=\"text-xs font-mono\"\n                  >\n                    {traffic.status.toUpperCase()}\n                  </Badge>\n                  {getTrendIcon(traffic.trend)}\n                </div>\n              </div>\n            ))}\n\n            <div className=\"grid grid-cols-2 gap-4 pt-4 border-t border-border\">\n              <div className=\"text-center\">\n                <p className=\"text-lg font-semibold\">{systemMetrics.dataProcessed}</p>\n                <p className=\"text-xs text-muted-foreground\">Data Processed</p>\n              </div>\n              <div className=\"text-center\">\n                <p className=\"text-lg font-semibold\">{systemMetrics.blockedAttempts}</p>\n                <p className=\"text-xs text-muted-foreground\">Blocked Attempts</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Security Events */}\n        <Card className=\"gov-card\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"flex items-center gap-2 gov-header\">\n                  <Shield className=\"w-4 h-4\" />\n                  Security Events\n                </CardTitle>\n                <CardDescription className=\"gov-body\">\n                  Real-time security incident monitoring\n                </CardDescription>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  <Clock className=\"w-4 h-4 mr-1\" />\n                  <span className=\"text-xs\">Live</span>\n                </Button>\n              </div>\n            </div>\n\n            {/* Severity Filters */}\n            <div className=\"flex gap-2 flex-wrap pt-2\">\n              {Object.entries(severityCounts).map(([severity, count]) => (\n                <Badge \n                  key={severity}\n                  variant={selectedSeverity === severity ? \"default\" : \"outline\"}\n                  className={`cursor-pointer hover-elevate text-xs transition-all ${\n                    selectedSeverity === severity ? getSeverityColor(severity) : ''\n                  }`}\n                  onClick={() => setSelectedSeverity(selectedSeverity === severity ? null : severity)}\n                  data-testid={`filter-${severity}`}\n                >\n                  {severity.toUpperCase()}: {count}\n                </Badge>\n              ))}\n            </div>\n          </CardHeader>\n\n          <CardContent className=\"p-0\">\n            <ScrollArea className=\"h-80\">\n              <div className=\"p-4 space-y-2\">\n                {filteredEvents.map((event) => {\n                  const CategoryIcon = getCategoryIcon(event.category);\n                  \n                  return (\n                    <div \n                      key={event.id} \n                      className=\"flex items-start gap-3 p-3 rounded-lg border border-border hover:bg-muted/20 transition-colors cursor-pointer\"\n                      data-testid={`telemetry-event-${event.id}`}\n                    >\n                      <div className=\"flex-shrink-0 p-1.5 rounded-full bg-muted/50 mt-0.5\">\n                        <CategoryIcon className=\"w-3 h-3 text-muted-foreground\" />\n                      </div>\n                      \n                      <div className=\"flex-1 min-w-0 space-y-1\">\n                        <div className=\"flex items-center gap-2 flex-wrap\">\n                          <span className=\"font-medium text-sm gov-body\">{event.event}</span>\n                          <Badge className={`${getSeverityColor(event.severity)} text-xs border-0`}>\n                            {event.severity.toUpperCase()}\n                          </Badge>\n                        </div>\n                        \n                        <p className=\"text-xs text-muted-foreground gov-body\">{event.details}</p>\n                        \n                        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                          <span className=\"font-mono\">{event.source}</span>\n                          <span className=\"font-mono\">\n                            {event.timestamp}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </ScrollArea>\n            \n            <div className=\"p-4 border-t border-border\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"w-full\" data-testid=\"button-view-all-events\">\n                <Zap className=\"w-4 h-4 mr-2\" />\n                View Complete Event Log ({events.length} total)\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":15045},"client/src/components/TerminalInterface.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Terminal, X, Minimize2, Maximize2, Wifi, Shield, Lock, \n  Activity, Clock, User, HardDrive, Cpu, Globe \n} from \"lucide-react\";\nimport { useState, useRef, useEffect } from \"react\";\n\ninterface TerminalLog {\n  id: number;\n  timestamp: string;\n  command?: string;\n  output?: string;\n  type: 'command' | 'output' | 'error' | 'success';\n}\n\nexport function TerminalInterface() {\n  const [logs, setLogs] = useState<TerminalLog[]>([\n    { id: 1, timestamp: '14:32:01', output: '=== BYOB-LAB SECURE TERMINAL v3.2.1 ===', type: 'success' },\n    { id: 2, timestamp: '14:32:01', output: 'CLASSIFICATION: SIMULATION ENVIRONMENT', type: 'output' },\n    { id: 3, timestamp: '14:32:01', output: 'ENCRYPTION: AES-256 | SESSION: ESTABLISHED', type: 'output' },\n    { id: 4, timestamp: '14:32:02', output: 'TARGET: WIN-SERVER2019 (192.168.1.10)', type: 'success' },\n    { id: 5, timestamp: '14:32:02', output: 'ACCESS LEVEL: SYSTEM | PRIVILEGES: ELEVATED', type: 'success' },\n    { id: 6, timestamp: '14:32:03', output: 'Ready for operations...', type: 'output' },\n  ]);\n  const [currentCommand, setCurrentCommand] = useState('');\n  const [isMaximized, setIsMaximized] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState('SECURE');\n  const [sessionTime, setSessionTime] = useState('00:15:42');\n  const scrollRef = useRef<HTMLDivElement>(null);\n  \n  // Simulation commands for educational purposes\n  const mockCommands: { [key: string]: { output: string; type: 'output' | 'error' | 'success' } } = {\n    'help': { output: '[SYSTEM] Available commands:\\n├── whoami          - Display current user context\\n├── sysinfo         - System information\\n├── netstat         - Network connections\\n├── dir / ls        - Directory listing\\n├── ps              - Process listing\\n├── ipconfig        - Network configuration\\n├── cat <file>      - Display file contents\\n└── exit            - Terminate session', type: 'output' },\n    'sysinfo': { output: '[TARGET] System Information:\\n├── Hostname: WIN-SERVER2019\\n├── OS: Windows Server 2019 Standard\\n├── Architecture: x64\\n├── Domain: CORPORATE.local\\n├── Last Boot: 2024-03-14 08:30:15\\n└── Uptime: 6 days, 14 hours', type: 'output' },\n    'whoami': { output: 'NT AUTHORITY\\\\SYSTEM', type: 'success' },\n    'ps': { output: '[PROCESSES] Active processes:\\n├── PID 1234 - explorer.exe (Administrator)\\n├── PID 2156 - svchost.exe (SYSTEM)\\n├── PID 3421 - winlogon.exe (SYSTEM)\\n└── PID 4567 - services.exe (SYSTEM)', type: 'output' },\n    'ipconfig': { output: '[NETWORK] Interface Configuration:\\n├── Adapter: Ethernet0\\n├── IPv4: 192.168.1.10/24\\n├── Gateway: 192.168.1.1\\n├── DNS1: 8.8.8.8\\n└── Status: Connected', type: 'output' },\n    'netstat': { output: '[NETWORK] Active Connections:\\n├── TCP 192.168.1.10:135 → 0.0.0.0:0 [LISTENING]\\n├── TCP 192.168.1.10:445 → 0.0.0.0:0 [LISTENING]\\n├── TCP 192.168.1.10:3389 → 0.0.0.0:0 [LISTENING]\\n└── TCP 192.168.1.10:5985 → 0.0.0.0:0 [LISTENING]', type: 'output' },\n    'dir': { output: '[DIRECTORY] C:\\\\Users\\\\Administrator\\n├── 📁 Documents\\n├── 📁 Desktop\\n├── 📁 Downloads\\n├── 📄 flag.txt (2.1 KB)\\n└── 📄 notes.txt (1.5 KB)', type: 'output' },\n    'ls': { output: '[DIRECTORY] /home/admin\\n├── 📁 documents/\\n├── 📁 scripts/\\n├── 📄 .bash_history\\n└── 📄 credentials.txt', type: 'output' },\n    'cat flag.txt': { output: '[FILE] flag.txt:\\nBYOB{w3lc0m3_t0_th3_l4b_3nv1r0nm3nt}\\n\\n[SIMULATION] Educational flag captured!', type: 'success' },\n    'exit': { output: '[SESSION] Connection terminated by user.\\n[SECURITY] All activities logged for training analysis.', type: 'error' },\n  };\n\n  const executeCommand = () => {\n    if (!currentCommand.trim()) return;\n\n    const timestamp = new Date().toLocaleTimeString('en-US', { hour12: false });\n    const commandLog: TerminalLog = {\n      id: logs.length + 1,\n      timestamp,\n      command: currentCommand,\n      type: 'command'\n    };\n\n    const response = mockCommands[currentCommand.toLowerCase()] || { \n      output: `Command '${currentCommand}' not recognized. Type 'help' for available commands.`, \n      type: 'error' as const \n    };\n    \n    const outputLog: TerminalLog = {\n      id: logs.length + 2,\n      timestamp,\n      output: response.output,\n      type: response.type\n    };\n\n    setLogs(prev => [...prev, commandLog, outputLog]);\n    setCurrentCommand('');\n    console.log('Executed command:', currentCommand);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      executeCommand();\n    }\n  };\n\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n    }\n  }, [logs]);\n\n  // Update session time every second\n  useEffect(() => {\n    const timer = setInterval(() => {\n      const now = new Date();\n      const start = new Date(now.getTime() - 942000); // 15:42 ago\n      const diff = now.getTime() - start.getTime();\n      const hours = Math.floor(diff / 3600000).toString().padStart(2, '0');\n      const minutes = Math.floor((diff % 3600000) / 60000).toString().padStart(2, '0');\n      const seconds = Math.floor((diff % 60000) / 1000).toString().padStart(2, '0');\n      setSessionTime(`${hours}:${minutes}:${seconds}`);\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  return (\n    <div className={`${isMaximized ? 'fixed inset-4 z-50' : 'h-full'} flex flex-col bg-black/95 border border-green-500/30 rounded-lg overflow-hidden`} data-testid=\"terminal-interface\">\n      {/* Terminal Header */}\n      <div className=\"flex items-center justify-between bg-gray-900/90 border-b border-green-500/20 px-4 py-2\">\n        <div className=\"flex items-center gap-4\">\n          <div className=\"flex items-center gap-2\">\n            <Terminal className=\"w-4 h-4 text-green-400\" />\n            <span className=\"font-mono text-xs text-green-400 font-semibold\">SECURE SHELL</span>\n          </div>\n          \n          <div className=\"flex items-center gap-3 text-xs font-mono\">\n            <div className=\"flex items-center gap-1\">\n              <Globe className=\"w-3 h-3 text-green-400\" />\n              <span className=\"text-green-400\">192.168.1.10</span>\n            </div>\n            <div className=\"w-px h-3 bg-green-500/20\"></div>\n            <div className=\"flex items-center gap-1\">\n              <User className=\"w-3 h-3 text-blue-400\" />\n              <span className=\"text-blue-400\">SYSTEM</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex items-center gap-3\">\n          <div className=\"flex items-center gap-4 text-xs font-mono\">\n            <div className=\"flex items-center gap-1\">\n              <Clock className=\"w-3 h-3 text-yellow-400\" />\n              <span className=\"text-yellow-400\">{sessionTime}</span>\n            </div>\n            <Badge \n              variant=\"outline\" \n              className={`text-xs font-mono ${\n                connectionStatus === 'SECURE' ? 'border-green-500/30 text-green-400' : 'border-red-500/30 text-red-400'\n              }`}\n            >\n              <Lock className=\"w-2 h-2 mr-1\" />\n              {connectionStatus}\n            </Badge>\n          </div>\n          \n          <div className=\"flex items-center gap-1 ml-2\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\" \n              className=\"h-6 w-6 text-gray-400 hover:text-white\"\n              data-testid=\"button-terminal-minimize\"\n            >\n              <Minimize2 className=\"w-3 h-3\" />\n            </Button>\n            <Button \n              variant=\"ghost\" \n              size=\"icon\" \n              className=\"h-6 w-6 text-gray-400 hover:text-white\"\n              onClick={() => setIsMaximized(!isMaximized)}\n              data-testid=\"button-terminal-maximize\"\n            >\n              <Maximize2 className=\"w-3 h-3\" />\n            </Button>\n            <Button \n              variant=\"ghost\" \n              size=\"icon\" \n              className=\"h-6 w-6 text-gray-400 hover:text-red-400\"\n              data-testid=\"button-terminal-close\"\n            >\n              <X className=\"w-3 h-3\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Terminal Body */}\n      <div className=\"flex-1 flex flex-col\">\n        <ScrollArea className={`flex-1 p-4 font-mono text-sm bg-black/95`} ref={scrollRef}>\n          <div className=\"space-y-1\">\n            {logs.map((log) => (\n              <div key={log.id} className=\"flex gap-2 text-xs leading-relaxed\">\n                <span className=\"text-gray-500 min-w-[60px] select-none\">[{log.timestamp}]</span>\n                {log.command ? (\n                  <div className=\"flex gap-2 items-center\">\n                    <span className=\"text-green-400 font-bold\">root@target:~#</span>\n                    <span className=\"text-white\">{log.command}</span>\n                  </div>\n                ) : (\n                  <span \n                    className={`${\n                      log.type === 'error' ? 'text-red-400' : \n                      log.type === 'success' ? 'text-green-400' : \n                      'text-cyan-400'\n                    } whitespace-pre-wrap leading-relaxed`}\n                  >\n                    {log.output}\n                  </span>\n                )}\n              </div>\n            ))}\n          </div>\n        </ScrollArea>\n        \n        {/* Command Input */}\n        <div className=\"border-t border-green-500/20 bg-gray-900/50 p-3\">\n          <div className=\"flex items-center gap-3 font-mono text-sm\">\n            <div className=\"flex items-center gap-2 text-green-400 font-bold shrink-0\">\n              <span>root@target:~#</span>\n            </div>\n            <Input\n              value={currentCommand}\n              onChange={(e) => setCurrentCommand(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder=\"Enter command...\"\n              className=\"border-none bg-transparent focus-visible:ring-0 text-white font-mono placeholder:text-gray-500 p-0 h-auto\"\n              data-testid=\"input-terminal-command\"\n            />\n          </div>\n        </div>\n      </div>\n      \n      {/* Status Bar */}\n      <div className=\"flex items-center justify-between bg-gray-900/90 border-t border-green-500/20 px-4 py-1 text-xs font-mono\">\n        <div className=\"flex items-center gap-4 text-gray-400\">\n          <div className=\"flex items-center gap-1\">\n            <Activity className=\"w-3 h-3\" />\n            <span>Session Active</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <HardDrive className=\"w-3 h-3\" />\n            <span>C:\\\\ (78% free)</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Cpu className=\"w-3 h-3\" />\n            <span>CPU: 23%</span>\n          </div>\n        </div>\n        \n        <div className=\"text-orange-400 text-xs\">\n          SIMULATION ENVIRONMENT - EDUCATIONAL USE ONLY\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11464},"client/src/components/TopNavbar.tsx":{"content":"import { \n  Shield, Terminal, Network, Target, BookOpen, Activity, Settings, Play, \n  Sun, Moon, ChevronDown, Menu, X, Users, Lock, Zap, Database, FileText,\n  BarChart3, Cpu, Globe, Search, Eye, Cog, Bot, Command\n} from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useState } from \"react\";\n\nconst navigationGroups = {\n  command: {\n    title: \"Command Center\",\n    icon: BarChart3,\n    items: [\n      { title: \"Dashboard\", url: \"/\", icon: BarChart3 },\n      { title: \"Client Management\", url: \"/clients\", icon: Bot },\n      { title: \"Network Map\", url: \"/network\", icon: Network },\n    ]\n  },\n  operations: {\n    title: \"Operations\", \n    icon: Terminal,\n    items: [\n      { title: \"Remote Access\", url: \"/remote-access\", icon: Terminal },\n      { title: \"Surveillance\", url: \"/surveillance\", icon: Eye },\n      { title: \"Post-Exploitation\", url: \"/post-exploitation\", icon: Lock },\n    ]\n  },\n  automation: {\n    title: \"Automation\",\n    icon: Command,\n    items: [\n      { title: \"Task Management\", url: \"/automation\", icon: Command },\n      { title: \"Script Execution\", url: \"/scenarios\", icon: Play },\n      { title: \"Batch Operations\", url: \"/batch\", icon: Users },\n    ]\n  },\n  intelligence: {\n    title: \"Intelligence\",\n    icon: Activity,\n    items: [\n      { title: \"Telemetry\", url: \"/telemetry\", icon: Activity },\n      { title: \"Threat Analysis\", url: \"/analysis\", icon: Search },\n      { title: \"Reports\", url: \"/reports\", icon: FileText },\n    ]\n  },\n  system: {\n    title: \"System\",\n    icon: Settings,\n    items: [\n      { title: \"Configuration\", url: \"/settings\", icon: Settings },\n      { title: \"User Management\", url: \"/users\", icon: Users },\n      { title: \"Security Logs\", url: \"/logs\", icon: Database },\n    ]\n  }\n};\n\nexport function TopNavbar() {\n  const [location] = useLocation();\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n    document.documentElement.classList.toggle('dark');\n    console.log('Theme toggled:', isDarkMode ? 'light' : 'dark');\n  };\n\n  const toggleMobileMenu = () => {\n    setMobileMenuOpen(!mobileMenuOpen);\n  };\n\n  const isActiveInGroup = (groupItems: any[]) => {\n    return groupItems.some(item => location === item.url);\n  };\n\n  return (\n    <nav className=\"sticky top-0 z-50 w-full border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\" data-testid=\"navbar-top\">\n      <div className=\"container-responsive\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Clean Logo Section */}\n          <div className=\"flex items-center\">\n            <Link href=\"/\" className=\"flex items-center gap-3 hover:opacity-80 transition-opacity\">\n              <div className=\"flex items-center justify-center w-8 h-8 rounded-md bg-primary/10 border border-primary/20\">\n                <Shield className=\"w-5 h-5 text-primary\" />\n              </div>\n              <div className=\"hidden sm:block\">\n                <h1 className=\"text-lg font-semibold gov-header text-foreground\">BYOB-Lab</h1>\n              </div>\n            </Link>\n          </div>\n\n          {/* Center Navigation - Desktop */}\n          <div className=\"hidden md:flex items-center space-x-1 flex-1 justify-center\">\n            {Object.entries(navigationGroups).map(([key, group]) => {\n              const GroupIcon = group.icon;\n              const hasActiveItem = isActiveInGroup(group.items);\n              \n              return (\n                <DropdownMenu key={key}>\n                  <DropdownMenuTrigger asChild>\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\" \n                      className={`flex items-center gap-2 font-medium transition-colors ${\n                        hasActiveItem ? 'bg-primary/10 text-primary' : 'text-muted-foreground hover:text-foreground hover:bg-muted/50'\n                      }`}\n                      data-testid={`dropdown-${key}`}\n                    >\n                      <GroupIcon className=\"w-4 h-4\" />\n                      <span className=\"gov-body\">{group.title}</span>\n                      <ChevronDown className=\"w-3 h-3 opacity-50\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"center\" className=\"w-56 gov-card\">\n                    <DropdownMenuLabel className=\"gov-mono text-xs text-primary font-semibold\">\n                      {group.title.toUpperCase()}\n                    </DropdownMenuLabel>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuGroup>\n                      {group.items.map((item) => {\n                        const ItemIcon = item.icon;\n                        const isActive = location === item.url;\n                        \n                        return (\n                          <Link key={item.url} href={item.url}>\n                            <DropdownMenuItem className={`cursor-pointer transition-colors ${\n                              isActive ? 'bg-primary/10 text-primary' : 'hover:bg-muted/50'\n                            }`}>\n                              <ItemIcon className=\"w-4 h-4 mr-3\" />\n                              <span className=\"gov-body\">{item.title}</span>\n                            </DropdownMenuItem>\n                          </Link>\n                        );\n                      })}\n                    </DropdownMenuGroup>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              );\n            })}\n          </div>\n\n          {/* Status and Controls */}\n          <div className=\"flex items-center gap-3\">\n            {/* Active Sessions Count */}\n            <div className=\"hidden lg:flex items-center gap-3 px-3 py-1 rounded-md bg-muted/20 border border-border\">\n              <div className=\"flex items-center gap-2 text-xs gov-mono\">\n                <div className=\"flex items-center gap-1\">\n                  <div className=\"w-2 h-2 rounded-full status-online\"></div>\n                  <span className=\"text-green-600 dark:text-green-400\">24 ACTIVE</span>\n                </div>\n                <div className=\"w-px h-3 bg-border\"></div>\n                <div className=\"flex items-center gap-1\">\n                  <Zap className=\"w-3 h-3 text-blue-400\" />\n                  <span className=\"text-blue-400\">SECURE</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Quick Status - Mobile */}\n            <div className=\"lg:hidden flex items-center gap-2 px-2 py-1 rounded bg-muted/20\">\n              <div className=\"w-2 h-2 rounded-full status-online\"></div>\n              <span className=\"text-xs text-green-600 dark:text-green-400 gov-mono\">24</span>\n            </div>\n\n            {/* Theme Toggle */}\n            <Button \n              variant=\"ghost\" \n              size=\"icon\" \n              onClick={toggleTheme}\n              data-testid=\"button-theme-toggle\"\n              className=\"w-9 h-9 hover-elevate\"\n            >\n              {isDarkMode ? <Sun className=\"w-4 h-4\" /> : <Moon className=\"w-4 h-4\" />}\n            </Button>\n\n            {/* Mobile Menu Toggle */}\n            <Button \n              variant=\"ghost\" \n              size=\"icon\" \n              className=\"md:hidden w-9 h-9 hover-elevate\"\n              onClick={toggleMobileMenu}\n              data-testid=\"button-mobile-menu\"\n            >\n              {mobileMenuOpen ? <X className=\"w-4 h-4\" /> : <Menu className=\"w-4 h-4\" />}\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Professional Mobile Menu */}\n      {mobileMenuOpen && (\n        <div className=\"md:hidden border-t border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/80\">\n          <div className=\"container-responsive py-4\">\n            <div className=\"space-y-4\">\n              {Object.entries(navigationGroups).map(([key, group]) => (\n                <div key={key} className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2 text-xs font-semibold text-muted-foreground uppercase tracking-wider gov-mono border-l-2 border-primary/20 pl-3\">\n                    <group.icon className=\"w-3 h-3\" />\n                    {group.title}\n                  </div>\n                  <div className=\"pl-5 space-y-1\">\n                    {group.items.map((item) => {\n                      const ItemIcon = item.icon;\n                      const isActive = location === item.url;\n                      \n                      return (\n                        <Link \n                          key={item.url} \n                          href={item.url}\n                          onClick={() => setMobileMenuOpen(false)}\n                        >\n                          <div className={`flex items-center gap-3 px-3 py-2 rounded-md text-sm transition-colors hover-elevate ${\n                            isActive ? 'bg-primary/10 text-primary border border-primary/20' : 'hover:bg-muted/50 border border-transparent'\n                          }`}>\n                            <ItemIcon className=\"w-4 h-4\" />\n                            <span className=\"gov-body\">{item.title}</span>\n                          </div>\n                        </Link>\n                      );\n                    })}\n                  </div>\n                </div>\n              ))}\n              \n              {/* Mobile System Status */}\n              <div className=\"pt-4 border-t border-border\">\n                <div className=\"text-xs font-semibold text-muted-foreground uppercase tracking-wider gov-mono mb-3\">\n                  System Status\n                </div>\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div className=\"flex items-center gap-2 px-3 py-2 bg-muted/20 border border-border rounded-md\">\n                    <div className=\"w-2 h-2 rounded-full status-online\"></div>\n                    <span className=\"text-xs text-green-600 dark:text-green-400 gov-mono\">Active: 24</span>\n                  </div>\n                  <div className=\"flex items-center gap-2 px-3 py-2 bg-muted/20 border border-border rounded-md\">\n                    <div className=\"w-2 h-2 rounded-full status-online\"></div>\n                    <span className=\"text-xs text-green-600 dark:text-green-400 gov-mono\">Secure</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </nav>\n  );\n}","size_bytes":10869},"client/src/data/mockClients.ts":{"content":"import type { Client } from '@/../../shared/schema';\n\n// Comprehensive mock data for C2 client management\nexport const mockClients: Client[] = [\n  // Corporate Windows workstations\n  {\n    id: \"client-001\",\n    hostname: \"CORP-WIN-001\",\n    ipAddress: \"192.168.1.45\",\n    macAddress: \"00:1A:2B:3C:4D:5E\",\n    \n    operatingSystem: \"Windows 11 Pro\",\n    osVersion: \"22H2 (Build 22621.2428)\",\n    architecture: \"x64\",\n    processorType: \"Intel Core i7-12700K\",\n    totalMemory: 32,\n    \n    country: \"United States\",\n    city: \"New York\",\n    region: \"NY\",\n    latitude: \"40.7128\",\n    longitude: \"-74.0060\",\n    timezone: \"America/New_York\",\n    \n    status: \"online\",\n    lastSeen: new Date(Date.now() - 5 * 60 * 1000), // 5 minutes ago\n    firstSeen: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 7 days ago\n    uptime: 345600, // 4 days in seconds\n    connectionQuality: \"excellent\",\n    \n    currentUser: \"j.smith\",\n    isElevated: true,\n    availablePrivileges: [\"admin\", \"debug\", \"backup\"],\n    userAccounts: [\n      { username: \"j.smith\", isAdmin: true, isActive: true, groups: [\"Administrators\", \"Domain Admins\"] },\n      { username: \"backup_svc\", isAdmin: false, isActive: true, groups: [\"Backup Operators\"] }\n    ],\n    \n    installedSoftware: [\n      { name: \"Microsoft Office 365\", version: \"16.0.16827\", vendor: \"Microsoft\", isSystemCritical: false },\n      { name: \"Google Chrome\", version: \"119.0.6045.199\", vendor: \"Google\", isSystemCritical: false },\n      { name: \"Windows Defender\", version: \"4.18.23110.3\", vendor: \"Microsoft\", isSystemCritical: true }\n    ],\n    \n    runningProcesses: [\n      { pid: 1234, name: \"chrome.exe\", cpu: 15.2, memory: 512, user: \"j.smith\", startTime: new Date() },\n      { pid: 5678, name: \"outlook.exe\", cpu: 3.1, memory: 256, user: \"j.smith\", startTime: new Date() }\n    ],\n    \n    openPorts: [\n      { port: 445, protocol: \"TCP\", state: \"LISTENING\", service: \"SMB\", processName: \"System\" },\n      { port: 3389, protocol: \"TCP\", state: \"LISTENING\", service: \"RDP\", processName: \"svchost.exe\" }\n    ],\n    \n    networkInterfaces: [\n      { name: \"Ethernet\", type: \"ethernet\", ipAddress: \"192.168.1.45\", macAddress: \"00:1A:2B:3C:4D:5E\", isActive: true, speed: 1000 }\n    ],\n    \n    riskLevel: \"high\",\n    vulnerabilityCount: 8,\n    difficulty: \"intermediate\",\n    \n    tags: [\"corporate\", \"finance\", \"critical\"],\n    notes: \"Domain controller with elevated privileges. High-value target for lateral movement.\",\n    isActive: true,\n    \n    createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),\n    updatedAt: new Date(Date.now() - 5 * 60 * 1000)\n  },\n\n  // Linux server - compromised\n  {\n    id: \"client-002\",\n    hostname: \"web-server-01\",\n    ipAddress: \"10.0.0.25\",\n    macAddress: \"02:42:AC:11:00:02\",\n    \n    operatingSystem: \"Ubuntu Server\",\n    osVersion: \"22.04.3 LTS\",\n    architecture: \"x64\",\n    processorType: \"AMD EPYC 7502P\",\n    totalMemory: 64,\n    \n    country: \"Germany\",\n    city: \"Frankfurt\",\n    region: \"Hesse\",\n    latitude: \"50.1109\",\n    longitude: \"8.6821\",\n    timezone: \"Europe/Berlin\",\n    \n    status: \"compromised\",\n    lastSeen: new Date(Date.now() - 30 * 1000), // 30 seconds ago\n    firstSeen: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000), // 14 days ago\n    uptime: 1209600, // 14 days in seconds\n    connectionQuality: \"good\",\n    \n    currentUser: \"www-data\",\n    isElevated: false,\n    availablePrivileges: [\"read\", \"execute\"],\n    userAccounts: [\n      { username: \"root\", isAdmin: true, isActive: true, groups: [\"root\"] },\n      { username: \"www-data\", isAdmin: false, isActive: true, groups: [\"www-data\"] },\n      { username: \"ubuntu\", isAdmin: true, isActive: true, groups: [\"sudo\", \"admin\"] }\n    ],\n    \n    installedSoftware: [\n      { name: \"Apache HTTP Server\", version: \"2.4.52\", vendor: \"Apache Software Foundation\", isSystemCritical: true },\n      { name: \"PHP\", version: \"8.1.2\", vendor: \"The PHP Group\", isSystemCritical: true },\n      { name: \"MySQL Server\", version: \"8.0.35\", vendor: \"Oracle Corporation\", isSystemCritical: true }\n    ],\n    \n    runningProcesses: [\n      { pid: 1001, name: \"apache2\", cpu: 8.5, memory: 128, user: \"www-data\", startTime: new Date() },\n      { pid: 1002, name: \"mysqld\", cpu: 12.3, memory: 1024, user: \"mysql\", startTime: new Date() }\n    ],\n    \n    openPorts: [\n      { port: 80, protocol: \"TCP\", state: \"LISTENING\", service: \"HTTP\", processName: \"apache2\" },\n      { port: 443, protocol: \"TCP\", state: \"LISTENING\", service: \"HTTPS\", processName: \"apache2\" },\n      { port: 22, protocol: \"TCP\", state: \"LISTENING\", service: \"SSH\", processName: \"sshd\" }\n    ],\n    \n    networkInterfaces: [\n      { name: \"eth0\", type: \"ethernet\", ipAddress: \"10.0.0.25\", macAddress: \"02:42:AC:11:00:02\", isActive: true, speed: 10000 }\n    ],\n    \n    riskLevel: \"critical\",\n    vulnerabilityCount: 15,\n    difficulty: \"advanced\",\n    \n    tags: [\"web-server\", \"php\", \"database\", \"production\"],\n    notes: \"Web server with shell access obtained. Contains customer database and sensitive information.\",\n    isActive: true,\n    \n    createdAt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000),\n    updatedAt: new Date(Date.now() - 30 * 1000)\n  },\n\n  // MacOS developer workstation\n  {\n    id: \"client-003\",\n    hostname: \"MacBook-Pro-Dev\",\n    ipAddress: \"172.16.0.100\",\n    macAddress: \"88:66:5A:10:3B:2C\",\n    \n    operatingSystem: \"macOS Sonoma\",\n    osVersion: \"14.1.2 (23B92)\",\n    architecture: \"arm64\",\n    processorType: \"Apple M2 Pro\",\n    totalMemory: 16,\n    \n    country: \"Canada\",\n    city: \"Toronto\",\n    region: \"ON\",\n    latitude: \"43.6532\",\n    longitude: \"-79.3832\",\n    timezone: \"America/Toronto\",\n    \n    status: \"online\",\n    lastSeen: new Date(Date.now() - 2 * 60 * 1000), // 2 minutes ago\n    firstSeen: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // 3 days ago\n    uptime: 259200, // 3 days in seconds\n    connectionQuality: \"fair\",\n    \n    currentUser: \"dev.user\",\n    isElevated: false,\n    availablePrivileges: [\"read\", \"execute\", \"write\"],\n    userAccounts: [\n      { username: \"root\", isAdmin: true, isActive: true, groups: [\"wheel\"] },\n      { username: \"dev.user\", isAdmin: false, isActive: true, groups: [\"staff\", \"admin\"] }\n    ],\n    \n    installedSoftware: [\n      { name: \"Xcode\", version: \"15.1\", vendor: \"Apple Inc.\", isSystemCritical: false },\n      { name: \"Visual Studio Code\", version: \"1.84.2\", vendor: \"Microsoft\", isSystemCritical: false },\n      { name: \"Docker Desktop\", version: \"4.25.2\", vendor: \"Docker Inc.\", isSystemCritical: false }\n    ],\n    \n    runningProcesses: [\n      { pid: 2001, name: \"Xcode\", cpu: 25.8, memory: 2048, user: \"dev.user\", startTime: new Date() },\n      { pid: 2002, name: \"Code\", cpu: 5.2, memory: 512, user: \"dev.user\", startTime: new Date() }\n    ],\n    \n    openPorts: [\n      { port: 22, protocol: \"TCP\", state: \"LISTENING\", service: \"SSH\", processName: \"sshd\" },\n      { port: 8080, protocol: \"TCP\", state: \"LISTENING\", service: \"HTTP-Alt\", processName: \"node\" }\n    ],\n    \n    networkInterfaces: [\n      { name: \"en0\", type: \"wifi\", ipAddress: \"172.16.0.100\", macAddress: \"88:66:5A:10:3B:2C\", isActive: true, speed: 867 }\n    ],\n    \n    riskLevel: \"medium\",\n    vulnerabilityCount: 3,\n    difficulty: \"beginner\",\n    \n    tags: [\"developer\", \"mac\", \"mobile-dev\"],\n    notes: \"Developer workstation with source code access. Potential intellectual property target.\",\n    isActive: true,\n    \n    createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),\n    updatedAt: new Date(Date.now() - 2 * 60 * 1000)\n  },\n\n  // Windows domain controller - offline\n  {\n    id: \"client-004\",\n    hostname: \"DC-PRIMARY\",\n    ipAddress: \"192.168.1.10\",\n    macAddress: \"00:50:56:A1:B2:C3\",\n    \n    operatingSystem: \"Windows Server 2022\",\n    osVersion: \"21H2 (Build 20348.2113)\",\n    architecture: \"x64\",\n    processorType: \"Intel Xeon E5-2680 v4\",\n    totalMemory: 128,\n    \n    country: \"United Kingdom\",\n    city: \"London\",\n    region: \"England\",\n    latitude: \"51.5074\",\n    longitude: \"-0.1278\",\n    timezone: \"Europe/London\",\n    \n    status: \"offline\",\n    lastSeen: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago\n    firstSeen: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // 30 days ago\n    uptime: 0, // currently offline\n    connectionQuality: \"poor\",\n    \n    currentUser: \"SYSTEM\",\n    isElevated: true,\n    availablePrivileges: [\"admin\", \"system\", \"debug\", \"backup\"],\n    userAccounts: [\n      { username: \"Administrator\", isAdmin: true, isActive: true, groups: [\"Domain Admins\", \"Enterprise Admins\"] },\n      { username: \"krbtgt\", isAdmin: false, isActive: false, groups: [\"Domain Users\"] }\n    ],\n    \n    installedSoftware: [\n      { name: \"Active Directory Domain Services\", version: \"10.0.20348\", vendor: \"Microsoft\", isSystemCritical: true },\n      { name: \"DNS Server\", version: \"10.0.20348\", vendor: \"Microsoft\", isSystemCritical: true },\n      { name: \"DHCP Server\", version: \"10.0.20348\", vendor: \"Microsoft\", isSystemCritical: true }\n    ],\n    \n    runningProcesses: [], // offline, no processes\n    \n    openPorts: [\n      { port: 389, protocol: \"TCP\", state: \"LISTENING\", service: \"LDAP\", processName: \"lsass.exe\" },\n      { port: 53, protocol: \"UDP\", state: \"LISTENING\", service: \"DNS\", processName: \"dns.exe\" }\n    ],\n    \n    networkInterfaces: [\n      { name: \"Ethernet\", type: \"ethernet\", ipAddress: \"192.168.1.10\", macAddress: \"00:50:56:A1:B2:C3\", isActive: false, speed: 1000 }\n    ],\n    \n    riskLevel: \"critical\",\n    vulnerabilityCount: 12,\n    difficulty: \"advanced\",\n    \n    tags: [\"domain-controller\", \"critical\", \"ad\", \"dns\", \"dhcp\"],\n    notes: \"Primary domain controller. CRITICAL TARGET - Controls entire domain infrastructure.\",\n    isActive: true,\n    \n    createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),\n    updatedAt: new Date(Date.now() - 2 * 60 * 60 * 1000)\n  },\n\n  // Android mobile device\n  {\n    id: \"client-005\",\n    hostname: \"Galaxy-S23-Ultra\",\n    ipAddress: \"192.168.43.157\",\n    macAddress: \"A4:C3:F0:85:AC:2D\",\n    \n    operatingSystem: \"Android\",\n    osVersion: \"14 (API 34)\",\n    architecture: \"arm64-v8a\",\n    processorType: \"Snapdragon 8 Gen 2\",\n    totalMemory: 8,\n    \n    country: \"Japan\",\n    city: \"Tokyo\",\n    region: \"Tokyo\",\n    latitude: \"35.6762\",\n    longitude: \"139.6503\",\n    timezone: \"Asia/Tokyo\",\n    \n    status: \"online\",\n    lastSeen: new Date(Date.now() - 1 * 60 * 1000), // 1 minute ago\n    firstSeen: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000), // 5 days ago\n    uptime: 86400, // 1 day in seconds\n    connectionQuality: \"good\",\n    \n    currentUser: \"android_user\",\n    isElevated: true, // rooted device\n    availablePrivileges: [\"root\", \"system\"],\n    userAccounts: [\n      { username: \"root\", isAdmin: true, isActive: true, groups: [\"root\"] },\n      { username: \"system\", isAdmin: false, isActive: true, groups: [\"system\"] }\n    ],\n    \n    installedSoftware: [\n      { name: \"Chrome\", version: \"119.0.6045.193\", vendor: \"Google\", isSystemCritical: false },\n      { name: \"WhatsApp\", version: \"2.23.24.21\", vendor: \"Meta\", isSystemCritical: false },\n      { name: \"Banking App\", version: \"12.4.1\", vendor: \"MUFG Bank\", isSystemCritical: false }\n    ],\n    \n    runningProcesses: [\n      { pid: 3001, name: \"com.android.chrome\", cpu: 8.2, memory: 256, user: \"u0_a123\", startTime: new Date() },\n      { pid: 3002, name: \"com.whatsapp\", cpu: 2.1, memory: 128, user: \"u0_a456\", startTime: new Date() }\n    ],\n    \n    openPorts: [\n      { port: 5555, protocol: \"TCP\", state: \"LISTENING\", service: \"ADB\", processName: \"adbd\" }\n    ],\n    \n    networkInterfaces: [\n      { name: \"wlan0\", type: \"wifi\", ipAddress: \"192.168.43.157\", macAddress: \"A4:C3:F0:85:AC:2D\", isActive: true, speed: 300 }\n    ],\n    \n    riskLevel: \"high\",\n    vulnerabilityCount: 6,\n    difficulty: \"intermediate\",\n    \n    tags: [\"mobile\", \"android\", \"rooted\", \"banking\"],\n    notes: \"Rooted Android device with banking apps. High-value target for financial fraud.\",\n    isActive: true,\n    \n    createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),\n    updatedAt: new Date(Date.now() - 1 * 60 * 1000)\n  },\n\n  // Linux IoT device\n  {\n    id: \"client-006\",\n    hostname: \"rpi-security-cam-01\",\n    ipAddress: \"192.168.1.200\",\n    macAddress: \"B8:27:EB:12:34:56\",\n    \n    operatingSystem: \"Raspberry Pi OS\",\n    osVersion: \"Debian GNU/Linux 12 (bookworm)\",\n    architecture: \"armv7l\",\n    processorType: \"ARM Cortex-A72\",\n    totalMemory: 4,\n    \n    country: \"Australia\",\n    city: \"Sydney\",\n    region: \"NSW\",\n    latitude: \"-33.8688\",\n    longitude: \"151.2093\",\n    timezone: \"Australia/Sydney\",\n    \n    status: \"compromised\",\n    lastSeen: new Date(Date.now() - 10 * 1000), // 10 seconds ago\n    firstSeen: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000), // 90 days ago\n    uptime: 2592000, // 30 days in seconds\n    connectionQuality: \"excellent\",\n    \n    currentUser: \"pi\",\n    isElevated: false,\n    availablePrivileges: [\"read\", \"execute\"],\n    userAccounts: [\n      { username: \"root\", isAdmin: true, isActive: true, groups: [\"root\"] },\n      { username: \"pi\", isAdmin: true, isActive: true, groups: [\"sudo\", \"adm\", \"dialout\"] }\n    ],\n    \n    installedSoftware: [\n      { name: \"Motion\", version: \"4.5.1\", vendor: \"Motion Project\", isSystemCritical: true },\n      { name: \"OpenSSH Server\", version: \"9.2p1\", vendor: \"OpenBSD\", isSystemCritical: true },\n      { name: \"Python\", version: \"3.11.2\", vendor: \"Python Software Foundation\", isSystemCritical: false }\n    ],\n    \n    runningProcesses: [\n      { pid: 1500, name: \"motion\", cpu: 15.6, memory: 64, user: \"pi\", startTime: new Date() },\n      { pid: 1501, name: \"sshd\", cpu: 0.1, memory: 8, user: \"root\", startTime: new Date() }\n    ],\n    \n    openPorts: [\n      { port: 22, protocol: \"TCP\", state: \"LISTENING\", service: \"SSH\", processName: \"sshd\" },\n      { port: 8081, protocol: \"TCP\", state: \"LISTENING\", service: \"Motion-HTTP\", processName: \"motion\" }\n    ],\n    \n    networkInterfaces: [\n      { name: \"eth0\", type: \"ethernet\", ipAddress: \"192.168.1.200\", macAddress: \"B8:27:EB:12:34:56\", isActive: true, speed: 100 }\n    ],\n    \n    riskLevel: \"medium\",\n    vulnerabilityCount: 4,\n    difficulty: \"beginner\",\n    \n    tags: [\"iot\", \"raspberry-pi\", \"camera\", \"surveillance\"],\n    notes: \"IoT security camera with weak credentials. Provides network surveillance capabilities.\",\n    isActive: true,\n    \n    createdAt: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000),\n    updatedAt: new Date(Date.now() - 10 * 1000)\n  }\n];\n\n// Helper functions for data analysis\nexport const getClientsByStatus = (clients: Client[]) => {\n  return clients.reduce((acc, client) => {\n    acc[client.status] = (acc[client.status] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n};\n\nexport const getClientsByOS = (clients: Client[]) => {\n  return clients.reduce((acc, client) => {\n    const os = client.operatingSystem.split(' ')[0]; // Get base OS name\n    acc[os] = (acc[os] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n};\n\nexport const getClientsByCountry = (clients: Client[]) => {\n  return clients.reduce((acc, client) => {\n    if (client.country) {\n      acc[client.country] = (acc[client.country] || 0) + 1;\n    }\n    return acc;\n  }, {} as Record<string, number>);\n};\n\nexport const getClientsByRiskLevel = (clients: Client[]) => {\n  return clients.reduce((acc, client) => {\n    if (client.riskLevel) {\n      acc[client.riskLevel] = (acc[client.riskLevel] || 0) + 1;\n    }\n    return acc;\n  }, {} as Record<string, number>);\n};\n\nexport const getRecentActivity = (clients: Client[], hours: number = 24) => {\n  const cutoff = new Date(Date.now() - hours * 60 * 60 * 1000);\n  return clients.filter(client => \n    client.lastSeen && new Date(client.lastSeen) > cutoff\n  );\n};","size_bytes":15766},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/ClientsPage.tsx":{"content":"import { ClientCard } from \"@/components/ClientCard\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Search, Filter, Plus, RefreshCw, Download, Upload, Zap, Globe,\n  Users, Shield, AlertTriangle, CheckCircle, Activity, MapPin,\n  Terminal, HardDrive, Eye, Trash2, PlayCircle, Settings, PauseCircle\n} from \"lucide-react\";\nimport { useState, useMemo } from \"react\";\nimport { mockClients, getClientsByStatus, getClientsByOS, getClientsByCountry, getClientsByRiskLevel, getRecentActivity } from \"@/data/mockClients\";\nimport type { Client } from '@/../../shared/schema';\n\nexport default function ClientsPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [osFilter, setOSFilter] = useState<string>(\"all\");\n  const [locationFilter, setLocationFilter] = useState<string>(\"all\");\n  const [riskFilter, setRiskFilter] = useState<string>(\"all\");\n  const [privilegeFilter, setPrivilegeFilter] = useState<string>(\"all\");\n  const [sortBy, setSortBy] = useState<string>(\"lastSeen\");\n  const [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\">(\"desc\");\n  const [selectedClients, setSelectedClients] = useState<Set<string>>(new Set());\n  const [bulkPanelOpen, setBulkPanelOpen] = useState(false);\n\n  // Statistics calculations\n  const statusCounts = getClientsByStatus(mockClients);\n  const osCounts = getClientsByOS(mockClients);\n  const countryCounts = getClientsByCountry(mockClients);\n  const riskCounts = getClientsByRiskLevel(mockClients);\n  const recentActivity = getRecentActivity(mockClients, 24);\n\n  // Filtering and sorting logic\n  const filteredClients = useMemo(() => {\n    let filtered = mockClients.filter(client => {\n      // Search filter\n      const matchesSearch = searchQuery === \"\" || \n        client.hostname.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        client.ipAddress.includes(searchQuery) ||\n        client.operatingSystem.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        client.country?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        client.city?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        client.currentUser?.toLowerCase().includes(searchQuery.toLowerCase());\n\n      // Status filter\n      const matchesStatus = statusFilter === \"all\" || client.status === statusFilter;\n\n      // OS filter\n      const matchesOS = osFilter === \"all\" || client.operatingSystem.toLowerCase().includes(osFilter.toLowerCase());\n\n      // Location filter\n      const matchesLocation = locationFilter === \"all\" || client.country === locationFilter;\n\n      // Risk filter\n      const matchesRisk = riskFilter === \"all\" || client.riskLevel === riskFilter;\n\n      // Privilege filter\n      const matchesPrivilege = privilegeFilter === \"all\" || \n        (privilegeFilter === \"elevated\" && client.isElevated) ||\n        (privilegeFilter === \"standard\" && !client.isElevated);\n\n      return matchesSearch && matchesStatus && matchesOS && matchesLocation && matchesRisk && matchesPrivilege;\n    });\n\n    // Sorting\n    filtered.sort((a, b) => {\n      let aVal, bVal;\n      \n      switch (sortBy) {\n        case 'hostname':\n          aVal = a.hostname.toLowerCase();\n          bVal = b.hostname.toLowerCase();\n          break;\n        case 'lastSeen':\n          aVal = new Date(a.lastSeen || 0).getTime();\n          bVal = new Date(b.lastSeen || 0).getTime();\n          break;\n        case 'status':\n          aVal = a.status;\n          bVal = b.status;\n          break;\n        case 'risk':\n          const riskOrder = { low: 1, medium: 2, high: 3, critical: 4 };\n          aVal = riskOrder[a.riskLevel as keyof typeof riskOrder] || 0;\n          bVal = riskOrder[b.riskLevel as keyof typeof riskOrder] || 0;\n          break;\n        case 'vulnerabilities':\n          aVal = a.vulnerabilityCount || 0;\n          bVal = b.vulnerabilityCount || 0;\n          break;\n        default:\n          aVal = a.hostname.toLowerCase();\n          bVal = b.hostname.toLowerCase();\n      }\n\n      if (sortOrder === 'asc') {\n        return aVal < bVal ? -1 : aVal > bVal ? 1 : 0;\n      } else {\n        return aVal > bVal ? -1 : aVal < bVal ? 1 : 0;\n      }\n    });\n\n    return filtered;\n  }, [searchQuery, statusFilter, osFilter, locationFilter, riskFilter, privilegeFilter, sortBy, sortOrder]);\n\n  const handleClientSelect = (clientId: string, selected: boolean) => {\n    const newSelection = new Set(selectedClients);\n    if (selected) {\n      newSelection.add(clientId);\n    } else {\n      newSelection.delete(clientId);\n    }\n    setSelectedClients(newSelection);\n  };\n\n  const handleSelectAll = () => {\n    if (selectedClients.size === filteredClients.length) {\n      setSelectedClients(new Set());\n    } else {\n      setSelectedClients(new Set(filteredClients.map(c => c.id)));\n    }\n  };\n\n  const handleBulkAction = (action: string) => {\n    console.log(`Executing bulk action: ${action} on ${selectedClients.size} clients`);\n    // Implement bulk actions here\n  };\n\n  const handleClientConnect = (clientId: string, connectionType: string) => {\n    console.log(`Connecting to client ${clientId} with type: ${connectionType}`);\n    // Implement connection logic\n  };\n\n  const handleViewDetails = (clientId: string) => {\n    console.log(`Viewing details for client: ${clientId}`);\n    // Implement details view\n  };\n\n  const clearFilters = () => {\n    setSearchQuery(\"\");\n    setStatusFilter(\"all\");\n    setOSFilter(\"all\");\n    setLocationFilter(\"all\");\n    setRiskFilter(\"all\");\n    setPrivilegeFilter(\"all\");\n  };\n\n  return (\n    <div className=\"space-y-6 p-6\" data-testid=\"clients-page\">\n      {/* Header */}\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-semibold gov-header\">Client Management</h1>\n            <p className=\"text-muted-foreground\">\n              Comprehensive C2 client monitoring and management interface\n            </p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-refresh\">\n              <RefreshCw className=\"w-4 h-4 mr-2\" />\n              Refresh\n            </Button>\n            <Button data-testid=\"button-add-client\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Client\n            </Button>\n          </div>\n        </div>\n\n        {/* Statistics Dashboard */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <Card className=\"gov-card\">\n            <CardHeader className=\"pb-2\">\n              <CardDescription className=\"text-xs uppercase tracking-wide\">Total Clients</CardDescription>\n              <CardTitle className=\"text-2xl font-bold\">{mockClients.length}</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-xs text-muted-foreground\">\n                {recentActivity.length} active in 24h\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"gov-card\">\n            <CardHeader className=\"pb-2\">\n              <CardDescription className=\"text-xs uppercase tracking-wide flex items-center gap-1\">\n                <CheckCircle className=\"w-3 h-3\" />\n                Online\n              </CardDescription>\n              <CardTitle className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\n                {statusCounts.online || 0}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Progress \n                value={(statusCounts.online || 0) / mockClients.length * 100} \n                className=\"h-1.5\"\n              />\n            </CardContent>\n          </Card>\n\n          <Card className=\"gov-card\">\n            <CardHeader className=\"pb-2\">\n              <CardDescription className=\"text-xs uppercase tracking-wide flex items-center gap-1\">\n                <AlertTriangle className=\"w-3 h-3\" />\n                Compromised\n              </CardDescription>\n              <CardTitle className=\"text-2xl font-bold text-amber-600 dark:text-amber-400\">\n                {statusCounts.compromised || 0}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Progress \n                value={(statusCounts.compromised || 0) / mockClients.length * 100} \n                className=\"h-1.5\"\n              />\n            </CardContent>\n          </Card>\n\n          <Card className=\"gov-card\">\n            <CardHeader className=\"pb-2\">\n              <CardDescription className=\"text-xs uppercase tracking-wide flex items-center gap-1\">\n                <Shield className=\"w-3 h-3\" />\n                High Risk\n              </CardDescription>\n              <CardTitle className=\"text-2xl font-bold text-red-600 dark:text-red-400\">\n                {(riskCounts.high || 0) + (riskCounts.critical || 0)}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-xs text-muted-foreground\">\n                Requires immediate attention\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Filters and Search */}\n      <Card className=\"gov-card\">\n        <CardHeader>\n          <CardTitle className=\"text-base\">Filters & Search</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Search Bar */}\n          <div className=\"relative flex-1\">\n            <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" />\n            <Input \n              placeholder=\"Search clients by hostname, IP, OS, location, or user...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-clients\"\n            />\n          </div>\n\n          {/* Filter Controls */}\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-3\">\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"online\">Online</SelectItem>\n                <SelectItem value=\"offline\">Offline</SelectItem>\n                <SelectItem value=\"compromised\">Compromised</SelectItem>\n                <SelectItem value=\"error\">Error</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={osFilter} onValueChange={setOSFilter}>\n              <SelectTrigger data-testid=\"select-os-filter\">\n                <SelectValue placeholder=\"OS\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All OS</SelectItem>\n                <SelectItem value=\"windows\">Windows</SelectItem>\n                <SelectItem value=\"linux\">Linux</SelectItem>\n                <SelectItem value=\"macos\">macOS</SelectItem>\n                <SelectItem value=\"android\">Android</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={locationFilter} onValueChange={setLocationFilter}>\n              <SelectTrigger data-testid=\"select-location-filter\">\n                <SelectValue placeholder=\"Location\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Locations</SelectItem>\n                {Object.keys(countryCounts).map(country => (\n                  <SelectItem key={country} value={country}>{country}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={riskFilter} onValueChange={setRiskFilter}>\n              <SelectTrigger data-testid=\"select-risk-filter\">\n                <SelectValue placeholder=\"Risk Level\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Risk</SelectItem>\n                <SelectItem value=\"low\">Low</SelectItem>\n                <SelectItem value=\"medium\">Medium</SelectItem>\n                <SelectItem value=\"high\">High</SelectItem>\n                <SelectItem value=\"critical\">Critical</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={privilegeFilter} onValueChange={setPrivilegeFilter}>\n              <SelectTrigger data-testid=\"select-privilege-filter\">\n                <SelectValue placeholder=\"Privileges\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Privileges</SelectItem>\n                <SelectItem value=\"elevated\">Elevated</SelectItem>\n                <SelectItem value=\"standard\">Standard</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={`${sortBy}-${sortOrder}`} onValueChange={(value) => {\n              const [sort, order] = value.split('-');\n              setSortBy(sort);\n              setSortOrder(order as \"asc\" | \"desc\");\n            }}>\n              <SelectTrigger data-testid=\"select-sort\">\n                <SelectValue placeholder=\"Sort\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"hostname-asc\">Hostname A-Z</SelectItem>\n                <SelectItem value=\"hostname-desc\">Hostname Z-A</SelectItem>\n                <SelectItem value=\"lastSeen-desc\">Last Seen (Recent)</SelectItem>\n                <SelectItem value=\"lastSeen-asc\">Last Seen (Oldest)</SelectItem>\n                <SelectItem value=\"status-asc\">Status</SelectItem>\n                <SelectItem value=\"risk-desc\">Risk (High to Low)</SelectItem>\n                <SelectItem value=\"vulnerabilities-desc\">Most Vulnerable</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Filter Summary and Clear */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm text-muted-foreground\">\n                Showing {filteredClients.length} of {mockClients.length} clients\n              </span>\n              {(searchQuery || statusFilter !== \"all\" || osFilter !== \"all\" || locationFilter !== \"all\" || riskFilter !== \"all\" || privilegeFilter !== \"all\") && (\n                <Button variant=\"ghost\" size=\"sm\" onClick={clearFilters} data-testid=\"button-clear-filters\">\n                  Clear Filters\n                </Button>\n              )}\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Checkbox\n                checked={selectedClients.size === filteredClients.length && filteredClients.length > 0}\n                onCheckedChange={handleSelectAll}\n                data-testid=\"checkbox-select-all\"\n              />\n              <span className=\"text-sm text-muted-foreground\">Select All</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Bulk Operations Panel */}\n      {selectedClients.size > 0 && (\n        <Card className=\"gov-card border-primary\">\n          <CardHeader>\n            <CardTitle className=\"text-base flex items-center gap-2\">\n              <Zap className=\"w-4 h-4\" />\n              Bulk Operations ({selectedClients.size} clients selected)\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-wrap items-center gap-2\">\n              <Button size=\"sm\" onClick={() => handleBulkAction('execute')} data-testid=\"button-bulk-execute\">\n                <Terminal className=\"w-3 h-3 mr-1\" />\n                Execute Command\n              </Button>\n              <Button size=\"sm\" variant=\"outline\" onClick={() => handleBulkAction('upload')} data-testid=\"button-bulk-upload\">\n                <Upload className=\"w-3 h-3 mr-1\" />\n                Upload File\n              </Button>\n              <Button size=\"sm\" variant=\"outline\" onClick={() => handleBulkAction('download')} data-testid=\"button-bulk-download\">\n                <Download className=\"w-3 h-3 mr-1\" />\n                Download Files\n              </Button>\n              <Button size=\"sm\" variant=\"outline\" onClick={() => handleBulkAction('surveillance')} data-testid=\"button-bulk-surveillance\">\n                <Eye className=\"w-3 h-3 mr-1\" />\n                Start Surveillance\n              </Button>\n              <Button size=\"sm\" variant=\"outline\" onClick={() => handleBulkAction('pause')} data-testid=\"button-bulk-pause\">\n                <PauseCircle className=\"w-3 h-3 mr-1\" />\n                Pause Sessions\n              </Button>\n              <Separator orientation=\"vertical\" className=\"h-6\" />\n              <Button size=\"sm\" variant=\"destructive\" onClick={() => handleBulkAction('remove')} data-testid=\"button-bulk-remove\">\n                <Trash2 className=\"w-3 h-3 mr-1\" />\n                Remove\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Geographic Distribution */}\n      <Card className=\"gov-card\">\n        <CardHeader>\n          <CardTitle className=\"text-base flex items-center gap-2\">\n            <Globe className=\"w-4 h-4\" />\n            Geographic Distribution\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-3\">\n            {Object.entries(countryCounts).map(([country, count]) => (\n              <div key={country} className=\"flex items-center justify-between p-2 rounded-lg bg-muted/30\">\n                <span className=\"text-sm font-medium\">{country}</span>\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  {count}\n                </Badge>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Client Grid */}\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-lg font-semibold gov-header\">\n            Active Clients ({filteredClients.length})\n          </h2>\n        </div>\n\n        {filteredClients.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <div className=\"mx-auto w-12 h-12 bg-muted rounded-full flex items-center justify-center mb-4\">\n              <Users className=\"w-6 h-6 text-muted-foreground\" />\n            </div>\n            <p className=\"text-muted-foreground\">No clients found matching your criteria.</p>\n            <Button variant=\"ghost\" className=\"mt-2\" onClick={clearFilters}>\n              Clear all filters\n            </Button>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4\">\n            {filteredClients.map((client) => (\n              <ClientCard\n                key={client.id}\n                {...client}\n                onConnect={handleClientConnect}\n                onViewDetails={handleViewDetails}\n                onSelect={handleClientSelect}\n                isSelected={selectedClients.has(client.id)}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":19807},"client/src/pages/Dashboard.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Shield, Target, Terminal, Activity, Play, Server, \n  Globe, Users, Clock, AlertTriangle, CheckCircle2,\n  Network, FileText, Settings, Eye, MapPin, Zap,\n  Monitor, Wifi, WifiOff, Skull, Lock, Unlock,\n  ArrowUp, ArrowDown, Minus, ChevronRight, \n  Command, Radio, Database, HardDrive, Cpu,\n  Signal, AlertCircle, TrendingUp, BarChart3,\n  Hash, Calendar, Download, Upload, Filter,\n  RefreshCw, Search, MoreHorizontal, ExternalLink\n} from \"lucide-react\";\n\nexport default function Dashboard() {\n  // Global C2 Statistics\n  const globalStats = [\n    { \n      label: \"Active Clients\", \n      value: \"247\", \n      icon: Users, \n      color: \"text-cyan-400\",\n      trend: \"+12\",\n      trendDirection: \"up\"\n    },\n    { \n      label: \"Compromised Systems\", \n      value: \"89\", \n      icon: Skull, \n      color: \"text-red-400\",\n      trend: \"+7\",\n      trendDirection: \"up\"\n    },\n    { \n      label: \"Active Sessions\", \n      value: \"34\", \n      icon: Terminal, \n      color: \"text-green-400\",\n      trend: \"0\",\n      trendDirection: \"stable\"\n    },\n    { \n      label: \"Success Rate\", \n      value: \"94.7%\", \n      icon: Target, \n      color: \"text-amber-400\",\n      trend: \"+2.1%\",\n      trendDirection: \"up\"\n    },\n  ];\n\n  // World Map Client Locations\n  const clientLocations = [\n    { id: \"us-east\", name: \"US East Coast\", lat: 40.7128, lng: -74.0060, clients: 45, status: \"online\", country: \"United States\" },\n    { id: \"us-west\", name: \"US West Coast\", lat: 34.0522, lng: -118.2437, clients: 32, status: \"compromised\", country: \"United States\" },\n    { id: \"eu-central\", name: \"EU Central\", lat: 50.1109, lng: 8.6821, clients: 28, status: \"online\", country: \"Germany\" },\n    { id: \"asia-pacific\", name: \"Asia Pacific\", lat: 35.6762, lng: 139.6503, clients: 19, status: \"offline\", country: \"Japan\" },\n    { id: \"uk\", name: \"United Kingdom\", lat: 51.5074, lng: -0.1278, clients: 23, status: \"online\", country: \"United Kingdom\" },\n    { id: \"canada\", name: \"Canada\", lat: 45.4215, lng: -75.6972, clients: 15, status: \"compromised\", country: \"Canada\" },\n    { id: \"australia\", name: \"Australia\", lat: -33.8688, lng: 151.2093, clients: 12, status: \"online\", country: \"Australia\" },\n    { id: \"brazil\", name: \"Brazil\", lat: -23.5505, lng: -46.6333, clients: 8, status: \"offline\", country: \"Brazil\" }\n  ];\n\n  // Active Sessions Data\n  const activeSessions = [\n    {\n      id: \"sess-001\",\n      hostname: \"DESKTOP-A7X9K2L\",\n      ip: \"192.168.1.105\",\n      os: \"Windows 11 Pro\",\n      user: \"admin\",\n      uptime: \"02:34:15\",\n      lastSeen: \"2 min ago\",\n      status: \"active\",\n      location: \"New York, US\",\n      privileges: \"SYSTEM\"\n    },\n    {\n      id: \"sess-002\", \n      hostname: \"UBUNTU-SERVER-01\",\n      ip: \"10.0.0.15\",\n      os: \"Ubuntu 22.04 LTS\",\n      user: \"root\",\n      uptime: \"12:45:30\",\n      lastSeen: \"5 min ago\",\n      status: \"idle\",\n      location: \"London, UK\",\n      privileges: \"root\"\n    },\n    {\n      id: \"sess-003\",\n      hostname: \"MACOS-WORKSTATION\",\n      ip: \"172.16.0.42\",\n      os: \"macOS Ventura\",\n      user: \"developer\",\n      uptime: \"00:47:22\",\n      lastSeen: \"1 min ago\", \n      status: \"active\",\n      location: \"Tokyo, JP\",\n      privileges: \"user\"\n    },\n    {\n      id: \"sess-004\",\n      hostname: \"WIN-SRV-DC01\",\n      ip: \"10.0.1.10\",\n      os: \"Windows Server 2019\",\n      user: \"Administrator\",\n      uptime: \"96:12:08\",\n      lastSeen: \"30 sec ago\",\n      status: \"active\",\n      location: \"Frankfurt, DE\",\n      privileges: \"Administrator\"\n    },\n    {\n      id: \"sess-005\",\n      hostname: \"CENTOS-WEB-01\", \n      ip: \"203.0.113.25\",\n      os: \"CentOS 8\",\n      user: \"apache\",\n      uptime: \"08:15:45\",\n      lastSeen: \"10 min ago\",\n      status: \"disconnected\",\n      location: \"Sydney, AU\",\n      privileges: \"user\"\n    }\n  ];\n\n  // Recent Activity Feed\n  const recentActivity = [\n    {\n      id: \"act-001\",\n      type: \"command\",\n      timestamp: \"14:32:15\",\n      source: \"DESKTOP-A7X9K2L\",\n      action: \"Executed privilege escalation\",\n      details: \"whoami /priv - SeDebugPrivilege enabled\",\n      severity: \"high\",\n      icon: Terminal\n    },\n    {\n      id: \"act-002\",\n      type: \"connection\", \n      timestamp: \"14:31:42\",\n      source: \"185.199.108.153\",\n      action: \"New client connected\",\n      details: \"UBUNTU-SERVER-01 established reverse shell\",\n      severity: \"info\",\n      icon: Wifi\n    },\n    {\n      id: \"act-003\",\n      type: \"alert\",\n      timestamp: \"14:30:18\",\n      source: \"WIN-SRV-DC01\",\n      action: \"Security alert triggered\",\n      details: \"Multiple failed authentication attempts detected\",\n      severity: \"warning\",\n      icon: AlertTriangle\n    },\n    {\n      id: \"act-004\",\n      type: \"command\",\n      timestamp: \"14:29:55\",\n      source: \"MACOS-WORKSTATION\",\n      action: \"File system enumeration\",\n      details: \"find / -type f -perm -4000 2>/dev/null\",\n      severity: \"medium\",\n      icon: FileText\n    },\n    {\n      id: \"act-005\",\n      type: \"system\",\n      timestamp: \"14:28:33\",\n      source: \"C2-INFRASTRUCTURE\",\n      action: \"Payload deployment successful\",\n      details: \"Persistence mechanism installed on 3 targets\",\n      severity: \"success\",\n      icon: CheckCircle2\n    },\n    {\n      id: \"act-006\",\n      type: \"connection\",\n      timestamp: \"14:27:12\",\n      source: \"CENTOS-WEB-01\",\n      action: \"Session timeout\",\n      details: \"Client disconnected after 8h 15m\",\n      severity: \"info\",\n      icon: WifiOff\n    }\n  ];\n\n  // Quick Actions Data\n  const quickActions = [\n    { label: \"Shell\", icon: Terminal, action: \"open-shell\", color: \"text-cyan-400\" },\n    { label: \"File Manager\", icon: FileText, action: \"file-manager\", color: \"text-green-400\" },\n    { label: \"Process List\", icon: Activity, action: \"process-list\", color: \"text-blue-400\" },\n    { label: \"Network Scan\", icon: Network, action: \"network-scan\", color: \"text-purple-400\" },\n    { label: \"Screenshots\", icon: Monitor, action: \"screenshot\", color: \"text-amber-400\" },\n    { label: \"Keylogger\", icon: Command, action: \"keylogger\", color: \"text-red-400\" },\n    { label: \"Webcam\", icon: Eye, action: \"webcam\", color: \"text-pink-400\" },\n    { label: \"Audio Record\", icon: Radio, action: \"audio-record\", color: \"text-orange-400\" }\n  ];\n\n  // Network Intelligence Data\n  const networkSegments = [\n    { \n      name: \"Corporate LAN\", \n      subnet: \"192.168.1.0/24\", \n      hosts: 156, \n      compromised: 23, \n      risk: \"medium\",\n      coverage: 14.7\n    },\n    { \n      name: \"DMZ\", \n      subnet: \"10.0.0.0/24\", \n      hosts: 45, \n      compromised: 12, \n      risk: \"high\",\n      coverage: 26.7\n    },\n    { \n      name: \"Internal Servers\", \n      subnet: \"172.16.0.0/20\", \n      hosts: 89, \n      compromised: 8, \n      risk: \"low\",\n      coverage: 9.0\n    },\n    { \n      name: \"Guest Network\", \n      subnet: \"10.1.0.0/24\", \n      hosts: 234, \n      compromised: 67, \n      risk: \"critical\",\n      coverage: 28.6\n    }\n  ];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': case 'online': return 'text-green-400';\n      case 'compromised': return 'text-red-400';\n      case 'idle': return 'text-amber-400';\n      case 'disconnected': case 'offline': return 'text-gray-400';\n      default: return 'text-muted-foreground';\n    }\n  };\n\n  const getStatusDot = (status: string) => {\n    switch (status) {\n      case 'active': case 'online': return 'bg-green-400';\n      case 'compromised': return 'bg-red-400';\n      case 'idle': return 'bg-amber-400';\n      case 'disconnected': case 'offline': return 'bg-gray-400';\n      default: return 'bg-gray-400';\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'success': return 'text-green-400';\n      case 'info': return 'text-blue-400';\n      case 'warning': return 'text-amber-400';\n      case 'high': case 'critical': return 'text-red-400';\n      case 'medium': return 'text-orange-400';\n      default: return 'text-muted-foreground';\n    }\n  };\n\n  const getRiskColor = (risk: string) => {\n    switch (risk) {\n      case 'low': return 'text-green-400 bg-green-400/10';\n      case 'medium': return 'text-amber-400 bg-amber-400/10';\n      case 'high': return 'text-orange-400 bg-orange-400/10';\n      case 'critical': return 'text-red-400 bg-red-400/10';\n      default: return 'text-muted-foreground bg-muted/10';\n    }\n  };\n\n  const getTrendIcon = (direction: string) => {\n    switch (direction) {\n      case 'up': return <ArrowUp className=\"w-3 h-3 text-green-400\" />;\n      case 'down': return <ArrowDown className=\"w-3 h-3 text-red-400\" />;\n      default: return <Minus className=\"w-3 h-3 text-muted-foreground\" />;\n    }\n  };\n\n  return (\n    <div className=\"container-responsive py-6 space-y-6\" data-testid=\"dashboard-page\">\n      {/* C2 Command Center Header */}\n      <div className=\"space-y-3\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"space-y-1\">\n            <h1 className=\"text-3xl font-semibold text-foreground font-mono\">\n              C2 Command Center\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Real-time operational overview • BYOB-Lab Training Environment\n            </p>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            <div className=\"px-3 py-1 bg-red-500/20 text-red-400 border border-red-500/30 rounded-md text-sm font-mono\">\n              SIMULATION MODE\n            </div>\n            <Badge variant=\"outline\" className=\"font-mono\">\n              <Clock className=\"w-3 h-3 mr-1\" />\n              Uptime: 127:34:15\n            </Badge>\n          </div>\n        </div>\n      </div>\n\n      {/* Global Statistics Panel */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {globalStats.map((stat, index) => {\n          const IconComponent = stat.icon;\n          return (\n            <Card \n              key={index} \n              className=\"bg-card/50 border-border/50 backdrop-blur-sm\" \n              data-testid={`stat-${stat.label.toLowerCase().replace(/\\s+/g, '-')}`}\n            >\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-1\">\n                    <p className=\"text-sm font-medium text-muted-foreground uppercase tracking-wide font-mono\">\n                      {stat.label}\n                    </p>\n                    <p className=\"text-3xl font-bold text-foreground font-mono\">\n                      {stat.value}\n                    </p>\n                    <div className=\"flex items-center gap-1 text-xs\">\n                      {getTrendIcon(stat.trendDirection)}\n                      <span className={stat.trendDirection === 'up' ? 'text-green-400' : stat.trendDirection === 'down' ? 'text-red-400' : 'text-muted-foreground'}>\n                        {stat.trend}\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"p-3 rounded-lg bg-muted/20\">\n                    <IconComponent className={`w-6 h-6 ${stat.color}`} />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-6\">\n        {/* Left Column - World Map & Sessions */}\n        <div className=\"xl:col-span-2 space-y-6\">\n          {/* Interactive World Map */}\n          <Card className=\"bg-card/50 border-border/50 backdrop-blur-sm\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle className=\"flex items-center gap-2 font-mono\">\n                    <Globe className=\"w-5 h-5 text-cyan-400\" />\n                    Global Client Distribution\n                  </CardTitle>\n                  <CardDescription>\n                    Real-time client locations and status overview\n                  </CardDescription>\n                </div>\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"button-refresh-map\">\n                  <RefreshCw className=\"w-4 h-4 mr-2\" />\n                  Refresh\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {/* Mock World Map SVG */}\n              <div className=\"relative bg-muted/10 rounded-lg p-4 h-64 overflow-hidden\">\n                <svg viewBox=\"0 0 800 400\" className=\"w-full h-full\">\n                  {/* Simplified world map background */}\n                  <rect width=\"800\" height=\"400\" fill=\"hsl(var(--muted))\" opacity=\"0.1\" />\n                  \n                  {/* Client location markers */}\n                  {clientLocations.map((location, index) => {\n                    const x = ((location.lng + 180) / 360) * 800;\n                    const y = ((90 - location.lat) / 180) * 400;\n                    \n                    return (\n                      <g key={location.id}>\n                        {/* Connection lines */}\n                        <line \n                          x1=\"400\" y1=\"200\" \n                          x2={x} y2={y} \n                          stroke=\"hsl(var(--muted-foreground))\" \n                          strokeWidth=\"1\" \n                          opacity=\"0.3\"\n                        />\n                        {/* Location pin */}\n                        <circle \n                          cx={x} \n                          cy={y} \n                          r=\"6\" \n                          fill={location.status === 'online' ? '#22d3ee' : location.status === 'compromised' ? '#ef4444' : '#6b7280'}\n                          className=\"cursor-pointer hover:opacity-80\"\n                          data-testid={`map-pin-${location.id}`}\n                        />\n                        {/* Client count */}\n                        <text \n                          x={x} \n                          y={y - 12} \n                          textAnchor=\"middle\" \n                          className=\"text-xs font-mono fill-foreground\"\n                        >\n                          {location.clients}\n                        </text>\n                      </g>\n                    );\n                  })}\n                  \n                  {/* Central C2 server */}\n                  <circle cx=\"400\" cy=\"200\" r=\"8\" fill=\"hsl(var(--primary))\" />\n                  <text x=\"400\" y=\"185\" textAnchor=\"middle\" className=\"text-sm font-mono fill-primary\">C2</text>\n                </svg>\n                \n                {/* Map Legend */}\n                <div className=\"absolute bottom-4 left-4 bg-card/80 backdrop-blur-sm border border-border/50 rounded-lg p-3\">\n                  <div className=\"flex items-center gap-4 text-xs\">\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-3 h-3 rounded-full bg-cyan-400\"></div>\n                      <span>Online</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-3 h-3 rounded-full bg-red-400\"></div>\n                      <span>Compromised</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-3 h-3 rounded-full bg-gray-400\"></div>\n                      <span>Offline</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Location Summary */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mt-4\">\n                {clientLocations.slice(0, 4).map((location) => (\n                  <div key={location.id} className=\"p-3 bg-muted/20 rounded-lg border border-border/50\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-1\">\n                        <p className=\"text-sm font-medium\">{location.country}</p>\n                        <p className=\"text-xs text-muted-foreground font-mono\">{location.clients} clients</p>\n                      </div>\n                      <div className={`w-2 h-2 rounded-full ${getStatusDot(location.status)}`}></div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Active Sessions Overview */}\n          <Card className=\"bg-card/50 border-border/50 backdrop-blur-sm\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle className=\"flex items-center gap-2 font-mono\">\n                    <Terminal className=\"w-5 h-5 text-green-400\" />\n                    Active Sessions ({activeSessions.length})\n                  </CardTitle>\n                  <CardDescription>\n                    Real-time client session monitoring\n                  </CardDescription>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"button-filter-sessions\">\n                    <Filter className=\"w-4 h-4 mr-2\" />\n                    Filter\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"button-refresh-sessions\">\n                    <RefreshCw className=\"w-4 h-4 mr-2\" />\n                    Refresh\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <ScrollArea className=\"h-80\">\n                <div className=\"space-y-3\">\n                  {activeSessions.map((session) => (\n                    <div \n                      key={session.id} \n                      className=\"flex items-center gap-4 p-4 bg-muted/20 rounded-lg border border-border/50 hover:bg-muted/30 transition-colors cursor-pointer\"\n                      data-testid={`session-${session.id}`}\n                    >\n                      <div className={`w-3 h-3 rounded-full ${getStatusDot(session.status)} flex-shrink-0`}></div>\n                      \n                      <div className=\"flex-1 grid grid-cols-1 md:grid-cols-5 gap-4 min-w-0\">\n                        <div className=\"space-y-1\">\n                          <p className=\"text-sm font-medium font-mono truncate\">{session.hostname}</p>\n                          <p className=\"text-xs text-muted-foreground\">{session.ip}</p>\n                        </div>\n                        \n                        <div className=\"space-y-1\">\n                          <p className=\"text-sm\">{session.os}</p>\n                          <p className=\"text-xs text-muted-foreground\">{session.user}</p>\n                        </div>\n                        \n                        <div className=\"space-y-1\">\n                          <p className=\"text-sm font-mono\">{session.uptime}</p>\n                          <p className=\"text-xs text-muted-foreground\">{session.lastSeen}</p>\n                        </div>\n                        \n                        <div className=\"space-y-1\">\n                          <Badge \n                            variant={session.status === 'active' ? 'default' : session.status === 'idle' ? 'secondary' : 'outline'}\n                            className=\"text-xs font-mono\"\n                          >\n                            {session.status.toUpperCase()}\n                          </Badge>\n                          <p className=\"text-xs text-muted-foreground\">{session.privileges}</p>\n                        </div>\n                        \n                        <div className=\"flex items-center justify-end gap-2\">\n                          <Button variant=\"ghost\" size=\"sm\" data-testid={`button-interact-${session.id}`}>\n                            <Terminal className=\"w-4 h-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\" data-testid={`button-details-${session.id}`}>\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\" data-testid={`button-more-${session.id}`}>\n                            <MoreHorizontal className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Right Column - Activity & Actions */}\n        <div className=\"space-y-6\">\n          {/* Recent Activity Feed */}\n          <Card className=\"bg-card/50 border-border/50 backdrop-blur-sm\">\n            <CardHeader className=\"pb-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle className=\"flex items-center gap-2 font-mono\">\n                    <Activity className=\"w-5 h-5 text-amber-400\" />\n                    Activity Feed\n                  </CardTitle>\n                  <CardDescription>\n                    Real-time operational events\n                  </CardDescription>\n                </div>\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-clear-feed\">\n                  <RefreshCw className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <ScrollArea className=\"h-80\">\n                <div className=\"space-y-3\">\n                  {recentActivity.map((activity) => {\n                    const IconComponent = activity.icon;\n                    return (\n                      <div key={activity.id} className=\"flex items-start gap-3 p-3 rounded-lg bg-muted/20 border border-border/50\">\n                        <div className={`p-2 rounded-lg bg-muted/30 flex-shrink-0`}>\n                          <IconComponent className={`w-4 h-4 ${getSeverityColor(activity.severity)}`} />\n                        </div>\n                        <div className=\"flex-1 min-w-0 space-y-1\">\n                          <div className=\"flex items-center justify-between\">\n                            <p className=\"text-sm font-medium truncate\">{activity.action}</p>\n                            <span className=\"text-xs text-muted-foreground font-mono\">{activity.timestamp}</span>\n                          </div>\n                          <p className=\"text-xs text-muted-foreground font-mono\">{activity.source}</p>\n                          <p className=\"text-xs text-muted-foreground\">{activity.details}</p>\n                          <Badge \n                            variant=\"outline\" \n                            className={`text-xs ${getSeverityColor(activity.severity)}`}\n                          >\n                            {activity.severity.toUpperCase()}\n                          </Badge>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </ScrollArea>\n            </CardContent>\n          </Card>\n\n          {/* Quick Actions Dashboard */}\n          <Card className=\"bg-card/50 border-border/50 backdrop-blur-sm\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 font-mono\">\n                <Zap className=\"w-5 h-5 text-purple-400\" />\n                Quick Actions\n              </CardTitle>\n              <CardDescription>\n                Common C2 operations and tools\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 gap-3\">\n                {quickActions.map((action, index) => {\n                  const IconComponent = action.icon;\n                  return (\n                    <Button \n                      key={index}\n                      variant=\"outline\" \n                      className=\"h-16 flex-col gap-2 bg-muted/20 hover:bg-muted/30\" \n                      data-testid={`button-${action.action}`}\n                    >\n                      <IconComponent className={`w-5 h-5 ${action.color}`} />\n                      <span className=\"text-xs font-mono\">{action.label}</span>\n                    </Button>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* System Status */}\n          <Card className=\"bg-card/50 border-border/50 backdrop-blur-sm\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 font-mono\">\n                <Settings className=\"w-5 h-5 text-blue-400\" />\n                System Status\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">C2 Infrastructure</span>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-2 h-2 rounded-full bg-green-400\"></div>\n                    <span className=\"text-xs text-green-400 font-mono\">ONLINE</span>\n                  </div>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Payload Servers</span>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-2 h-2 rounded-full bg-green-400\"></div>\n                    <span className=\"text-xs text-green-400 font-mono\">ACTIVE</span>\n                  </div>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Data Exfiltration</span>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-2 h-2 rounded-full bg-amber-400\"></div>\n                    <span className=\"text-xs text-amber-400 font-mono\">THROTTLED</span>\n                  </div>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Stealth Mode</span>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-2 h-2 rounded-full bg-green-400\"></div>\n                    <span className=\"text-xs text-green-400 font-mono\">ENABLED</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"pt-4 border-t border-border\">\n                <div className=\"grid grid-cols-2 gap-4 text-center\">\n                  <div>\n                    <p className=\"text-lg font-semibold font-mono\">99.8%</p>\n                    <p className=\"text-xs text-muted-foreground\">Success Rate</p>\n                  </div>\n                  <div>\n                    <p className=\"text-lg font-semibold font-mono\">2.3GB</p>\n                    <p className=\"text-xs text-muted-foreground\">Data Collected</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Network Intelligence Summary */}\n      <Card className=\"bg-card/50 border-border/50 backdrop-blur-sm\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2 font-mono\">\n                <Network className=\"w-5 h-5 text-cyan-400\" />\n                Network Intelligence Summary\n              </CardTitle>\n              <CardDescription>\n                Network penetration overview and lateral movement analysis\n              </CardDescription>\n            </div>\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-view-topology\">\n              <Eye className=\"w-4 h-4 mr-2\" />\n              View Topology\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {networkSegments.map((segment, index) => (\n              <div key={index} className=\"p-4 bg-muted/20 rounded-lg border border-border/50\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"font-medium font-mono text-sm\">{segment.name}</h3>\n                    <Badge className={`text-xs font-mono ${getRiskColor(segment.risk)}`}>\n                      {segment.risk.toUpperCase()}\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-xs\">\n                      <span className=\"text-muted-foreground\">Subnet:</span>\n                      <span className=\"font-mono\">{segment.subnet}</span>\n                    </div>\n                    <div className=\"flex justify-between text-xs\">\n                      <span className=\"text-muted-foreground\">Total Hosts:</span>\n                      <span className=\"font-mono\">{segment.hosts}</span>\n                    </div>\n                    <div className=\"flex justify-between text-xs\">\n                      <span className=\"text-muted-foreground\">Compromised:</span>\n                      <span className=\"font-mono text-red-400\">{segment.compromised}</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-xs\">\n                      <span className=\"text-muted-foreground\">Coverage:</span>\n                      <span className=\"font-mono\">{segment.coverage}%</span>\n                    </div>\n                    <Progress value={segment.coverage} className=\"h-2\" />\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":30284},"client/src/pages/NetworkPage.tsx":{"content":"import { NetworkTopology } from \"@/components/NetworkTopology\";\n\nexport default function NetworkPage() {\n  return (\n    <div className=\"space-y-6 p-6\" data-testid=\"network-page\">\n      <div>\n        <h1 className=\"text-2xl font-semibold\">Network Map</h1>\n        <p className=\"text-muted-foreground\">\n          Visualize the lab network topology and device relationships\n        </p>\n      </div>\n      \n      <NetworkTopology />\n    </div>\n  );\n}","size_bytes":447},"client/src/pages/ScenariosPage.tsx":{"content":"import { LabEnvironmentSelector } from \"@/components/LabEnvironmentSelector\";\n\nexport default function ScenariosPage() {\n  return (\n    <div className=\"space-y-6 p-6\" data-testid=\"scenarios-page\">\n      <div>\n        <h1 className=\"text-2xl font-semibold\">Lab Scenarios</h1>\n        <p className=\"text-muted-foreground\">\n          Choose from various post-exploitation training scenarios\n        </p>\n      </div>\n      \n      <LabEnvironmentSelector />\n    </div>\n  );\n}","size_bytes":471},"client/src/pages/TargetsPage.tsx":{"content":"import { TargetMachineCard } from \"@/components/TargetMachineCard\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Filter, Plus } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport default function TargetsPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  \n  //todo: remove mock functionality\n  const targetMachines = [\n    {\n      id: \"target-1\",\n      name: \"Windows Server 2019\",\n      os: \"Windows\",\n      ip: \"192.168.1.10\",\n      status: \"online\" as const,\n      vulnerabilities: 3,\n      difficulty: \"beginner\" as const,\n    },\n    {\n      id: \"target-2\",\n      name: \"Ubuntu 20.04\", \n      os: \"Linux\",\n      ip: \"192.168.1.20\",\n      status: \"compromised\" as const,\n      vulnerabilities: 5,\n      difficulty: \"intermediate\" as const,\n    },\n    {\n      id: \"target-3\",\n      name: \"macOS Monterey\",\n      os: \"macOS\",\n      ip: \"192.168.1.30\", \n      status: \"offline\" as const,\n      vulnerabilities: 2,\n      difficulty: \"advanced\" as const,\n    },\n    {\n      id: \"target-4\",\n      name: \"Windows 10 Pro\",\n      os: \"Windows\",\n      ip: \"192.168.1.40\",\n      status: \"online\" as const,\n      vulnerabilities: 4,\n      difficulty: \"intermediate\" as const,\n    },\n    {\n      id: \"target-5\",\n      name: \"CentOS 8\",\n      os: \"Linux\",\n      ip: \"192.168.1.50\",\n      status: \"online\" as const,\n      vulnerabilities: 2,\n      difficulty: \"advanced\" as const,\n    },\n    {\n      id: \"target-6\",\n      name: \"FreeBSD 13\",\n      os: \"BSD\",\n      ip: \"192.168.1.60\",\n      status: \"offline\" as const,\n      vulnerabilities: 1,\n      difficulty: \"advanced\" as const,\n    },\n  ];\n\n  const filteredMachines = targetMachines.filter(machine =>\n    machine.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    machine.os.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    machine.ip.includes(searchQuery)\n  );\n\n  const statusCounts = {\n    online: targetMachines.filter(m => m.status === 'online').length,\n    offline: targetMachines.filter(m => m.status === 'offline').length,\n    compromised: targetMachines.filter(m => m.status === 'compromised').length,\n  };\n\n  return (\n    <div className=\"space-y-6 p-6\" data-testid=\"targets-page\">\n      {/* Header */}\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-semibold\">Target Machines</h1>\n            <p className=\"text-muted-foreground\">\n              Manage and interact with lab target machines\n            </p>\n          </div>\n          <Button data-testid=\"button-add-target\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Target\n          </Button>\n        </div>\n\n        {/* Search and Filters */}\n        <div className=\"flex items-center gap-4\">\n          <div className=\"relative flex-1 max-w-md\">\n            <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" />\n            <Input \n              placeholder=\"Search targets...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-targets\"\n            />\n          </div>\n          <Button variant=\"outline\" size=\"sm\" data-testid=\"button-filter-targets\">\n            <Filter className=\"w-4 h-4 mr-2\" />\n            Filter\n          </Button>\n        </div>\n\n        {/* Status Overview */}\n        <div className=\"flex gap-3\">\n          <Badge variant=\"secondary\" className=\"text-success border-success\">\n            Online: {statusCounts.online}\n          </Badge>\n          <Badge variant=\"secondary\" className=\"text-muted-foreground border-muted-foreground\">\n            Offline: {statusCounts.offline}  \n          </Badge>\n          <Badge variant=\"secondary\" className=\"text-warning border-warning\">\n            Compromised: {statusCounts.compromised}\n          </Badge>\n        </div>\n      </div>\n\n      {/* Target Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {filteredMachines.map((machine) => (\n          <TargetMachineCard key={machine.id} {...machine} />\n        ))}\n      </div>\n\n      {filteredMachines.length === 0 && (\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground\">No targets found matching your search.</p>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":4511},"client/src/pages/TelemetryPage.tsx":{"content":"import { TelemetryPanel } from \"@/components/TelemetryPanel\";\n\nexport default function TelemetryPage() {\n  return (\n    <div className=\"space-y-6 p-6\" data-testid=\"telemetry-page\">\n      <div>\n        <h1 className=\"text-2xl font-semibold\">Security Telemetry</h1>\n        <p className=\"text-muted-foreground\">\n          Monitor security events and system activities in real-time\n        </p>\n      </div>\n      \n      <TelemetryPanel />\n    </div>\n  );\n}","size_bytes":454},"client/src/pages/TerminalPage.tsx":{"content":"import { TerminalInterface } from \"@/components/TerminalInterface\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { \n  Terminal, Shield, Globe, Activity, Users, HardDrive, \n  Wifi, Lock, AlertTriangle, Clock \n} from \"lucide-react\";\n\nexport default function TerminalPage() {\n  return (\n    <div className=\"p-6 h-full bg-gradient-to-br from-gray-950 to-black\" data-testid=\"terminal-page\">\n      <div className=\"space-y-6 h-full\">\n        {/* Header Section */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"flex items-center justify-center w-10 h-10 rounded-lg bg-green-500/20 border border-green-500/30\">\n                <Terminal className=\"w-5 h-5 text-green-400\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-semibold text-white\">Secure Terminal</h1>\n                <p className=\"text-gray-400 font-mono text-sm\">\n                  Advanced Command & Control Interface\n                </p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            <Badge variant=\"outline\" className=\"border-orange-500/30 text-orange-400 font-mono\">\n              <AlertTriangle className=\"w-3 h-3 mr-1\" />\n              TRAINING MODE\n            </Badge>\n            <Button variant=\"outline\" size=\"sm\" className=\"font-mono\">\n              <Shield className=\"w-4 h-4 mr-2\" />\n              SECURE SESSION\n            </Button>\n          </div>\n        </div>\n\n        {/* Status Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card className=\"bg-gray-900/50 border-green-500/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-300\">Target Status</CardTitle>\n              <Globe className=\"w-4 h-4 text-green-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-400 font-mono\">ONLINE</div>\n              <p className=\"text-xs text-gray-500 font-mono\">192.168.1.10</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-900/50 border-blue-500/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-300\">Access Level</CardTitle>\n              <Users className=\"w-4 h-4 text-blue-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-400 font-mono\">SYSTEM</div>\n              <p className=\"text-xs text-gray-500 font-mono\">Elevated privileges</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-900/50 border-yellow-500/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-300\">Session Time</CardTitle>\n              <Clock className=\"w-4 h-4 text-yellow-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-yellow-400 font-mono\">00:15:42</div>\n              <p className=\"text-xs text-gray-500 font-mono\">Active session</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-900/50 border-purple-500/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-300\">Encryption</CardTitle>\n              <Lock className=\"w-4 h-4 text-purple-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-purple-400 font-mono\">AES-256</div>\n              <p className=\"text-xs text-gray-500 font-mono\">End-to-end secured</p>\n            </CardContent>\n          </Card>\n        </div>\n        \n        {/* Terminal Interface */}\n        <div className=\"flex-1 min-h-0\">\n          <TerminalInterface />\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4338},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/AppSidebar.tsx":{"content":"import { AppSidebar } from '../AppSidebar';\nimport { SidebarProvider } from \"@/components/ui/sidebar\";\n\nexport default function AppSidebarExample() {\n  const style = {\n    \"--sidebar-width\": \"20rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n      </div>\n    </SidebarProvider>\n  );\n}","size_bytes":422},"client/src/components/examples/DashboardHeader.tsx":{"content":"import { DashboardHeader } from '../DashboardHeader';\nimport { SidebarProvider } from \"@/components/ui/sidebar\";\n\nexport default function DashboardHeaderExample() {\n  const style = {\n    \"--sidebar-width\": \"20rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <div className=\"flex flex-col flex-1\">\n          <DashboardHeader />\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}","size_bytes":506},"client/src/components/examples/LabEnvironmentSelector.tsx":{"content":"import { LabEnvironmentSelector } from '../LabEnvironmentSelector';\n\nexport default function LabEnvironmentSelectorExample() {\n  return (\n    <div className=\"p-4 max-w-4xl\">\n      <LabEnvironmentSelector />\n    </div>\n  );\n}","size_bytes":224},"client/src/components/examples/NetworkTopology.tsx":{"content":"import { NetworkTopology } from '../NetworkTopology';\n\nexport default function NetworkTopologyExample() {\n  return (\n    <div className=\"p-4 max-w-4xl\">\n      <NetworkTopology />\n    </div>\n  );\n}","size_bytes":196},"client/src/components/examples/ProgressTracker.tsx":{"content":"import { ProgressTracker } from '../ProgressTracker';\n\nexport default function ProgressTrackerExample() {\n  return (\n    <div className=\"p-4 max-w-2xl\">\n      <ProgressTracker />\n    </div>\n  );\n}","size_bytes":196},"client/src/components/examples/TargetMachineCard.tsx":{"content":"import { TargetMachineCard } from '../TargetMachineCard';\n\nexport default function TargetMachineCardExample() {\n  //todo: remove mock functionality\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 p-4\">\n      <TargetMachineCard\n        id=\"target-1\"\n        name=\"Windows Server 2019\"\n        os=\"Windows\"\n        ip=\"192.168.1.10\"\n        status=\"online\"\n        vulnerabilities={3}\n        difficulty=\"beginner\"\n      />\n      <TargetMachineCard\n        id=\"target-2\"\n        name=\"Ubuntu 20.04\"\n        os=\"Linux\"\n        ip=\"192.168.1.20\"\n        status=\"compromised\"\n        vulnerabilities={5}\n        difficulty=\"intermediate\"\n      />\n      <TargetMachineCard\n        id=\"target-3\"\n        name=\"macOS Monterey\"\n        os=\"macOS\"\n        ip=\"192.168.1.30\"\n        status=\"offline\"\n        vulnerabilities={2}\n        difficulty=\"advanced\"\n      />\n    </div>\n  );\n}","size_bytes":909},"client/src/components/examples/TelemetryPanel.tsx":{"content":"import { TelemetryPanel } from '../TelemetryPanel';\n\nexport default function TelemetryPanelExample() {\n  return (\n    <div className=\"p-4 max-w-4xl\">\n      <TelemetryPanel />\n    </div>\n  );\n}","size_bytes":192},"client/src/components/examples/TerminalInterface.tsx":{"content":"import { TerminalInterface } from '../TerminalInterface';\n\nexport default function TerminalInterfaceExample() {\n  return (\n    <div className=\"p-4 max-w-4xl\">\n      <TerminalInterface />\n    </div>\n  );\n}","size_bytes":204},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}