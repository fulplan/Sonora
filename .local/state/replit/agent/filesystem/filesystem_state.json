{"file_contents":{"design_guidelines.md":{"content":"# BYOB-Lab Design Guidelines\n\n## Design Approach\n**Cyberpunk Military Opsec Theme** - Inspired by military command centers, cyberpunk aesthetics, and tactical operations interfaces. Combines the technical precision of military systems with the futuristic edge of cyberpunk design.\n\n## Core Design Elements\n\n### Color Palette\n**Cyberpunk Military Theme**:\n- Background: 220 25% 4% (deep tactical black)\n- Surface: 220 20% 8% (command center dark)\n- Primary: 180 100% 45% (cyberpunk cyan for active states)  \n- Secondary: 130 70% 45% (matrix green for success/online)\n- Accent: 15 100% 50% (tactical red for alerts/critical)\n- Warning: 45 100% 50% (amber warning for compromised)\n- Text Primary: 180 20% 95% (cyan-tinted white)\n- Text Secondary: 180 15% 70% (muted cyan-gray)\n\n### Typography\n- **Primary**: 'JetBrains Mono' (monospace for terminal/code authenticity)\n- **Secondary**: 'Inter' (clean sans-serif for UI elements)\n- Terminal text: 14px regular weight\n- UI text: 14-16px medium weight\n- Headers: 18-24px semibold\n\n### Layout System\n**Tailwind spacing units**: 2, 4, 6, 8, 12, 16\n- Consistent 4-unit (1rem) grid system\n- 8-unit margins for major sections\n- 2-unit padding for tight spacing\n\n### Component Library\n\n**Navigation**: Fixed sidebar with collapsible sections\n- Lab environments, target machines, terminal, resources, progress\n\n**Dashboard Cards**: Glass-morphism effect with subtle borders\n- Status indicators using color-coded dots\n- Progress bars with gradient fills\n- Hover states with subtle glow effects\n\n**Terminal Interface**: Full-screen overlay capability\n- Authentic command prompt styling\n- Syntax highlighting for commands\n- Scrollable history with timestamps\n\n**Target Machine Grid**: Card-based layout\n- OS icons and vulnerability badges\n- Status indicators (online/offline/compromised)\n- Difficulty level visualization\n\n**Network Topology**: Interactive SVG-based visualization\n- Node connections with animated data flow\n- Clickable nodes revealing machine details\n- Zoom and pan capabilities\n\n## Key Design Principles\n\n1. **Authenticity**: Interface should feel like professional cybersecurity tools\n2. **Educational Clarity**: Complex concepts presented with clear visual hierarchy\n3. **Controlled Environment**: Visual cues that reinforce this is simulation/training\n4. **Progressive Disclosure**: Advanced features accessible but not overwhelming for beginners\n\n## Visual Treatment\n- **Background**: Dark gradient from deep navy to black\n- **Borders**: Subtle cyan glows on interactive elements\n- **Shadows**: Soft, dark shadows for depth without distraction\n- **Icons**: Line-style icons from Heroicons for consistency\n\n## Unique Features\n- **Simulation Badge**: Persistent \"SIMULATION\" indicator in header\n- **Progress Visualization**: Skill tree showing technique mastery\n- **Replay Controls**: Video-like controls for scenario playback\n- **Network Health**: Real-time simulated network status monitoring\n\nThis design balances professional cybersecurity aesthetics with educational accessibility, ensuring users feel they're working with realistic tools while maintaining clear learning objectives.","size_bytes":3140},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# RedTeam C2 - Advanced Command & Control Center\n\n## Overview\n\nRedTeam C2 is a sophisticated Command and Control Center designed for Red Team operations and Adversary Simulation exercises. The platform provides real-time management of compromised assets, C2 sessions, and attack operations through an advanced web interface with a tactical cyberpunk aesthetic. It serves as a comprehensive solution for managing complex red team engagements, monitoring operation status, and coordinating adversary simulation activities in enterprise environments.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React with TypeScript**: Single-page application built with React 18 and TypeScript for type safety\n- **Vite Build System**: Fast development server and optimized production builds\n- **Wouter Routing**: Lightweight client-side routing for navigation between dashboard, targets, terminal, network map, scenarios, and telemetry pages\n- **Component-Based Design**: Modular UI components including target machine cards, terminal interface, network topology visualizer, and telemetry panels\n- **Styling Framework**: Tailwind CSS with custom cyberpunk/military theme variables and shadcn/ui component library\n- **State Management**: TanStack React Query for server state management and caching\n\n### Backend Architecture\n- **Express.js Server**: Node.js backend with Express framework for API endpoints\n- **TypeScript**: Full-stack TypeScript implementation for consistency and type safety\n- **Modular Route System**: Centralized route registration with placeholder for API endpoints\n- **Memory Storage**: In-memory storage implementation with interface for future database integration\n- **Development Integration**: Vite middleware integration for hot module replacement in development\n\n### Data Storage Solutions\n- **Database ORM**: Drizzle ORM configured for PostgreSQL with schema definitions\n- **Connection**: Neon serverless PostgreSQL database integration\n- **Schema Management**: Centralized schema definitions in shared directory with user authentication models\n- **Migration System**: Drizzle Kit for database schema migrations and version control\n\n### Authentication and Authorization\n- **User Management**: User schema with username/password authentication structure\n- **Session Handling**: Infrastructure prepared for session-based authentication\n- **Storage Interface**: Abstracted storage layer supporting user CRUD operations\n- **Security Considerations**: Password hashing and session management framework in place\n\n### External Dependencies\n\n#### UI and Styling\n- **Radix UI**: Comprehensive component library for accessible UI primitives (dialogs, dropdowns, navigation)\n- **Tailwind CSS**: Utility-first CSS framework with custom cyberpunk color scheme\n- **Lucide React**: Icon library providing consistent iconography throughout the application\n- **Class Variance Authority**: Component variant management for consistent styling patterns\n\n#### Database and ORM\n- **Neon Database**: Serverless PostgreSQL database service for production deployment\n- **Drizzle ORM**: Type-safe ORM for database operations and schema management\n- **Drizzle Kit**: CLI tool for database migrations and schema synchronization\n\n#### Development and Build Tools\n- **Vite**: Frontend build tool with React plugin and development server\n- **ESBuild**: Fast JavaScript bundler for production server builds\n- **PostCSS**: CSS processing with Tailwind CSS and Autoprefixer plugins\n\n#### Frontend State Management\n- **TanStack React Query**: Server state management, caching, and synchronization\n- **React Hook Form**: Form state management with validation support\n- **Zod**: Runtime type validation and schema parsing\n\n#### Additional Utilities\n- **Date-fns**: Date manipulation and formatting utilities\n- **clsx/tailwind-merge**: Conditional CSS class name management\n- **Embla Carousel**: Carousel component for UI interactions","size_bytes":3998},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        warning: {\n          DEFAULT: \"hsl(15 85% 55%)\",\n          foreground: \"hsl(15 20% 95%)\",\n        },\n        success: {\n          DEFAULT: \"hsl(130 70% 45%)\",\n          foreground: \"hsl(130 20% 95%)\",\n        },\n        terminal: {\n          green: \"hsl(130 70% 55%)\",\n          red: \"hsl(15 85% 65%)\",\n          yellow: \"hsl(45 85% 65%)\",\n          blue: \"hsl(220 85% 65%)\",\n          cyan: \"hsl(180 85% 65%)\",\n          magenta: \"hsl(280 85% 65%)\",\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"Inter\", \"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"JetBrains Mono\", \"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4547},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { z } from \"zod\";\nimport { storage } from \"./storage\";\nimport { \n  insertClientSchema, insertSessionSchema, insertPayloadSchema,\n  insertExploitSchema, insertModuleSchema, insertListenerSchema,\n  insertListenerTemplateSchema, insertReportSchema, insertEvidenceSchema,\n  insertCommandSchema, insertSettingSchema, PaginationSchema\n} from \"@shared/schema\";\n\n// Helper function for validation\nconst validateBody = <T>(schema: z.ZodSchema<T>) => (req: any, res: any, next: any) => {\n  try {\n    req.body = schema.parse(req.body);\n    next();\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({\n        success: false,\n        error: \"Validation failed\",\n        details: error.errors\n      });\n    }\n    next(error);\n  }\n};\n\nconst validateQuery = <T>(schema: z.ZodSchema<T>) => (req: any, res: any, next: any) => {\n  try {\n    req.query = schema.parse(req.query);\n    next();\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({\n        success: false,\n        error: \"Query validation failed\",\n        details: error.errors\n      });\n    }\n    next(error);\n  }\n};\n\n// Helper to extract pagination from request\nconst getPagination = (query: any): PaginationQuery => {\n  return {\n    page: query.page || 1,\n    limit: query.limit || 20\n  };\n};\n\n// Helper to extract search pagination from request\nconst getSearchPagination = (query: any): SearchPaginationQuery => {\n  return {\n    page: query.page || 1,\n    limit: query.limit || 20,\n    q: query.q\n  };\n};\n\n// Pagination schema for query params\nconst paginationQuerySchema = z.object({\n  page: z.coerce.number().int().min(1).optional().default(1),\n  limit: z.coerce.number().int().min(1).max(100).optional().default(20)\n});\n\n// Extended pagination schema for search queries\nconst searchPaginationQuerySchema = paginationQuerySchema.extend({\n  q: z.string().min(1)\n});\n\n// Type for pagination query parameters\ntype PaginationQuery = z.infer<typeof paginationQuerySchema>;\ntype SearchPaginationQuery = z.infer<typeof searchPaginationQuerySchema>;\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // ========================================\n  // Sessions Routes\n  // ========================================\n  \n  // Get all sessions\n  app.get(\"/api/sessions\", validateQuery(paginationQuerySchema), async (req, res) => {\n    try {\n      const pagination = getPagination(req.query);\n      const result = await storage.getSessions(pagination);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to fetch sessions\" });\n    }\n  });\n\n  // Get sessions by status\n  app.get(\"/api/sessions/status/:status\", validateQuery(paginationQuerySchema), async (req, res) => {\n    try {\n      const pagination = getPagination(req.query);\n      const result = await storage.getSessionsByStatus(req.params.status, pagination);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to fetch sessions by status\" });\n    }\n  });\n\n  // Get session by ID\n  app.get(\"/api/sessions/:id\", async (req, res) => {\n    try {\n      const session = await storage.getSession(req.params.id);\n      if (!session) {\n        return res.status(404).json({ success: false, error: \"Session not found\" });\n      }\n      res.json({ success: true, data: session });\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to fetch session\" });\n    }\n  });\n\n  // Create session\n  app.post(\"/api/sessions\", validateBody(insertSessionSchema), async (req, res) => {\n    try {\n      const session = await storage.createSession(req.body);\n      res.status(201).json({ success: true, data: session });\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to create session\" });\n    }\n  });\n\n  // Update session\n  app.put(\"/api/sessions/:id\", validateBody(insertSessionSchema.partial()), async (req, res) => {\n    try {\n      const session = await storage.updateSession(req.params.id, req.body);\n      if (!session) {\n        return res.status(404).json({ success: false, error: \"Session not found\" });\n      }\n      res.json({ success: true, data: session });\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to update session\" });\n    }\n  });\n\n  // Delete session\n  app.delete(\"/api/sessions/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteSession(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ success: false, error: \"Session not found\" });\n      }\n      res.json({ success: true, message: \"Session deleted\" });\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to delete session\" });\n    }\n  });\n\n  // ========================================\n  // Payloads Routes\n  // ========================================\n  \n  // Get all payloads\n  app.get(\"/api/payloads\", validateQuery(paginationQuerySchema), async (req, res) => {\n    try {\n      const pagination = getPagination(req.query);\n      const result = await storage.getPayloads(pagination);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to fetch payloads\" });\n    }\n  });\n\n  // Get payloads by platform\n  app.get(\"/api/payloads/platform/:platform\", validateQuery(paginationQuerySchema), async (req, res) => {\n    try {\n      const pagination = getPagination(req.query);\n      const result = await storage.getPayloadsByPlatform(req.params.platform, pagination);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to fetch payloads by platform\" });\n    }\n  });\n\n  // Get payload by ID\n  app.get(\"/api/payloads/:id\", async (req, res) => {\n    try {\n      const payload = await storage.getPayload(req.params.id);\n      if (!payload) {\n        return res.status(404).json({ success: false, error: \"Payload not found\" });\n      }\n      res.json({ success: true, data: payload });\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to fetch payload\" });\n    }\n  });\n\n  // Create payload\n  app.post(\"/api/payloads\", validateBody(insertPayloadSchema), async (req, res) => {\n    try {\n      const payload = await storage.createPayload(req.body);\n      res.status(201).json({ success: true, data: payload });\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to create payload\" });\n    }\n  });\n\n  // ========================================\n  // Exploits Routes\n  // ========================================\n  \n  // Get all exploits\n  app.get(\"/api/exploits\", validateQuery(paginationQuerySchema), async (req, res) => {\n    try {\n      const pagination = getPagination(req.query);\n      const result = await storage.getExploits(pagination);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to fetch exploits\" });\n    }\n  });\n\n  // Get exploits by scope\n  app.get(\"/api/exploits/scope/:scope\", validateQuery(paginationQuerySchema), async (req, res) => {\n    try {\n      const pagination = getPagination(req.query);\n      const result = await storage.getExploitsByScope(req.params.scope, pagination);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to fetch exploits by scope\" });\n    }\n  });\n\n  // Search exploits\n  app.get(\"/api/exploits/search\", validateQuery(searchPaginationQuerySchema), async (req, res) => {\n    try {\n      const query = getSearchPagination(req.query);\n      const result = await storage.searchExploits(query.q, { page: query.page, limit: query.limit });\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to search exploits\" });\n    }\n  });\n\n  // Create exploit\n  app.post(\"/api/exploits\", validateBody(insertExploitSchema), async (req, res) => {\n    try {\n      const exploit = await storage.createExploit(req.body);\n      res.status(201).json({ success: true, data: exploit });\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to create exploit\" });\n    }\n  });\n\n  // ========================================\n  // Modules Routes\n  // ========================================\n  \n  // Get all modules\n  app.get(\"/api/modules\", validateQuery(paginationQuerySchema), async (req, res) => {\n    try {\n      const pagination = getPagination(req.query);\n      const result = await storage.getModules(pagination);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to fetch modules\" });\n    }\n  });\n\n  // Get modules by category\n  app.get(\"/api/modules/category/:category\", validateQuery(paginationQuerySchema), async (req, res) => {\n    try {\n      const pagination = getPagination(req.query);\n      const result = await storage.getModulesByCategory(req.params.category, pagination);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to fetch modules by category\" });\n    }\n  });\n\n  // Create module\n  app.post(\"/api/modules\", validateBody(insertModuleSchema), async (req, res) => {\n    try {\n      const module = await storage.createModule(req.body);\n      res.status(201).json({ success: true, data: module });\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to create module\" });\n    }\n  });\n\n  // ========================================\n  // Listeners Routes\n  // ========================================\n  \n  // Get all listeners\n  app.get(\"/api/listeners\", validateQuery(paginationQuerySchema), async (req, res) => {\n    try {\n      const pagination = getPagination(req.query);\n      const result = await storage.getListeners(pagination);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to fetch listeners\" });\n    }\n  });\n\n  // Get listeners by protocol\n  app.get(\"/api/listeners/protocol/:protocol\", validateQuery(paginationQuerySchema), async (req, res) => {\n    try {\n      const pagination = getPagination(req.query);\n      const result = await storage.getListenersByProtocol(req.params.protocol, pagination);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to fetch listeners by protocol\" });\n    }\n  });\n\n  // Create listener\n  app.post(\"/api/listeners\", validateBody(insertListenerSchema), async (req, res) => {\n    try {\n      const listener = await storage.createListener(req.body);\n      res.status(201).json({ success: true, data: listener });\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to create listener\" });\n    }\n  });\n\n  // ========================================\n  // Listener Templates Routes\n  // ========================================\n  \n  // Get all listener templates\n  app.get(\"/api/listeners/templates\", validateQuery(paginationQuerySchema), async (req, res) => {\n    try {\n      const pagination = getPagination(req.query);\n      const result = await storage.getListenerTemplates(pagination);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to fetch listener templates\" });\n    }\n  });\n\n  // Create listener template\n  app.post(\"/api/listeners/templates\", validateBody(insertListenerTemplateSchema), async (req, res) => {\n    try {\n      const template = await storage.createListenerTemplate(req.body);\n      res.status(201).json({ success: true, data: template });\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to create listener template\" });\n    }\n  });\n\n  // ========================================\n  // Reports Routes\n  // ========================================\n  \n  // Get all reports\n  app.get(\"/api/reports\", validateQuery(paginationQuerySchema), async (req, res) => {\n    try {\n      const pagination = getPagination(req.query);\n      const result = await storage.getReports(pagination);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to fetch reports\" });\n    }\n  });\n\n  // Get reports by kind\n  app.get(\"/api/reports/kind/:kind\", validateQuery(paginationQuerySchema), async (req, res) => {\n    try {\n      const pagination = getPagination(req.query);\n      const result = await storage.getReportsByKind(req.params.kind, pagination);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to fetch reports by kind\" });\n    }\n  });\n\n  // Create report\n  app.post(\"/api/reports\", validateBody(insertReportSchema), async (req, res) => {\n    try {\n      const report = await storage.createReport(req.body);\n      res.status(201).json({ success: true, data: report });\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to create report\" });\n    }\n  });\n\n  // ========================================\n  // Evidence Routes\n  // ========================================\n  \n  // Get evidence by report ID\n  app.get(\"/api/reports/:reportId/evidence\", validateQuery(paginationQuerySchema), async (req, res) => {\n    try {\n      const pagination = getPagination(req.query);\n      const result = await storage.getEvidenceByReportId(req.params.reportId, pagination);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to fetch evidence\" });\n    }\n  });\n\n  // Create evidence\n  app.post(\"/api/evidence\", validateBody(insertEvidenceSchema), async (req, res) => {\n    try {\n      const evidence = await storage.createEvidence(req.body);\n      res.status(201).json({ success: true, data: evidence });\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to create evidence\" });\n    }\n  });\n\n  // ========================================\n  // Commands Routes\n  // ========================================\n  \n  // Get commands by session ID\n  app.get(\"/api/sessions/:sessionId/commands\", validateQuery(paginationQuerySchema), async (req, res) => {\n    try {\n      const pagination = getPagination(req.query);\n      const result = await storage.getCommandsBySessionId(req.params.sessionId, pagination);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to fetch commands\" });\n    }\n  });\n\n  // Create command\n  app.post(\"/api/commands\", validateBody(insertCommandSchema), async (req, res) => {\n    try {\n      const command = await storage.createCommand(req.body);\n      res.status(201).json({ success: true, data: command });\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to create command\" });\n    }\n  });\n\n  // ========================================\n  // Settings Routes\n  // ========================================\n  \n  // Get all settings\n  app.get(\"/api/settings\", validateQuery(paginationQuerySchema), async (req, res) => {\n    try {\n      const pagination = getPagination(req.query);\n      const result = await storage.getSettings(pagination);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to fetch settings\" });\n    }\n  });\n\n  // Get settings by category\n  app.get(\"/api/settings/category/:category\", validateQuery(paginationQuerySchema), async (req, res) => {\n    try {\n      const pagination = getPagination(req.query);\n      const result = await storage.getSettingsByCategory(req.params.category, pagination);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to fetch settings by category\" });\n    }\n  });\n\n  // Create or update setting\n  app.post(\"/api/settings\", validateBody(insertSettingSchema), async (req, res) => {\n    try {\n      const existing = await storage.getSetting(req.body.key);\n      if (existing) {\n        const updated = await storage.updateSetting(req.body.key, req.body);\n        res.json({ success: true, data: updated });\n      } else {\n        const created = await storage.createSetting(req.body);\n        res.status(201).json({ success: true, data: created });\n      }\n    } catch (error) {\n      res.status(500).json({ success: false, error: \"Failed to save setting\" });\n    }\n  });\n\n  // ========================================\n  // Health Check\n  // ========================================\n  \n  app.get(\"/api/health\", (req, res) => {\n    res.json({ \n      success: true, \n      message: \"C2-CORE API is running\",\n      timestamp: new Date().toISOString()\n    });\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":16762},"server/storage.ts":{"content":"import { \n  type User, type InsertUser,\n  type Client, type InsertClient,\n  type Session, type InsertSession,\n  type Payload, type InsertPayload,\n  type Exploit, type InsertExploit,\n  type Module, type InsertModule,\n  type Listener, type InsertListener,\n  type ListenerTemplate, type InsertListenerTemplate,\n  type Report, type InsertReport,\n  type Evidence, type InsertEvidence,\n  type Command, type InsertCommand,\n  type Setting, type InsertSetting,\n  type Pagination, type PaginatedResponse\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Clients\n  getClient(id: string): Promise<Client | undefined>;\n  getClients(pagination?: Pagination): Promise<PaginatedResponse<Client>>;\n  createClient(client: InsertClient): Promise<Client>;\n  updateClient(id: string, client: Partial<InsertClient>): Promise<Client | undefined>;\n  deleteClient(id: string): Promise<boolean>;\n  \n  // Sessions\n  getSession(id: string): Promise<Session | undefined>;\n  getSessions(pagination?: Pagination): Promise<PaginatedResponse<Session>>;\n  getSessionsByStatus(status: string, pagination?: Pagination): Promise<PaginatedResponse<Session>>;\n  createSession(session: InsertSession): Promise<Session>;\n  updateSession(id: string, session: Partial<InsertSession>): Promise<Session | undefined>;\n  deleteSession(id: string): Promise<boolean>;\n  \n  // Payloads\n  getPayload(id: string): Promise<Payload | undefined>;\n  getPayloads(pagination?: Pagination): Promise<PaginatedResponse<Payload>>;\n  getPayloadsByPlatform(platform: string, pagination?: Pagination): Promise<PaginatedResponse<Payload>>;\n  createPayload(payload: InsertPayload): Promise<Payload>;\n  updatePayload(id: string, payload: Partial<InsertPayload>): Promise<Payload | undefined>;\n  deletePayload(id: string): Promise<boolean>;\n  \n  // Exploits\n  getExploit(id: string): Promise<Exploit | undefined>;\n  getExploits(pagination?: Pagination): Promise<PaginatedResponse<Exploit>>;\n  getExploitsByScope(scope: string, pagination?: Pagination): Promise<PaginatedResponse<Exploit>>;\n  searchExploits(query: string, pagination?: Pagination): Promise<PaginatedResponse<Exploit>>;\n  createExploit(exploit: InsertExploit): Promise<Exploit>;\n  updateExploit(id: string, exploit: Partial<InsertExploit>): Promise<Exploit | undefined>;\n  deleteExploit(id: string): Promise<boolean>;\n  \n  // Modules\n  getModule(id: string): Promise<Module | undefined>;\n  getModules(pagination?: Pagination): Promise<PaginatedResponse<Module>>;\n  getModulesByCategory(category: string, pagination?: Pagination): Promise<PaginatedResponse<Module>>;\n  createModule(module: InsertModule): Promise<Module>;\n  updateModule(id: string, module: Partial<InsertModule>): Promise<Module | undefined>;\n  deleteModule(id: string): Promise<boolean>;\n  \n  // Listeners\n  getListener(id: string): Promise<Listener | undefined>;\n  getListeners(pagination?: Pagination): Promise<PaginatedResponse<Listener>>;\n  getListenersByProtocol(protocol: string, pagination?: Pagination): Promise<PaginatedResponse<Listener>>;\n  createListener(listener: InsertListener): Promise<Listener>;\n  updateListener(id: string, listener: Partial<InsertListener>): Promise<Listener | undefined>;\n  deleteListener(id: string): Promise<boolean>;\n  \n  // Listener Templates\n  getListenerTemplate(id: string): Promise<ListenerTemplate | undefined>;\n  getListenerTemplates(pagination?: Pagination): Promise<PaginatedResponse<ListenerTemplate>>;\n  createListenerTemplate(template: InsertListenerTemplate): Promise<ListenerTemplate>;\n  updateListenerTemplate(id: string, template: Partial<InsertListenerTemplate>): Promise<ListenerTemplate | undefined>;\n  deleteListenerTemplate(id: string): Promise<boolean>;\n  \n  // Reports\n  getReport(id: string): Promise<Report | undefined>;\n  getReports(pagination?: Pagination): Promise<PaginatedResponse<Report>>;\n  getReportsByKind(kind: string, pagination?: Pagination): Promise<PaginatedResponse<Report>>;\n  createReport(report: InsertReport): Promise<Report>;\n  updateReport(id: string, report: Partial<InsertReport>): Promise<Report | undefined>;\n  deleteReport(id: string): Promise<boolean>;\n  \n  // Evidence\n  getEvidence(id: string): Promise<Evidence | undefined>;\n  getEvidenceByReportId(reportId: string, pagination?: Pagination): Promise<PaginatedResponse<Evidence>>;\n  createEvidence(evidence: InsertEvidence): Promise<Evidence>;\n  updateEvidence(id: string, evidence: Partial<InsertEvidence>): Promise<Evidence | undefined>;\n  deleteEvidence(id: string): Promise<boolean>;\n  \n  // Commands\n  getCommand(id: string): Promise<Command | undefined>;\n  getCommands(pagination?: Pagination): Promise<PaginatedResponse<Command>>;\n  getCommandsBySessionId(sessionId: string, pagination?: Pagination): Promise<PaginatedResponse<Command>>;\n  createCommand(command: InsertCommand): Promise<Command>;\n  updateCommand(id: string, command: Partial<InsertCommand>): Promise<Command | undefined>;\n  deleteCommand(id: string): Promise<boolean>;\n  \n  // Settings\n  getSetting(key: string): Promise<Setting | undefined>;\n  getSettings(pagination?: Pagination): Promise<PaginatedResponse<Setting>>;\n  getSettingsByCategory(category: string, pagination?: Pagination): Promise<PaginatedResponse<Setting>>;\n  createSetting(setting: InsertSetting): Promise<Setting>;\n  updateSetting(key: string, setting: Partial<InsertSetting>): Promise<Setting | undefined>;\n  deleteSetting(key: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private clients: Map<string, Client>;\n  private sessions: Map<string, Session>;\n  private payloads: Map<string, Payload>;\n  private exploits: Map<string, Exploit>;\n  private modules: Map<string, Module>;\n  private listeners: Map<string, Listener>;\n  private listenerTemplates: Map<string, ListenerTemplate>;\n  private reports: Map<string, Report>;\n  private evidence: Map<string, Evidence>;\n  private commands: Map<string, Command>;\n  private settings: Map<string, Setting>;\n\n  constructor() {\n    this.users = new Map();\n    this.clients = new Map();\n    this.sessions = new Map();\n    this.payloads = new Map();\n    this.exploits = new Map();\n    this.modules = new Map();\n    this.listeners = new Map();\n    this.listenerTemplates = new Map();\n    this.reports = new Map();\n    this.evidence = new Map();\n    this.commands = new Map();\n    this.settings = new Map();\n    \n    // Seed with initial data\n    this.seedData();\n  }\n\n  private async seedData() {\n    // Seed sample clients first\n    const sampleClients = [\n      {\n        hostname: \"WIN-DESKTOP-01\",\n        ipAddress: \"192.168.1.100\",\n        macAddress: \"00:1B:44:11:3A:B7\",\n        operatingSystem: \"Windows 11 Pro\",\n        osVersion: \"22H2\",\n        architecture: \"x64\",\n        processorType: \"Intel Core i7-9700K\",\n        totalMemory: 16,\n        country: \"United States\",\n        city: \"New York\",\n        region: \"NY\",\n        latitude: \"40.7128\",\n        longitude: \"-74.0060\",\n        timezone: \"America/New_York\",\n        status: \"online\",\n        uptime: 86400,\n        connectionQuality: \"excellent\",\n        currentUser: \"admin\",\n        isElevated: true,\n        availablePrivileges: [\"SeDebugPrivilege\", \"SeBackupPrivilege\"],\n        userAccounts: [\n          { username: \"admin\", isAdmin: true, isActive: true, groups: [\"Administrators\", \"Users\"] },\n          { username: \"guest\", isAdmin: false, isActive: false, groups: [\"Guests\"] }\n        ],\n        installedSoftware: [\n          { name: \"Microsoft Office\", version: \"365\", vendor: \"Microsoft\", isSystemCritical: false },\n          { name: \"Windows Defender\", version: \"4.18\", vendor: \"Microsoft\", isSystemCritical: true }\n        ],\n        runningProcesses: [\n          { pid: 1234, name: \"explorer.exe\", cpu: 2.5, memory: 45.2, user: \"admin\", startTime: new Date(Date.now() - 3600000) },\n          { pid: 5678, name: \"chrome.exe\", cpu: 15.3, memory: 256.8, user: \"admin\", startTime: new Date(Date.now() - 1800000) }\n        ],\n        openPorts: [\n          { port: 80, protocol: \"TCP\", state: \"LISTENING\", service: \"HTTP\", processName: \"httpd.exe\" },\n          { port: 443, protocol: \"TCP\", state: \"LISTENING\", service: \"HTTPS\", processName: \"httpd.exe\" },\n          { port: 22, protocol: \"TCP\", state: \"LISTENING\", service: \"SSH\", processName: \"sshd.exe\" }\n        ],\n        networkInterfaces: [\n          { name: \"Ethernet0\", type: \"ethernet\", ipAddress: \"192.168.1.100\", macAddress: \"00:1B:44:11:3A:B7\", isActive: true, speed: 1000 },\n          { name: \"WiFi0\", type: \"wifi\", ipAddress: \"192.168.1.101\", macAddress: \"00:1B:44:11:3A:B8\", isActive: false }\n        ],\n        riskLevel: \"medium\",\n        vulnerabilityCount: 3,\n        difficulty: \"intermediate\",\n        tags: [\"workstation\", \"windows\", \"corporate\"],\n        notes: \"Corporate workstation with elevated privileges\",\n        isActive: true\n      },\n      {\n        hostname: \"UBUNTU-SERVER-01\",\n        ipAddress: \"192.168.1.101\",\n        macAddress: \"00:1B:44:22:4C:D8\",\n        operatingSystem: \"Ubuntu Server\",\n        osVersion: \"22.04 LTS\",\n        architecture: \"x64\",\n        processorType: \"AMD Ryzen 7 3700X\",\n        totalMemory: 32,\n        country: \"United States\",\n        city: \"San Francisco\",\n        region: \"CA\",\n        latitude: \"37.7749\",\n        longitude: \"-122.4194\",\n        timezone: \"America/Los_Angeles\",\n        status: \"online\",\n        uptime: 172800,\n        connectionQuality: \"excellent\",\n        currentUser: \"root\",\n        isElevated: true,\n        availablePrivileges: [\"sudo\"],\n        userAccounts: [\n          { username: \"root\", isAdmin: true, isActive: true, groups: [\"root\", \"sudo\"] },\n          { username: \"ubuntu\", isAdmin: false, isActive: true, groups: [\"ubuntu\", \"sudo\"] },\n          { username: \"www-data\", isAdmin: false, isActive: true, groups: [\"www-data\"] }\n        ],\n        installedSoftware: [\n          { name: \"Apache\", version: \"2.4.52\", vendor: \"Apache Foundation\", isSystemCritical: true },\n          { name: \"MySQL\", version: \"8.0.28\", vendor: \"Oracle\", isSystemCritical: true },\n          { name: \"PHP\", version: \"8.1.2\", vendor: \"PHP Group\", isSystemCritical: false }\n        ],\n        runningProcesses: [\n          { pid: 1001, name: \"systemd\", cpu: 0.1, memory: 12.5, user: \"root\", startTime: new Date(Date.now() - 172800000) },\n          { pid: 1234, name: \"apache2\", cpu: 5.2, memory: 89.4, user: \"www-data\", startTime: new Date(Date.now() - 86400000) },\n          { pid: 2345, name: \"mysqld\", cpu: 8.7, memory: 512.1, user: \"mysql\", startTime: new Date(Date.now() - 86400000) }\n        ],\n        openPorts: [\n          { port: 22, protocol: \"TCP\", state: \"LISTENING\", service: \"SSH\", processName: \"sshd\" },\n          { port: 80, protocol: \"TCP\", state: \"LISTENING\", service: \"HTTP\", processName: \"apache2\" },\n          { port: 443, protocol: \"TCP\", state: \"LISTENING\", service: \"HTTPS\", processName: \"apache2\" },\n          { port: 3306, protocol: \"TCP\", state: \"LISTENING\", service: \"MySQL\", processName: \"mysqld\" }\n        ],\n        networkInterfaces: [\n          { name: \"eth0\", type: \"ethernet\", ipAddress: \"192.168.1.101\", macAddress: \"00:1B:44:22:4C:D8\", isActive: true, speed: 1000 }\n        ],\n        riskLevel: \"high\",\n        vulnerabilityCount: 7,\n        difficulty: \"advanced\",\n        tags: [\"server\", \"linux\", \"web-server\", \"database\"],\n        notes: \"Web server with database backend - high value target\",\n        isActive: true\n      },\n      {\n        hostname: \"MacBook-Pro-15\",\n        ipAddress: \"192.168.1.102\",\n        macAddress: \"00:1B:44:33:5D:E9\",\n        operatingSystem: \"macOS Ventura\",\n        osVersion: \"13.2.1\",\n        architecture: \"arm64\",\n        processorType: \"Apple M2 Pro\",\n        totalMemory: 16,\n        country: \"Canada\",\n        city: \"Toronto\",\n        region: \"ON\",\n        latitude: \"43.6532\",\n        longitude: \"-79.3832\",\n        timezone: \"America/Toronto\",\n        status: \"online\",\n        uptime: 43200,\n        connectionQuality: \"good\",\n        currentUser: \"developer\",\n        isElevated: false,\n        availablePrivileges: [],\n        userAccounts: [\n          { username: \"developer\", isAdmin: true, isActive: true, groups: [\"admin\", \"staff\", \"wheel\"] },\n          { username: \"guest\", isAdmin: false, isActive: false, groups: [\"everyone\"] }\n        ],\n        installedSoftware: [\n          { name: \"Xcode\", version: \"14.2\", vendor: \"Apple\", isSystemCritical: false },\n          { name: \"Docker Desktop\", version: \"4.16.2\", vendor: \"Docker\", isSystemCritical: false },\n          { name: \"VS Code\", version: \"1.75.1\", vendor: \"Microsoft\", isSystemCritical: false }\n        ],\n        runningProcesses: [\n          { pid: 1, name: \"launchd\", cpu: 0.1, memory: 8.2, user: \"root\", startTime: new Date(Date.now() - 43200000) },\n          { pid: 567, name: \"Finder\", cpu: 1.2, memory: 65.8, user: \"developer\", startTime: new Date(Date.now() - 43200000) },\n          { pid: 1234, name: \"Code\", cpu: 12.5, memory: 245.6, user: \"developer\", startTime: new Date(Date.now() - 7200000) }\n        ],\n        openPorts: [\n          { port: 22, protocol: \"TCP\", state: \"LISTENING\", service: \"SSH\", processName: \"sshd\" },\n          { port: 5000, protocol: \"TCP\", state: \"LISTENING\", service: \"Node.js\", processName: \"node\" }\n        ],\n        networkInterfaces: [\n          { name: \"en0\", type: \"wifi\", ipAddress: \"192.168.1.102\", macAddress: \"00:1B:44:33:5D:E9\", isActive: true, speed: 867 }\n        ],\n        riskLevel: \"low\",\n        vulnerabilityCount: 1,\n        difficulty: \"beginner\",\n        tags: [\"laptop\", \"macos\", \"developer\"],\n        notes: \"Developer workstation with development tools\",\n        isActive: true\n      }\n    ];\n\n    // Create clients with specific IDs directly\n    const clientIds = [\"client-win-desktop\", \"client-ubuntu-server\", \"client-macbook\"];\n    for (let i = 0; i < sampleClients.length; i++) {\n      const now = new Date();\n      const client: Client = { \n        ...sampleClients[i] as any,\n        id: clientIds[i],\n        createdAt: now,\n        updatedAt: now,\n        lastSeen: now,\n        firstSeen: now,\n        // Ensure all required fields have values\n        tags: sampleClients[i].tags || null,\n        macAddress: sampleClients[i].macAddress || null,\n        osVersion: sampleClients[i].osVersion || null,\n        architecture: sampleClients[i].architecture || null,\n        processorType: sampleClients[i].processorType || null,\n        totalMemory: sampleClients[i].totalMemory || null,\n        country: sampleClients[i].country || null,\n        city: sampleClients[i].city || null,\n        region: sampleClients[i].region || null,\n        latitude: sampleClients[i].latitude || null,\n        longitude: sampleClients[i].longitude || null,\n        timezone: sampleClients[i].timezone || null,\n        uptime: sampleClients[i].uptime || null,\n        connectionQuality: sampleClients[i].connectionQuality || null,\n        currentUser: sampleClients[i].currentUser || null,\n        isElevated: sampleClients[i].isElevated || false,\n        availablePrivileges: sampleClients[i].availablePrivileges || null,\n        userAccounts: sampleClients[i].userAccounts || null,\n        installedSoftware: sampleClients[i].installedSoftware || null,\n        runningProcesses: sampleClients[i].runningProcesses || null,\n        openPorts: sampleClients[i].openPorts || null,\n        networkInterfaces: sampleClients[i].networkInterfaces || null,\n        riskLevel: sampleClients[i].riskLevel || null,\n        vulnerabilityCount: sampleClients[i].vulnerabilityCount || 0,\n        difficulty: sampleClients[i].difficulty || null,\n        notes: sampleClients[i].notes || null,\n        isActive: sampleClients[i].isActive !== undefined ? sampleClients[i].isActive : true\n      };\n      this.clients.set(clientIds[i], client);\n    }\n\n    // Seed sample sessions\n    const sampleSessions = [\n      {\n        clientId: \"client-win-desktop\",\n        sessionType: \"shell\",\n        status: \"active\",\n        metadata: { type: \"reverse_shell\", port: 4444 }\n      },\n      {\n        clientId: \"client-ubuntu-server\", \n        sessionType: \"file_manager\",\n        status: \"inactive\",\n        metadata: { type: \"file_browser\", lastPath: \"/home/user\" }\n      }\n    ];\n\n    for (const session of sampleSessions) {\n      await this.createSession(session as InsertSession);\n    }\n\n    // Seed sample payloads\n    const samplePayloads = [\n      {\n        platform: \"windows\",\n        type: \"executable\",\n        name: \"Windows Reverse Shell\",\n        description: \"Standard Windows reverse shell payload\",\n        config: { lhost: \"192.168.1.100\", lport: 4444, architecture: \"x64\" },\n        isGenerated: true,\n        createdAt: new Date()\n      },\n      {\n        platform: \"linux\",\n        type: \"script\",\n        name: \"Linux Persistence Script\",\n        description: \"Bash script for maintaining persistence\",\n        config: { method: \"crontab\", interval: \"5m\" },\n        isGenerated: false,\n        createdAt: new Date()\n      }\n    ];\n\n    for (const payload of samplePayloads) {\n      await this.createPayload(payload as InsertPayload);\n    }\n\n    // Seed sample listeners\n    const sampleListeners = [\n      {\n        protocol: \"https\",\n        host: \"0.0.0.0\",\n        port: 443,\n        status: \"running\",\n        name: \"HTTPS Listener\",\n        description: \"Main HTTPS C2 listener\",\n        config: { ssl: true, cert_path: \"/etc/ssl/c2.pem\" },\n        connectionCount: 5,\n        createdAt: new Date(),\n        startedAt: new Date()\n      }\n    ];\n\n    for (const listener of sampleListeners) {\n      await this.createListener(listener as InsertListener);\n    }\n\n    // Seed sample modules\n    const sampleModules = [\n      // Reconnaissance modules\n      {\n        category: \"recon\",\n        name: \"Network Scanner\",\n        description: \"Advanced network discovery and port scanning module with stealth capabilities\",\n        platform: [\"windows\", \"linux\", \"macos\"],\n        requirements: [\"network_access\", \"admin_privileges\"],\n        options: [\n          { name: \"target\", type: \"string\", required: true, description: \"Target IP or CIDR range\" },\n          { name: \"ports\", type: \"string\", default: \"1-1000\", description: \"Port range to scan\" },\n          { name: \"stealth\", type: \"boolean\", default: true, description: \"Enable stealth scanning\" }\n        ],\n        references: [\"CVE-2019-0708\", \"NIST-800-115\"],\n        author: \"RedTeam Ops\",\n        reliable: true\n      },\n      {\n        category: \"recon\",\n        name: \"AD Enumeration\",\n        description: \"Active Directory reconnaissance and user enumeration module\",\n        platform: [\"windows\"],\n        requirements: [\"domain_access\", \"authenticated_user\"],\n        options: [\n          { name: \"domain\", type: \"string\", required: true, description: \"Target domain name\" },\n          { name: \"enumerate_users\", type: \"boolean\", default: true, description: \"Enumerate domain users\" },\n          { name: \"enumerate_groups\", type: \"boolean\", default: true, description: \"Enumerate domain groups\" }\n        ],\n        references: [\"MITRE-T1087.002\"],\n        author: \"AD Security Team\",\n        reliable: true\n      },\n      // Privilege Escalation modules\n      {\n        category: \"priv-esc\",\n        name: \"Windows Token Manipulation\",\n        description: \"Advanced Windows token duplication and privilege escalation techniques\",\n        platform: [\"windows\"],\n        requirements: [\"SeDebugPrivilege\", \"local_access\"],\n        options: [\n          { name: \"target_process\", type: \"string\", required: true, description: \"Target process for token theft\" },\n          { name: \"technique\", type: \"select\", options: [\"duplicate\", \"impersonate\"], default: \"duplicate\" }\n        ],\n        references: [\"MITRE-T1134\", \"CVE-2021-1732\"],\n        author: \"Windows Exploit Team\",\n        reliable: true\n      },\n      {\n        category: \"priv-esc\",\n        name: \"Linux Kernel Exploit\",\n        description: \"Local privilege escalation using known kernel vulnerabilities\",\n        platform: [\"linux\"],\n        requirements: [\"local_shell\", \"gcc_compiler\"],\n        options: [\n          { name: \"exploit_type\", type: \"select\", options: [\"dirty_cow\", \"overlayfs\", \"userfaultfd\"], required: true },\n          { name: \"kernel_version\", type: \"string\", description: \"Target kernel version\" }\n        ],\n        references: [\"CVE-2016-5195\", \"CVE-2021-3493\"],\n        author: \"Linux Exploit Research\",\n        reliable: false\n      },\n      // Lateral Movement modules\n      {\n        category: \"lateral\",\n        name: \"PSExec Remote Execution\",\n        description: \"Remote command execution using PsExec-style techniques\",\n        platform: [\"windows\"],\n        requirements: [\"admin_credentials\", \"smb_access\"],\n        options: [\n          { name: \"target_host\", type: \"string\", required: true, description: \"Target hostname or IP\" },\n          { name: \"username\", type: \"string\", required: true, description: \"Administrator username\" },\n          { name: \"password\", type: \"password\", required: true, description: \"Administrator password\" },\n          { name: \"command\", type: \"string\", required: true, description: \"Command to execute\" }\n        ],\n        references: [\"MITRE-T1569.002\"],\n        author: \"Lateral Movement Team\",\n        reliable: true\n      },\n      {\n        category: \"lateral\",\n        name: \"SSH Key Harvesting\",\n        description: \"Collect and utilize SSH keys for lateral movement across Unix systems\",\n        platform: [\"linux\", \"macos\"],\n        requirements: [\"file_system_access\"],\n        options: [\n          { name: \"search_paths\", type: \"array\", default: [\"/home/*/.ssh\", \"/root/.ssh\"], description: \"Paths to search for SSH keys\" },\n          { name: \"auto_connect\", type: \"boolean\", default: false, description: \"Automatically attempt connections\" }\n        ],\n        references: [\"MITRE-T1552.004\"],\n        author: \"Unix Security Team\",\n        reliable: true\n      },\n      // Persistence modules\n      {\n        category: \"persistence\",\n        name: \"Registry Persistence\",\n        description: \"Establish persistence through Windows registry modifications\",\n        platform: [\"windows\"],\n        requirements: [\"registry_write\", \"user_context\"],\n        options: [\n          { name: \"registry_key\", type: \"select\", options: [\"HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\", \"HKLM\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\"], required: true },\n          { name: \"payload_path\", type: \"string\", required: true, description: \"Path to payload executable\" },\n          { name: \"entry_name\", type: \"string\", default: \"SecurityUpdate\", description: \"Registry entry name\" }\n        ],\n        references: [\"MITRE-T1547.001\"],\n        author: \"Persistence Team\",\n        reliable: true\n      },\n      {\n        category: \"persistence\",\n        name: \"Cron Job Persistence\",\n        description: \"Establish persistence using scheduled cron jobs on Unix systems\",\n        platform: [\"linux\", \"macos\"],\n        requirements: [\"shell_access\", \"crontab_access\"],\n        options: [\n          { name: \"schedule\", type: \"string\", default: \"*/5 * * * *\", description: \"Cron schedule expression\" },\n          { name: \"command\", type: \"string\", required: true, description: \"Command to execute\" },\n          { name: \"user_crontab\", type: \"boolean\", default: true, description: \"Use user crontab vs system\" }\n        ],\n        references: [\"MITRE-T1053.003\"],\n        author: \"Unix Persistence Team\",\n        reliable: true\n      },\n      // Post-Exploitation modules\n      {\n        category: \"post\",\n        name: \"Credential Harvester\",\n        description: \"Extract stored credentials from various Windows applications and services\",\n        platform: [\"windows\"],\n        requirements: [\"admin_privileges\", \"memory_access\"],\n        options: [\n          { name: \"target_apps\", type: \"array\", default: [\"chrome\", \"firefox\", \"outlook\"], description: \"Applications to target\" },\n          { name: \"include_lsass\", type: \"boolean\", default: true, description: \"Include LSASS memory dump\" },\n          { name: \"export_format\", type: \"select\", options: [\"json\", \"csv\", \"txt\"], default: \"json\" }\n        ],\n        references: [\"MITRE-T1555\", \"MITRE-T1003.001\"],\n        author: \"Credential Research Team\",\n        reliable: true\n      },\n      {\n        category: \"post\",\n        name: \"System Information Collector\",\n        description: \"Comprehensive system profiling and information gathering module\",\n        platform: [\"windows\", \"linux\", \"macos\"],\n        requirements: [\"system_access\"],\n        options: [\n          { name: \"collect_hardware\", type: \"boolean\", default: true, description: \"Collect hardware information\" },\n          { name: \"collect_software\", type: \"boolean\", default: true, description: \"Collect installed software\" },\n          { name: \"collect_network\", type: \"boolean\", default: true, description: \"Collect network configuration\" },\n          { name: \"collect_users\", type: \"boolean\", default: true, description: \"Collect user accounts\" }\n        ],\n        references: [\"MITRE-T1082\", \"MITRE-T1033\"],\n        author: \"Information Gathering Team\",\n        reliable: true\n      },\n      // Data Exfiltration modules\n      {\n        category: \"exfil\",\n        name: \"Encrypted File Exfiltration\",\n        description: \"Secure data exfiltration with encryption and steganography capabilities\",\n        platform: [\"windows\", \"linux\", \"macos\"],\n        requirements: [\"network_access\", \"file_access\"],\n        options: [\n          { name: \"target_files\", type: \"array\", required: true, description: \"Files or directories to exfiltrate\" },\n          { name: \"encryption\", type: \"boolean\", default: true, description: \"Encrypt data before transmission\" },\n          { name: \"steganography\", type: \"boolean\", default: false, description: \"Hide data in images\" },\n          { name: \"chunk_size\", type: \"number\", default: 1024, description: \"Data chunk size in KB\" }\n        ],\n        references: [\"MITRE-T1041\", \"MITRE-T1022\"],\n        author: \"Data Exfiltration Team\",\n        reliable: true\n      },\n      {\n        category: \"exfil\",\n        name: \"DNS Tunneling\",\n        description: \"Covert data exfiltration through DNS queries and responses\",\n        platform: [\"windows\", \"linux\", \"macos\"],\n        requirements: [\"dns_access\", \"network_access\"],\n        options: [\n          { name: \"domain\", type: \"string\", required: true, description: \"Controlled domain for tunneling\" },\n          { name: \"record_type\", type: \"select\", options: [\"TXT\", \"A\", \"CNAME\"], default: \"TXT\" },\n          { name: \"encoding\", type: \"select\", options: [\"base64\", \"hex\"], default: \"base64\" }\n        ],\n        references: [\"MITRE-T1048.003\"],\n        author: \"Covert Channel Team\",\n        reliable: false\n      },\n      // Anti-Forensics modules\n      {\n        category: \"anti-forensics\",\n        name: \"Log Cleaner\",\n        description: \"Comprehensive log cleaning and evidence removal tool\",\n        platform: [\"windows\", \"linux\", \"macos\"],\n        requirements: [\"admin_privileges\", \"log_access\"],\n        options: [\n          { name: \"target_logs\", type: \"array\", default: [\"system\", \"security\", \"application\"], description: \"Log types to clean\" },\n          { name: \"time_range\", type: \"string\", description: \"Time range to clean (e.g., '2h', '1d')\" },\n          { name: \"selective_clean\", type: \"boolean\", default: true, description: \"Only remove suspicious entries\" }\n        ],\n        references: [\"MITRE-T1070.001\"],\n        author: \"Anti-Forensics Team\",\n        reliable: true\n      },\n      {\n        category: \"anti-forensics\",\n        name: \"Timestamp Manipulation\",\n        description: \"Modify file timestamps to avoid detection and timeline analysis\",\n        platform: [\"windows\", \"linux\", \"macos\"],\n        requirements: [\"file_system_access\"],\n        options: [\n          { name: \"target_files\", type: \"array\", required: true, description: \"Files to modify timestamps\" },\n          { name: \"reference_file\", type: \"string\", description: \"Use timestamps from this file\" },\n          { name: \"random_variance\", type: \"number\", default: 0, description: \"Random variance in seconds\" }\n        ],\n        references: [\"MITRE-T1070.006\"],\n        author: \"Timestamp Research Team\",\n        reliable: true\n      }\n    ];\n\n    for (const module of sampleModules) {\n      await this.createModule(module as InsertModule);\n    }\n  }\n\n  // Helper method for safe date handling\n  private safeDate(date: Date | null | undefined): Date {\n    return date ? new Date(date) : new Date();\n  }\n\n  // Helper method for pagination\n  private paginate<T>(items: T[], pagination?: Pagination): PaginatedResponse<T> {\n    const page = pagination?.page || 1;\n    const limit = pagination?.limit || 20;\n    const total = items.length;\n    const totalPages = Math.ceil(total / limit);\n    const startIndex = (page - 1) * limit;\n    const endIndex = startIndex + limit;\n    const data = items.slice(startIndex, endIndex);\n\n    return {\n      success: true,\n      data,\n      pagination: { page, limit, total, totalPages }\n    };\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Clients\n  async getClient(id: string): Promise<Client | undefined> {\n    return this.clients.get(id);\n  }\n\n  async getClients(pagination?: Pagination): Promise<PaginatedResponse<Client>> {\n    const clients = Array.from(this.clients.values());\n    return this.paginate(clients, pagination);\n  }\n\n  async createClient(insertClient: InsertClient): Promise<Client> {\n    const id = randomUUID();\n    const now = new Date();\n    const client: Client = { \n      ...insertClient,\n      id,\n      createdAt: now,\n      updatedAt: now,\n      lastSeen: insertClient.lastSeen || now,\n      firstSeen: insertClient.firstSeen || now,\n      // Ensure required properties have default values\n      tags: insertClient.tags || null,\n      macAddress: insertClient.macAddress || null,\n      osVersion: insertClient.osVersion || null,\n      architecture: insertClient.architecture || null,\n      processorType: insertClient.processorType || null,\n      totalMemory: insertClient.totalMemory || null,\n      country: insertClient.country || null,\n      city: insertClient.city || null,\n      region: insertClient.region || null,\n      latitude: insertClient.latitude || null,\n      longitude: insertClient.longitude || null,\n      timezone: insertClient.timezone || null,\n      uptime: insertClient.uptime || null,\n      connectionQuality: insertClient.connectionQuality || null,\n      currentUser: insertClient.currentUser || null,\n      isElevated: insertClient.isElevated || false,\n      availablePrivileges: insertClient.availablePrivileges || null,\n      userAccounts: insertClient.userAccounts || null,\n      installedSoftware: insertClient.installedSoftware || null,\n      runningProcesses: insertClient.runningProcesses || null,\n      openPorts: insertClient.openPorts || null,\n      networkInterfaces: insertClient.networkInterfaces || null,\n      riskLevel: insertClient.riskLevel || null,\n      vulnerabilityCount: insertClient.vulnerabilityCount || 0,\n      difficulty: insertClient.difficulty || null,\n      notes: insertClient.notes || null,\n      isActive: insertClient.isActive !== undefined ? insertClient.isActive : true\n    };\n    this.clients.set(id, client);\n    return client;\n  }\n\n  async updateClient(id: string, update: Partial<InsertClient>): Promise<Client | undefined> {\n    const client = this.clients.get(id);\n    if (!client) return undefined;\n    \n    const updatedClient: Client = { \n      ...client, \n      ...update, \n      updatedAt: new Date() \n    };\n    this.clients.set(id, updatedClient);\n    return updatedClient;\n  }\n\n  async deleteClient(id: string): Promise<boolean> {\n    return this.clients.delete(id);\n  }\n\n  // Sessions\n  async getSession(id: string): Promise<Session | undefined> {\n    return this.sessions.get(id);\n  }\n\n  async getSessions(pagination?: Pagination): Promise<PaginatedResponse<Session>> {\n    const sessions = Array.from(this.sessions.values()).sort((a, b) => \n      this.safeDate(b.startedAt).getTime() - this.safeDate(a.startedAt).getTime()\n    );\n    return this.paginate(sessions, pagination);\n  }\n\n  async getSessionsByStatus(status: string, pagination?: Pagination): Promise<PaginatedResponse<Session>> {\n    const sessions = Array.from(this.sessions.values())\n      .filter(s => s.status === status)\n      .sort((a, b) => this.safeDate(b.startedAt).getTime() - this.safeDate(a.startedAt).getTime());\n    return this.paginate(sessions, pagination);\n  }\n\n  async createSession(insertSession: InsertSession): Promise<Session> {\n    const id = randomUUID();\n    const now = new Date();\n    const session: Session = { \n      ...insertSession,\n      id,\n      startedAt: now,\n      lastActivity: now,\n      endedAt: insertSession.endedAt || null,\n      metadata: insertSession.metadata || null\n    };\n    this.sessions.set(id, session);\n    return session;\n  }\n\n  async updateSession(id: string, update: Partial<InsertSession>): Promise<Session | undefined> {\n    const session = this.sessions.get(id);\n    if (!session) return undefined;\n    \n    const updatedSession: Session = { \n      ...session, \n      ...update, \n      lastActivity: new Date() \n    };\n    this.sessions.set(id, updatedSession);\n    return updatedSession;\n  }\n\n  async deleteSession(id: string): Promise<boolean> {\n    return this.sessions.delete(id);\n  }\n\n  // Payloads\n  async getPayload(id: string): Promise<Payload | undefined> {\n    return this.payloads.get(id);\n  }\n\n  async getPayloads(pagination?: Pagination): Promise<PaginatedResponse<Payload>> {\n    const payloads = Array.from(this.payloads.values()).sort((a, b) => \n      this.safeDate(b.createdAt).getTime() - this.safeDate(a.createdAt).getTime()\n    );\n    return this.paginate(payloads, pagination);\n  }\n\n  async getPayloadsByPlatform(platform: string, pagination?: Pagination): Promise<PaginatedResponse<Payload>> {\n    const payloads = Array.from(this.payloads.values())\n      .filter(p => p.platform === platform)\n      .sort((a, b) => this.safeDate(b.createdAt).getTime() - this.safeDate(a.createdAt).getTime());\n    return this.paginate(payloads, pagination);\n  }\n\n  async createPayload(insertPayload: InsertPayload): Promise<Payload> {\n    const id = randomUUID();\n    const payload: Payload = { \n      ...insertPayload,\n      id,\n      createdAt: new Date(),\n      description: insertPayload.description || null,\n      config: insertPayload.config || null,\n      size: insertPayload.size || null,\n      filePath: insertPayload.filePath || null,\n      isGenerated: insertPayload.isGenerated !== undefined ? insertPayload.isGenerated : false\n    };\n    this.payloads.set(id, payload);\n    return payload;\n  }\n\n  async updatePayload(id: string, update: Partial<InsertPayload>): Promise<Payload | undefined> {\n    const payload = this.payloads.get(id);\n    if (!payload) return undefined;\n    \n    const updatedPayload: Payload = { ...payload, ...update };\n    this.payloads.set(id, updatedPayload);\n    return updatedPayload;\n  }\n\n  async deletePayload(id: string): Promise<boolean> {\n    return this.payloads.delete(id);\n  }\n\n  // Exploits\n  async getExploit(id: string): Promise<Exploit | undefined> {\n    return this.exploits.get(id);\n  }\n\n  async getExploits(pagination?: Pagination): Promise<PaginatedResponse<Exploit>> {\n    const exploits = Array.from(this.exploits.values());\n    return this.paginate(exploits, pagination);\n  }\n\n  async getExploitsByScope(scope: string, pagination?: Pagination): Promise<PaginatedResponse<Exploit>> {\n    const exploits = Array.from(this.exploits.values()).filter(e => e.scope === scope);\n    return this.paginate(exploits, pagination);\n  }\n\n  async searchExploits(query: string, pagination?: Pagination): Promise<PaginatedResponse<Exploit>> {\n    const exploits = Array.from(this.exploits.values()).filter(e => \n      e.name.toLowerCase().includes(query.toLowerCase()) ||\n      e.description?.toLowerCase().includes(query.toLowerCase()) ||\n      e.cve?.toLowerCase().includes(query.toLowerCase())\n    );\n    return this.paginate(exploits, pagination);\n  }\n\n  async createExploit(insertExploit: InsertExploit): Promise<Exploit> {\n    const id = randomUUID();\n    const exploit: Exploit = { \n      ...insertExploit,\n      id,\n      platform: insertExploit.platform || null,\n      description: insertExploit.description || null,\n      cve: insertExploit.cve || null,\n      moduleRef: insertExploit.moduleRef || null,\n      published: insertExploit.published || null,\n      verified: insertExploit.verified !== undefined ? insertExploit.verified : false,\n      tags: insertExploit.tags || null\n    };\n    this.exploits.set(id, exploit);\n    return exploit;\n  }\n\n  async updateExploit(id: string, update: Partial<InsertExploit>): Promise<Exploit | undefined> {\n    const exploit = this.exploits.get(id);\n    if (!exploit) return undefined;\n    \n    const updatedExploit: Exploit = { ...exploit, ...update };\n    this.exploits.set(id, updatedExploit);\n    return updatedExploit;\n  }\n\n  async deleteExploit(id: string): Promise<boolean> {\n    return this.exploits.delete(id);\n  }\n\n  // Modules\n  async getModule(id: string): Promise<Module | undefined> {\n    return this.modules.get(id);\n  }\n\n  async getModules(pagination?: Pagination): Promise<PaginatedResponse<Module>> {\n    const modules = Array.from(this.modules.values());\n    return this.paginate(modules, pagination);\n  }\n\n  async getModulesByCategory(category: string, pagination?: Pagination): Promise<PaginatedResponse<Module>> {\n    const modules = Array.from(this.modules.values()).filter(m => m.category === category);\n    return this.paginate(modules, pagination);\n  }\n\n  async createModule(insertModule: InsertModule): Promise<Module> {\n    const id = randomUUID();\n    const module: Module = { \n      ...insertModule,\n      id,\n      platform: insertModule.platform || null,\n      requirements: insertModule.requirements || null,\n      options: insertModule.options || null,\n      references: insertModule.references || null,\n      author: insertModule.author || null,\n      reliable: insertModule.reliable !== undefined ? insertModule.reliable : true\n    };\n    this.modules.set(id, module);\n    return module;\n  }\n\n  async updateModule(id: string, update: Partial<InsertModule>): Promise<Module | undefined> {\n    const module = this.modules.get(id);\n    if (!module) return undefined;\n    \n    const updatedModule: Module = { ...module, ...update };\n    this.modules.set(id, updatedModule);\n    return updatedModule;\n  }\n\n  async deleteModule(id: string): Promise<boolean> {\n    return this.modules.delete(id);\n  }\n\n  // Listeners\n  async getListener(id: string): Promise<Listener | undefined> {\n    return this.listeners.get(id);\n  }\n\n  async getListeners(pagination?: Pagination): Promise<PaginatedResponse<Listener>> {\n    const listeners = Array.from(this.listeners.values()).sort((a, b) => \n      this.safeDate(b.createdAt).getTime() - this.safeDate(a.createdAt).getTime()\n    );\n    return this.paginate(listeners, pagination);\n  }\n\n  async getListenersByProtocol(protocol: string, pagination?: Pagination): Promise<PaginatedResponse<Listener>> {\n    const listeners = Array.from(this.listeners.values())\n      .filter(l => l.protocol === protocol)\n      .sort((a, b) => this.safeDate(b.createdAt).getTime() - this.safeDate(a.createdAt).getTime());\n    return this.paginate(listeners, pagination);\n  }\n\n  async createListener(insertListener: InsertListener): Promise<Listener> {\n    const id = randomUUID();\n    const listener: Listener = { \n      ...insertListener,\n      id,\n      createdAt: new Date(),\n      templateId: insertListener.templateId || null,\n      description: insertListener.description || null,\n      config: insertListener.config || null,\n      connectionCount: insertListener.connectionCount !== undefined ? insertListener.connectionCount : 0,\n      startedAt: insertListener.startedAt || null,\n      stoppedAt: insertListener.stoppedAt || null\n    };\n    this.listeners.set(id, listener);\n    return listener;\n  }\n\n  async updateListener(id: string, update: Partial<InsertListener>): Promise<Listener | undefined> {\n    const listener = this.listeners.get(id);\n    if (!listener) return undefined;\n    \n    const updatedListener: Listener = { ...listener, ...update };\n    this.listeners.set(id, updatedListener);\n    return updatedListener;\n  }\n\n  async deleteListener(id: string): Promise<boolean> {\n    return this.listeners.delete(id);\n  }\n\n  // Listener Templates\n  async getListenerTemplate(id: string): Promise<ListenerTemplate | undefined> {\n    return this.listenerTemplates.get(id);\n  }\n\n  async getListenerTemplates(pagination?: Pagination): Promise<PaginatedResponse<ListenerTemplate>> {\n    const templates = Array.from(this.listenerTemplates.values());\n    return this.paginate(templates, pagination);\n  }\n\n  async createListenerTemplate(insertTemplate: InsertListenerTemplate): Promise<ListenerTemplate> {\n    const id = randomUUID();\n    const template: ListenerTemplate = { \n      ...insertTemplate,\n      id,\n      description: insertTemplate.description || null,\n      defaultConfig: insertTemplate.defaultConfig || null\n    };\n    this.listenerTemplates.set(id, template);\n    return template;\n  }\n\n  async updateListenerTemplate(id: string, update: Partial<InsertListenerTemplate>): Promise<ListenerTemplate | undefined> {\n    const template = this.listenerTemplates.get(id);\n    if (!template) return undefined;\n    \n    const updatedTemplate: ListenerTemplate = { ...template, ...update };\n    this.listenerTemplates.set(id, updatedTemplate);\n    return updatedTemplate;\n  }\n\n  async deleteListenerTemplate(id: string): Promise<boolean> {\n    return this.listenerTemplates.delete(id);\n  }\n\n  // Reports\n  async getReport(id: string): Promise<Report | undefined> {\n    return this.reports.get(id);\n  }\n\n  async getReports(pagination?: Pagination): Promise<PaginatedResponse<Report>> {\n    const reports = Array.from(this.reports.values()).sort((a, b) => \n      this.safeDate(b.createdAt).getTime() - this.safeDate(a.createdAt).getTime()\n    );\n    return this.paginate(reports, pagination);\n  }\n\n  async getReportsByKind(kind: string, pagination?: Pagination): Promise<PaginatedResponse<Report>> {\n    const reports = Array.from(this.reports.values())\n      .filter(r => r.kind === kind)\n      .sort((a, b) => this.safeDate(b.createdAt).getTime() - this.safeDate(a.createdAt).getTime());\n    return this.paginate(reports, pagination);\n  }\n\n  async createReport(insertReport: InsertReport): Promise<Report> {\n    const id = randomUUID();\n    const now = new Date();\n    const report: Report = { \n      ...insertReport,\n      id,\n      createdAt: now,\n      updatedAt: now,\n      description: insertReport.description || null,\n      content: insertReport.content || null,\n      metadata: insertReport.metadata || null,\n      author: insertReport.author || null,\n      tags: insertReport.tags || null,\n      finalizedAt: insertReport.finalizedAt || null\n    };\n    this.reports.set(id, report);\n    return report;\n  }\n\n  async updateReport(id: string, update: Partial<InsertReport>): Promise<Report | undefined> {\n    const report = this.reports.get(id);\n    if (!report) return undefined;\n    \n    const updatedReport: Report = { \n      ...report, \n      ...update, \n      updatedAt: new Date() \n    };\n    this.reports.set(id, updatedReport);\n    return updatedReport;\n  }\n\n  async deleteReport(id: string): Promise<boolean> {\n    return this.reports.delete(id);\n  }\n\n  // Evidence\n  async getEvidence(id: string): Promise<Evidence | undefined> {\n    return this.evidence.get(id);\n  }\n\n  async getEvidenceByReportId(reportId: string, pagination?: Pagination): Promise<PaginatedResponse<Evidence>> {\n    const evidenceList = Array.from(this.evidence.values())\n      .filter(e => e.reportId === reportId)\n      .sort((a, b) => this.safeDate(b.createdAt).getTime() - this.safeDate(a.createdAt).getTime());\n    return this.paginate(evidenceList, pagination);\n  }\n\n  async createEvidence(insertEvidence: InsertEvidence): Promise<Evidence> {\n    const id = randomUUID();\n    const evidence: Evidence = { \n      ...insertEvidence,\n      id,\n      createdAt: new Date(),\n      path: insertEvidence.path || null,\n      blobRef: insertEvidence.blobRef || null,\n      note: insertEvidence.note || null,\n      size: insertEvidence.size || null,\n      hash: insertEvidence.hash || null,\n      metadata: insertEvidence.metadata || null\n    };\n    this.evidence.set(id, evidence);\n    return evidence;\n  }\n\n  async updateEvidence(id: string, update: Partial<InsertEvidence>): Promise<Evidence | undefined> {\n    const evidence = this.evidence.get(id);\n    if (!evidence) return undefined;\n    \n    const updatedEvidence: Evidence = { ...evidence, ...update };\n    this.evidence.set(id, updatedEvidence);\n    return updatedEvidence;\n  }\n\n  async deleteEvidence(id: string): Promise<boolean> {\n    return this.evidence.delete(id);\n  }\n\n  // Commands\n  async getCommand(id: string): Promise<Command | undefined> {\n    return this.commands.get(id);\n  }\n\n  async getCommands(pagination?: Pagination): Promise<PaginatedResponse<Command>> {\n    const commands = Array.from(this.commands.values()).sort((a, b) => \n      this.safeDate(b.createdAt).getTime() - this.safeDate(a.createdAt).getTime()\n    );\n    return this.paginate(commands, pagination);\n  }\n\n  async getCommandsBySessionId(sessionId: string, pagination?: Pagination): Promise<PaginatedResponse<Command>> {\n    const commands = Array.from(this.commands.values())\n      .filter(c => c.sessionId === sessionId)\n      .sort((a, b) => this.safeDate(b.createdAt).getTime() - this.safeDate(a.createdAt).getTime());\n    return this.paginate(commands, pagination);\n  }\n\n  async createCommand(insertCommand: InsertCommand): Promise<Command> {\n    const id = randomUUID();\n    const command: Command = { \n      ...insertCommand,\n      id,\n      createdAt: new Date(),\n      output: insertCommand.output || null,\n      error: insertCommand.error || null,\n      duration: insertCommand.duration || null,\n      startedAt: insertCommand.startedAt || null,\n      completedAt: insertCommand.completedAt || null\n    };\n    this.commands.set(id, command);\n    return command;\n  }\n\n  async updateCommand(id: string, update: Partial<InsertCommand>): Promise<Command | undefined> {\n    const command = this.commands.get(id);\n    if (!command) return undefined;\n    \n    const updatedCommand: Command = { ...command, ...update };\n    this.commands.set(id, updatedCommand);\n    return updatedCommand;\n  }\n\n  async deleteCommand(id: string): Promise<boolean> {\n    return this.commands.delete(id);\n  }\n\n  // Settings\n  async getSetting(key: string): Promise<Setting | undefined> {\n    return Array.from(this.settings.values()).find(s => s.key === key);\n  }\n\n  async getSettings(pagination?: Pagination): Promise<PaginatedResponse<Setting>> {\n    const settings = Array.from(this.settings.values()).sort((a, b) => a.key.localeCompare(b.key));\n    return this.paginate(settings, pagination);\n  }\n\n  async getSettingsByCategory(category: string, pagination?: Pagination): Promise<PaginatedResponse<Setting>> {\n    const settings = Array.from(this.settings.values())\n      .filter(s => s.category === category)\n      .sort((a, b) => a.key.localeCompare(b.key));\n    return this.paginate(settings, pagination);\n  }\n\n  async createSetting(insertSetting: InsertSetting): Promise<Setting> {\n    const id = randomUUID();\n    const setting: Setting = { \n      ...insertSetting,\n      id,\n      updatedAt: new Date(),\n      description: insertSetting.description || null,\n      category: insertSetting.category || \"general\"\n    };\n    this.settings.set(id, setting);\n    return setting;\n  }\n\n  async updateSetting(key: string, update: Partial<InsertSetting>): Promise<Setting | undefined> {\n    const setting = await this.getSetting(key);\n    if (!setting) return undefined;\n    \n    const updatedSetting: Setting = { \n      ...setting, \n      ...update, \n      updatedAt: new Date() \n    };\n    this.settings.set(setting.id, updatedSetting);\n    return updatedSetting;\n  }\n\n  async deleteSetting(key: string): Promise<boolean> {\n    const setting = await this.getSetting(key);\n    if (!setting) return false;\n    return this.settings.delete(setting.id);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":49066},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Existing users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Comprehensive client data schema for C2 management\nexport const clients = pgTable(\"clients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hostname: text(\"hostname\").notNull(),\n  ipAddress: text(\"ip_address\").notNull(),\n  macAddress: text(\"mac_address\"),\n  \n  // Operating System & Hardware\n  operatingSystem: text(\"operating_system\").notNull(),\n  osVersion: text(\"os_version\"),\n  architecture: text(\"architecture\"),\n  processorType: text(\"processor_type\"),\n  totalMemory: integer(\"total_memory\"), // in GB\n  \n  // Geographic & Network Location\n  country: text(\"country\"),\n  city: text(\"city\"),\n  region: text(\"region\"),\n  latitude: text(\"latitude\"),\n  longitude: text(\"longitude\"),\n  timezone: text(\"timezone\"),\n  \n  // Connection & Status\n  status: text(\"status\").notNull(), // online, offline, compromised, error\n  lastSeen: timestamp(\"last_seen\", { withTimezone: true }).defaultNow(),\n  firstSeen: timestamp(\"first_seen\", { withTimezone: true }).defaultNow(),\n  uptime: integer(\"uptime\"), // in seconds\n  connectionQuality: text(\"connection_quality\"), // excellent, good, fair, poor\n  \n  // Security & Privileges\n  currentUser: text(\"current_user\"),\n  isElevated: boolean(\"is_elevated\").default(false),\n  availablePrivileges: json(\"available_privileges\"), // array of privilege types\n  userAccounts: json(\"user_accounts\"), // array of user account objects\n  \n  // System Information\n  installedSoftware: json(\"installed_software\"), // array of software objects\n  runningProcesses: json(\"running_processes\"), // array of process objects\n  openPorts: json(\"open_ports\"), // array of port objects\n  networkInterfaces: json(\"network_interfaces\"), // array of network interface objects\n  \n  // Assessment & Classification\n  riskLevel: text(\"risk_level\"), // low, medium, high, critical\n  vulnerabilityCount: integer(\"vulnerability_count\").default(0),\n  difficulty: text(\"difficulty\"), // beginner, intermediate, advanced\n  \n  // Metadata\n  tags: json(\"tags\"), // array of strings\n  notes: text(\"notes\"),\n  isActive: boolean(\"is_active\").default(true),\n  \n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow(),\n});\n\nexport const insertClientSchema = createInsertSchema(clients).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertClient = z.infer<typeof insertClientSchema>;\nexport type Client = typeof clients.$inferSelect;\n\n// Session management schema\nexport const sessions = pgTable(\"sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").notNull(),\n  sessionType: text(\"session_type\").notNull(), // shell, file_manager, remote_desktop, surveillance\n  status: text(\"status\").notNull(), // active, inactive, terminated\n  \n  startedAt: timestamp(\"started_at\", { withTimezone: true }).defaultNow(),\n  lastActivity: timestamp(\"last_activity\", { withTimezone: true }).defaultNow(),\n  endedAt: timestamp(\"ended_at\", { withTimezone: true }),\n  \n  metadata: json(\"metadata\"), // session-specific data\n});\n\nexport const insertSessionSchema = createInsertSchema(sessions).omit({\n  id: true,\n  startedAt: true,\n  lastActivity: true,\n});\n\nexport type InsertSession = z.infer<typeof insertSessionSchema>;\nexport type Session = typeof sessions.$inferSelect;\n\n// Enhanced type definitions for frontend use\nexport interface ClientSystemInfo {\n  os: string;\n  version: string;\n  architecture: string;\n  processor: string;\n  memory: number;\n  uptime: number;\n}\n\nexport interface ClientLocation {\n  country: string;\n  city: string;\n  region: string;\n  latitude: number;\n  longitude: number;\n  timezone: string;\n}\n\nexport interface ClientUserAccount {\n  username: string;\n  isAdmin: boolean;\n  isActive: boolean;\n  lastLogin?: Date;\n  groups: string[];\n}\n\nexport interface ClientSoftware {\n  name: string;\n  version: string;\n  vendor: string;\n  installDate?: Date;\n  isSystemCritical: boolean;\n}\n\nexport interface ClientProcess {\n  pid: number;\n  name: string;\n  cpu: number;\n  memory: number;\n  user: string;\n  startTime: Date;\n}\n\nexport interface ClientNetworkInterface {\n  name: string;\n  type: string; // ethernet, wifi, vpn\n  ipAddress: string;\n  macAddress: string;\n  isActive: boolean;\n  speed?: number;\n}\n\nexport interface ClientPort {\n  port: number;\n  protocol: string; // TCP, UDP\n  state: string; // LISTENING, ESTABLISHED\n  service?: string;\n  processName?: string;\n}\n\n// ========================================\n// C2-CORE Platform Extensions\n// ========================================\n\n// Payloads Table\nexport const payloads = pgTable(\"payloads\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  platform: text(\"platform\").notNull(), // windows, linux, macos, web, mobile, multi\n  type: text(\"type\").notNull(), // executable, shellcode, dll, script, webshell, apk, ipa\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  config: json(\"config\"), // payload configuration options\n  size: integer(\"size\"), // file size in bytes\n  filePath: text(\"file_path\"),\n  isGenerated: boolean(\"is_generated\").default(false),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n});\n\nexport const insertPayloadSchema = createInsertSchema(payloads).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertPayload = z.infer<typeof insertPayloadSchema>;\nexport type Payload = typeof payloads.$inferSelect;\n\n// Exploits Table\nexport const exploits = pgTable(\"exploits\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  scope: text(\"scope\").notNull(), // local, remote, web\n  cve: text(\"cve\"),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  moduleRef: text(\"module_ref\"),\n  platform: json(\"platform\"), // array of supported platforms\n  severity: text(\"severity\").notNull(), // low, medium, high, critical\n  published: timestamp(\"published\", { withTimezone: true }),\n  verified: boolean(\"verified\").default(false),\n  tags: json(\"tags\"), // array of tags\n});\n\nexport const insertExploitSchema = createInsertSchema(exploits).omit({\n  id: true,\n});\n\nexport type InsertExploit = z.infer<typeof insertExploitSchema>;\nexport type Exploit = typeof exploits.$inferSelect;\n\n// Modules Table\nexport const modules = pgTable(\"modules\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  category: text(\"category\").notNull(), // post, persistence, priv-esc, lateral, recon, exfil, anti-forensics\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  platform: json(\"platform\"), // array of supported platforms\n  requirements: json(\"requirements\"), // array of requirements\n  options: json(\"options\"), // module options\n  references: json(\"references\"), // array of references\n  author: text(\"author\"),\n  reliable: boolean(\"reliable\").default(true),\n});\n\nexport const insertModuleSchema = createInsertSchema(modules).omit({\n  id: true,\n});\n\nexport type InsertModule = z.infer<typeof insertModuleSchema>;\nexport type Module = typeof modules.$inferSelect;\n\n// Listeners Table\nexport const listeners = pgTable(\"listeners\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  protocol: text(\"protocol\").notNull(), // http, https, tcp, udp, dns, smb\n  host: text(\"host\").notNull(),\n  port: integer(\"port\").notNull(),\n  status: text(\"status\").notNull(), // running, stopped, error\n  templateId: varchar(\"template_id\"),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  config: json(\"config\"), // listener configuration\n  connectionCount: integer(\"connection_count\").default(0),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n  startedAt: timestamp(\"started_at\", { withTimezone: true }),\n  stoppedAt: timestamp(\"stopped_at\", { withTimezone: true }),\n});\n\nexport const insertListenerSchema = createInsertSchema(listeners).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertListener = z.infer<typeof insertListenerSchema>;\nexport type Listener = typeof listeners.$inferSelect;\n\n// Listener Templates Table\nexport const listenerTemplates = pgTable(\"listener_templates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  protocol: text(\"protocol\").notNull(),\n  defaultConfig: json(\"default_config\"),\n  description: text(\"description\"),\n});\n\nexport const insertListenerTemplateSchema = createInsertSchema(listenerTemplates).omit({\n  id: true,\n});\n\nexport type InsertListenerTemplate = z.infer<typeof insertListenerTemplateSchema>;\nexport type ListenerTemplate = typeof listenerTemplates.$inferSelect;\n\n// Reports Table\nexport const reports = pgTable(\"reports\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  kind: text(\"kind\").notNull(), // executive, technical, timeline, evidence, screenshots, export\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  status: text(\"status\").notNull(), // draft, review, finalized, archived\n  content: text(\"content\"),\n  metadata: json(\"metadata\"),\n  author: text(\"author\"),\n  tags: json(\"tags\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow(),\n  finalizedAt: timestamp(\"finalized_at\", { withTimezone: true }),\n});\n\nexport const insertReportSchema = createInsertSchema(reports).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertReport = z.infer<typeof insertReportSchema>;\nexport type Report = typeof reports.$inferSelect;\n\n// Evidence Table\nexport const evidence = pgTable(\"evidence\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  reportId: varchar(\"report_id\").notNull(),\n  type: text(\"type\").notNull(), // file, screenshot, log, network, memory, disk\n  name: text(\"name\").notNull(),\n  path: text(\"path\"),\n  blobRef: text(\"blob_ref\"),\n  note: text(\"note\"),\n  size: integer(\"size\"),\n  hash: text(\"hash\"),\n  metadata: json(\"metadata\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n});\n\nexport const insertEvidenceSchema = createInsertSchema(evidence).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertEvidence = z.infer<typeof insertEvidenceSchema>;\nexport type Evidence = typeof evidence.$inferSelect;\n\n// Commands Table\nexport const commands = pgTable(\"commands\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: varchar(\"session_id\").notNull(),\n  command: text(\"command\").notNull(),\n  status: text(\"status\").notNull(), // pending, running, completed, failed, cancelled\n  output: text(\"output\"),\n  error: text(\"error\"),\n  duration: integer(\"duration\"), // in milliseconds\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow(),\n  startedAt: timestamp(\"started_at\", { withTimezone: true }),\n  completedAt: timestamp(\"completed_at\", { withTimezone: true }),\n});\n\nexport const insertCommandSchema = createInsertSchema(commands).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertCommand = z.infer<typeof insertCommandSchema>;\nexport type Command = typeof commands.$inferSelect;\n\n// Settings Table\nexport const settings = pgTable(\"settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  key: text(\"key\").notNull().unique(),\n  value: text(\"value\").notNull(),\n  description: text(\"description\"),\n  category: text(\"category\").default(\"general\"),\n  updatedAt: timestamp(\"updated_at\", { withTimezone: true }).defaultNow(),\n});\n\nexport const insertSettingSchema = createInsertSchema(settings).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport type InsertSetting = z.infer<typeof insertSettingSchema>;\nexport type Setting = typeof settings.$inferSelect;\n\n// ========================================\n// Zod Validation Schemas\n// ========================================\n\n// Status enums\nexport const SessionStatus = z.enum([\"active\", \"inactive\", \"reconnecting\", \"terminated\"]);\nexport const ListenerStatus = z.enum([\"running\", \"stopped\", \"error\"]);\nexport const CommandStatus = z.enum([\"pending\", \"running\", \"completed\", \"failed\", \"cancelled\"]);\nexport const ReportStatus = z.enum([\"draft\", \"review\", \"finalized\", \"archived\"]);\n\n// Platform enums\nexport const PayloadPlatform = z.enum([\"windows\", \"linux\", \"macos\", \"web\", \"mobile\", \"multi\"]);\nexport const ExploitScope = z.enum([\"local\", \"remote\", \"web\"]);\nexport const ModuleCategory = z.enum([\"post\", \"persistence\", \"priv-esc\", \"lateral\", \"recon\", \"exfil\", \"anti-forensics\"]);\nexport const ListenerProtocol = z.enum([\"http\", \"https\", \"tcp\", \"udp\", \"dns\", \"smb\"]);\n\n// ========================================\n// API Response Types\n// ========================================\nexport const ApiResponseSchema = <T extends z.ZodType>(dataSchema: T) =>\n  z.object({\n    success: z.boolean(),\n    data: dataSchema.optional(),\n    error: z.string().optional(),\n    message: z.string().optional(),\n  });\n\nexport type ApiResponse<T> = {\n  success: boolean;\n  data?: T;\n  error?: string;\n  message?: string;\n};\n\n// Pagination\nexport const PaginationSchema = z.object({\n  page: z.number().min(1).default(1),\n  limit: z.number().min(1).max(100).default(20),\n  total: z.number().optional(),\n  totalPages: z.number().optional(),\n});\n\nexport type Pagination = z.infer<typeof PaginationSchema>;\n\nexport const PaginatedResponseSchema = <T extends z.ZodType>(dataSchema: T) =>\n  z.object({\n    success: z.boolean(),\n    data: z.array(dataSchema).optional(),\n    pagination: PaginationSchema.optional(),\n    error: z.string().optional(),\n    message: z.string().optional(),\n  });\n\nexport type PaginatedResponse<T> = {\n  success: boolean;\n  data?: T[];\n  pagination?: Pagination;\n  error?: string;\n  message?: string;\n};\n","size_bytes":14391},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { TopNavbar } from \"@/components/TopNavbar\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport ClientsPage from \"@/pages/ClientsPage\";\nimport TerminalPage from \"@/pages/TerminalPage\";\nimport NetworkPage from \"@/pages/NetworkPage\";\nimport ScenariosPage from \"@/pages/ScenariosPage\";\nimport TelemetryPage from \"@/pages/TelemetryPage\";\nimport NotFound from \"@/pages/not-found\";\n\n// Sessions Pages\nimport AllSessionsPage from \"@/pages/sessions/AllSessionsPage\";\nimport ActiveSessionsPage from \"@/pages/sessions/ActiveSessionsPage\";\nimport SessionHistoryPage from \"@/pages/sessions/SessionHistoryPage\";\nimport NewSessionPage from \"@/pages/sessions/NewSessionPage\";\nimport SessionSettingsPage from \"@/pages/sessions/SessionSettingsPage\";\n\n// Payloads Pages\nimport WindowsPayloadsPage from \"@/pages/payloads/WindowsPayloadsPage\";\nimport LinuxPayloadsPage from \"@/pages/payloads/LinuxPayloadsPage\";\nimport MacOSPayloadsPage from \"@/pages/payloads/MacOSPayloadsPage\";\nimport WebPayloadsPage from \"@/pages/payloads/WebPayloadsPage\";\nimport MobilePayloadsPage from \"@/pages/payloads/MobilePayloadsPage\";\nimport PayloadGeneratorPage from \"@/pages/payloads/PayloadGeneratorPage\";\n\n// Exploits Pages\nimport LocalExploitsPage from \"@/pages/exploits/LocalExploitsPage\";\nimport RemoteExploitsPage from \"@/pages/exploits/RemoteExploitsPage\";\nimport WebExploitsPage from \"@/pages/exploits/WebExploitsPage\";\nimport SearchExploitsPage from \"@/pages/exploits/SearchExploitsPage\";\nimport ExploitHistoryPage from \"@/pages/exploits/ExploitHistoryPage\";\n\n// Modules Pages\nimport PostExploitationPage from \"@/pages/modules/PostExploitationPage\";\nimport PersistencePage from \"@/pages/modules/PersistencePage\";\nimport PrivilegeEscalationPage from \"@/pages/modules/PrivilegeEscalationPage\";\nimport LateralMovementPage from \"@/pages/modules/LateralMovementPage\";\nimport ReconnaissancePage from \"@/pages/modules/ReconnaissancePage\";\nimport DataExfiltrationPage from \"@/pages/modules/DataExfiltrationPage\";\nimport AntiForensicsPage from \"@/pages/modules/AntiForensicsPage\";\n\n// Listeners Pages\nimport HTTPListenersPage from \"@/pages/listeners/HTTPListenersPage\";\nimport HTTPSListenersPage from \"@/pages/listeners/HTTPSListenersPage\";\nimport TCPListenersPage from \"@/pages/listeners/TCPListenersPage\";\nimport UDPListenersPage from \"@/pages/listeners/UDPListenersPage\";\nimport DNSListenersPage from \"@/pages/listeners/DNSListenersPage\";\nimport SMBListenersPage from \"@/pages/listeners/SMBListenersPage\";\nimport ListenerManagerPage from \"@/pages/listeners/ListenerManagerPage\";\nimport ListenerTemplatesPage from \"@/pages/listeners/ListenerTemplatesPage\";\n\n// Reports Pages\nimport ExecutiveSummaryPage from \"@/pages/reports/ExecutiveSummaryPage\";\nimport TechnicalReportPage from \"@/pages/reports/TechnicalReportPage\";\nimport AttackTimelinePage from \"@/pages/reports/AttackTimelinePage\";\nimport EvidenceCollectionPage from \"@/pages/reports/EvidenceCollectionPage\";\nimport ScreenshotsPage from \"@/pages/reports/ScreenshotsPage\";\nimport ExportDataPage from \"@/pages/reports/ExportDataPage\";\n\nimport { useEffect } from \"react\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/clients\" component={ClientsPage} />\n      <Route path=\"/remote-access\" component={TerminalPage} />\n      <Route path=\"/network\" component={NetworkPage} />\n      <Route path=\"/scenarios\" component={ScenariosPage} />\n      <Route path=\"/telemetry\" component={TelemetryPage} />\n\n      {/* Sessions Routes */}\n      <Route path=\"/sessions/all\" component={AllSessionsPage} />\n      <Route path=\"/sessions/active\" component={ActiveSessionsPage} />\n      <Route path=\"/sessions/history\" component={SessionHistoryPage} />\n      <Route path=\"/sessions/new\" component={NewSessionPage} />\n      <Route path=\"/sessions/settings\" component={SessionSettingsPage} />\n\n      {/* Payloads Routes */}\n      <Route path=\"/payloads/windows\" component={WindowsPayloadsPage} />\n      <Route path=\"/payloads/linux\" component={LinuxPayloadsPage} />\n      <Route path=\"/payloads/macos\" component={MacOSPayloadsPage} />\n      <Route path=\"/payloads/web\" component={WebPayloadsPage} />\n      <Route path=\"/payloads/mobile\" component={MobilePayloadsPage} />\n      <Route path=\"/payloads/generator\" component={PayloadGeneratorPage} />\n\n      {/* Exploits Routes */}\n      <Route path=\"/exploits/local\" component={LocalExploitsPage} />\n      <Route path=\"/exploits/remote\" component={RemoteExploitsPage} />\n      <Route path=\"/exploits/web\" component={WebExploitsPage} />\n      <Route path=\"/exploits/search\" component={SearchExploitsPage} />\n      <Route path=\"/exploits/history\" component={ExploitHistoryPage} />\n\n      {/* Modules Routes */}\n      <Route path=\"/modules/post-exploitation\" component={PostExploitationPage} />\n      <Route path=\"/modules/persistence\" component={PersistencePage} />\n      <Route path=\"/modules/privilege-escalation\" component={PrivilegeEscalationPage} />\n      <Route path=\"/modules/lateral-movement\" component={LateralMovementPage} />\n      <Route path=\"/modules/reconnaissance\" component={ReconnaissancePage} />\n      <Route path=\"/modules/data-exfiltration\" component={DataExfiltrationPage} />\n      <Route path=\"/modules/anti-forensics\" component={AntiForensicsPage} />\n\n      {/* Listeners Routes */}\n      <Route path=\"/listeners/http\" component={HTTPListenersPage} />\n      <Route path=\"/listeners/https\" component={HTTPSListenersPage} />\n      <Route path=\"/listeners/tcp\" component={TCPListenersPage} />\n      <Route path=\"/listeners/udp\" component={UDPListenersPage} />\n      <Route path=\"/listeners/dns\" component={DNSListenersPage} />\n      <Route path=\"/listeners/smb\" component={SMBListenersPage} />\n      <Route path=\"/listeners/manager\" component={ListenerManagerPage} />\n      <Route path=\"/listeners/templates\" component={ListenerTemplatesPage} />\n\n      {/* Reports Routes */}\n      <Route path=\"/reports/executive-summary\" component={ExecutiveSummaryPage} />\n      <Route path=\"/reports/technical-report\" component={TechnicalReportPage} />\n      <Route path=\"/reports/attack-timeline\" component={AttackTimelinePage} />\n      <Route path=\"/reports/evidence-collection\" component={EvidenceCollectionPage} />\n      <Route path=\"/reports/screenshots\" component={ScreenshotsPage} />\n      <Route path=\"/reports/export-data\" component={ExportDataPage} />\n\n      {/* Legacy routes with placeholder components */}\n      <Route path=\"/surveillance\" component={() => <div className=\"container-responsive py-6\"><div className=\"text-center py-20\"><h1 className=\"text-2xl font-semibold mb-4\">Surveillance & Monitoring</h1><p className=\"text-muted-foreground\">Advanced surveillance features coming soon...</p></div></div>} />\n      <Route path=\"/post-exploitation\" component={() => <div className=\"container-responsive py-6\"><div className=\"text-center py-20\"><h1 className=\"text-2xl font-semibold mb-4\">Post-Exploitation Tools</h1><p className=\"text-muted-foreground\">Advanced exploitation tools coming soon...</p></div></div>} />\n      <Route path=\"/automation\" component={() => <div className=\"container-responsive py-6\"><div className=\"text-center py-20\"><h1 className=\"text-2xl font-semibold mb-4\">Automation & Tasking</h1><p className=\"text-muted-foreground\">Command automation features coming soon...</p></div></div>} />\n      <Route path=\"/batch\" component={() => <div className=\"container-responsive py-6\"><div className=\"text-center py-20\"><h1 className=\"text-2xl font-semibold mb-4\">Batch Operations</h1><p className=\"text-muted-foreground\">Advanced batch command execution coming soon...</p></div></div>} />\n      <Route path=\"/analysis\" component={() => <div className=\"container-responsive py-6\"><div className=\"text-center py-20\"><h1 className=\"text-2xl font-semibold mb-4\">Analysis & Intelligence</h1><p className=\"text-muted-foreground\">Data analysis and intelligence tools coming soon...</p></div></div>} />\n      <Route path=\"/reports\" component={() => <div className=\"container-responsive py-6\"><div className=\"text-center py-20\"><h1 className=\"text-2xl font-semibold mb-4\">Reports & Documentation</h1><p className=\"text-muted-foreground\">Operational reports and documentation coming soon...</p></div></div>} />\n      <Route path=\"/users\" component={() => <div className=\"container-responsive py-6\"><div className=\"text-center py-20\"><h1 className=\"text-2xl font-semibold mb-4\">User Management</h1><p className=\"text-muted-foreground\">User access control and management coming soon...</p></div></div>} />\n      <Route path=\"/logs\" component={() => <div className=\"container-responsive py-6\"><div className=\"text-center py-20\"><h1 className=\"text-2xl font-semibold mb-4\">System Logs</h1><p className=\"text-muted-foreground\">Comprehensive system logging and audit trails coming soon...</p></div></div>} />\n      <Route path=\"/resources\" component={() => <div className=\"container-responsive py-6\"><div className=\"text-center py-20\"><h1 className=\"text-2xl font-semibold mb-4\">Resources</h1><p className=\"text-muted-foreground\">Resources page coming soon...</p></div></div>} />\n      <Route path=\"/settings\" component={() => <div className=\"container-responsive py-6\"><div className=\"text-center py-20\"><h1 className=\"text-2xl font-semibold mb-4\">Settings</h1><p className=\"text-muted-foreground\">Settings page coming soon...</p></div></div>} />\n\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  // Initialize dark mode\n  useEffect(() => {\n    document.documentElement.classList.add('dark');\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen w-full bg-background text-foreground\">\n          <TopNavbar />\n          <main className=\"w-full\">\n            <Router />\n          </main>\n        </div>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":10198},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE - Clean Government Style */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 220 15% 97%;\n  --foreground: 224 16% 15%;\n  --border: 220 10% 85%;\n\n  --card: 220 10% 95%;\n  --card-foreground: 224 16% 18%;\n  --card-border: 220 10% 82%;\n\n  --sidebar: 220 12% 92%;\n  --sidebar-foreground: 224 16% 20%;\n  --sidebar-border: 220 10% 80%;\n\n  --sidebar-primary: 215 85% 45%;\n  --sidebar-primary-foreground: 220 20% 98%;\n\n  --sidebar-accent: 220 15% 88%;\n  --sidebar-accent-foreground: 224 16% 22%;\n\n  --sidebar-ring: 215 85% 45%;\n\n  --popover: 220 12% 92%;\n  --popover-foreground: 224 16% 18%;\n  --popover-border: 220 10% 78%;\n\n  --primary: 215 85% 45%;\n  --primary-foreground: 220 20% 98%;\n\n  --secondary: 220 12% 88%;\n  --secondary-foreground: 224 16% 25%;\n\n  --muted: 220 10% 90%;\n  --muted-foreground: 220 15% 45%;\n\n  --accent: 215 70% 50%;\n  --accent-foreground: 220 20% 98%;\n\n  --destructive: 358 75% 55%;\n  --destructive-foreground: 220 20% 98%;\n\n  --input: 220 15% 80%;\n  --ring: 215 85% 45%;\n  --chart-1: 215 85% 45%;\n  --chart-2: 25 85% 55%;\n  --chart-3: 358 75% 55%;\n  --chart-4: 280 70% 50%;\n  --chart-5: 45 70% 50%;\n\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: 'Georgia', serif;\n  --font-mono: 'JetBrains Mono', 'Consolas', monospace;\n  --radius: .375rem; /* 6px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(224 16% 15% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(224 16% 15% / 0.06);\n  --shadow-sm: 0px 1px 3px 0px hsl(224 16% 15% / 0.08), 0px 1px 2px -1px hsl(224 16% 15% / 0.08);\n  --shadow: 0px 1px 3px 0px hsl(224 16% 15% / 0.10), 0px 1px 2px -1px hsl(224 16% 15% / 0.10);\n  --shadow-md: 0px 4px 6px -1px hsl(224 16% 15% / 0.08), 0px 2px 4px -2px hsl(224 16% 15% / 0.08);\n  --shadow-lg: 0px 10px 15px -3px hsl(224 16% 15% / 0.08), 0px 4px 6px -4px hsl(224 16% 15% / 0.08);\n  --shadow-xl: 0px 20px 25px -5px hsl(224 16% 15% / 0.08), 0px 8px 10px -6px hsl(224 16% 15% / 0.08);\n  --shadow-2xl: 0px 25px 50px -12px hsl(224 16% 15% / 0.20);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n/* DARK MODE - Professional Government Style */\n.dark {\n  --button-outline: rgba(255, 255, 255, .08);\n  --badge-outline: rgba(255, 255, 255, .05);\n\n  --opaque-button-border-intensity: 8;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255, 255, 255, .04);\n  --elevate-2: rgba(255, 255, 255, .08);\n\n  --background: 224 20% 8%;\n  --foreground: 220 20% 92%;\n  --border: 224 20% 18%;\n\n  --card: 224 18% 12%;\n  --card-foreground: 220 20% 88%;\n  --card-border: 224 18% 20%;\n\n  --sidebar: 224 22% 10%;\n  --sidebar-foreground: 220 20% 85%;\n  --sidebar-border: 224 20% 16%;\n\n  --sidebar-primary: 215 85% 55%;\n  --sidebar-primary-foreground: 224 20% 95%;\n\n  --sidebar-accent: 224 15% 15%;\n  --sidebar-accent-foreground: 220 18% 80%;\n\n  --sidebar-ring: 215 85% 55%;\n\n  --popover: 224 18% 14%;\n  --popover-foreground: 220 20% 85%;\n  --popover-border: 224 16% 25%;\n\n  --primary: 215 85% 55%;\n  --primary-foreground: 224 20% 95%;\n\n  --secondary: 224 15% 18%;\n  --secondary-foreground: 220 18% 75%;\n\n  --muted: 224 15% 16%;\n  --muted-foreground: 220 12% 60%;\n\n  --accent: 215 70% 60%;\n  --accent-foreground: 224 20% 95%;\n\n  --destructive: 358 75% 60%;\n  --destructive-foreground: 224 20% 95%;\n\n  /* Used as the border around inputs. Dark mode: Should be a border that is light enough to have high contrast when rendered on a --card background. More contrast than standard --border */\n  --input: 224 16% 25%;\n  --ring: 215 85% 55%;\n  --chart-1: 215 85% 60%;\n  --chart-2: 25 85% 65%;\n  --chart-3: 358 75% 65%;\n  --chart-4: 280 70% 65%;\n  --chart-5: 45 70% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(224 20% 5% / 0.15);\n  --shadow-xs: 0px 1px 3px 0px hsl(224 20% 5% / 0.20);\n  --shadow-sm: 0px 1px 3px 0px hsl(224 20% 5% / 0.25), 0px 1px 2px -1px hsl(224 20% 5% / 0.25);\n  --shadow: 0px 1px 3px 0px hsl(224 20% 5% / 0.30), 0px 1px 2px -1px hsl(224 20% 5% / 0.30);\n  --shadow-md: 0px 4px 6px -1px hsl(224 20% 5% / 0.30), 0px 2px 4px -2px hsl(224 20% 5% / 0.30);\n  --shadow-lg: 0px 10px 15px -3px hsl(224 20% 5% / 0.30), 0px 4px 6px -4px hsl(224 20% 5% / 0.30);\n  --shadow-xl: 0px 20px 25px -5px hsl(224 20% 5% / 0.30), 0px 8px 10px -6px hsl(224 20% 5% / 0.30);\n  --shadow-2xl: 0px 25px 50px -12px hsl(224 20% 5% / 0.40);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Clean elevation system for professional UI\n * No glow effects - just subtle background changes\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n  /**\n   * Professional elevation system - clean and minimal\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n\n  /* Professional Status Indicators */\n  .status-online {\n    background: hsl(var(--chart-2));\n  }\n\n  .status-compromised {\n    background: hsl(var(--chart-5));\n  }\n\n  .status-critical {\n    background: hsl(var(--destructive));\n  }\n\n  .status-offline {\n    background: hsl(var(--muted-foreground));\n  }\n\n  /* Clean Professional Typography */\n  .gov-header {\n    font-family: var(--font-sans);\n    font-weight: 600;\n    letter-spacing: -0.025em;\n    line-height: 1.2;\n  }\n\n  .gov-body {\n    font-family: var(--font-sans);\n    font-weight: 400;\n    line-height: 1.5;\n  }\n\n  .gov-mono {\n    font-family: var(--font-mono);\n    font-weight: 400;\n    letter-spacing: 0.025em;\n  }\n\n  /* Government Classification Styling */\n  .classification-banner {\n    background: linear-gradient(90deg, hsl(var(--destructive)) 0%, hsl(var(--destructive) / 0.8) 100%);\n    color: hsl(var(--destructive-foreground));\n    font-family: var(--font-mono);\n    font-weight: 600;\n    font-size: 11px;\n    letter-spacing: 0.5px;\n    text-align: center;\n    padding: 4px 12px;\n    border: 1px solid hsl(var(--destructive-border));\n  }\n\n  .classification-simulation {\n    background: linear-gradient(90deg, hsl(25 85% 55%) 0%, hsl(25 85% 55% / 0.8) 100%);\n    color: white;\n    border-color: hsl(25 85% 45%);\n  }\n\n  /* Professional Grid System */\n  .gov-grid {\n    display: grid;\n    gap: 1.5rem;\n    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n  }\n\n  /* Clean Card Styling */\n  .gov-card {\n    background: hsl(var(--card));\n    border: 1px solid hsl(var(--card-border));\n    border-radius: var(--radius);\n    box-shadow: var(--shadow-sm);\n    transition: all 0.2s ease-in-out;\n  }\n\n  .gov-card:hover {\n    box-shadow: var(--shadow-md);\n    border-color: hsl(var(--border));\n  }\n\n  /* Professional Button Variants */\n  .btn-primary {\n    background: hsl(var(--primary));\n    color: hsl(var(--primary-foreground));\n    border: 1px solid hsl(var(--primary-border));\n  }\n\n  .btn-secondary {\n    background: hsl(var(--secondary));\n    color: hsl(var(--secondary-foreground));\n    border: 1px solid hsl(var(--secondary-border));\n  }\n\n  /* Clean Terminal Styling */\n  .terminal-clean {\n    background: hsl(224 25% 8%);\n    color: hsl(220 20% 90%);\n    font-family: var(--font-mono);\n    border: 1px solid hsl(224 20% 18%);\n  }\n\n  .terminal-prompt {\n    color: hsl(215 85% 60%);\n  }\n\n  .terminal-success {\n    color: hsl(142 76% 60%);\n  }\n\n  .terminal-error {\n    color: hsl(358 75% 65%);\n  }\n\n  .terminal-info {\n    color: hsl(220 90% 70%);\n  }\n\n  /* Responsive Design Utilities */\n  .container-responsive {\n    max-width: 100%;\n    margin: 0 auto;\n    padding: 0 1rem;\n  }\n\n  @screen sm {\n    .container-responsive {\n      max-width: 640px;\n    }\n  }\n\n  @screen md {\n    .container-responsive {\n      max-width: 768px;\n      padding: 0 1.5rem;\n    }\n  }\n\n  @screen lg {\n    .container-responsive {\n      max-width: 1024px;\n      padding: 0 2rem;\n    }\n  }\n\n  @screen xl {\n    .container-responsive {\n      max-width: 1280px;\n    }\n  }\n\n  @screen 2xl {\n    .container-responsive {\n      max-width: 1536px;\n    }\n  }\n}","size_bytes":12556},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AppSidebar.tsx":{"content":"import { Shield, Terminal, Network, Target, BookOpen, Activity, Settings, Play, Clock } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useState, useEffect } from \"react\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar\";\n\nconst menuItems = [\n  {\n    title: \"Command Center\",\n    url: \"/\",\n    icon: Shield,\n  },\n  {\n    title: \"Target Assets\",\n    url: \"/targets\",\n    icon: Target,\n  },\n  {\n    title: \"Remote Shell\",\n    url: \"/terminal\",\n    icon: Terminal,\n  },\n  {\n    title: \"Network Recon\",\n    url: \"/network\",\n    icon: Network,\n  },\n  {\n    title: \"Attack Scenarios\",\n    url: \"/scenarios\",\n    icon: Play,\n  },\n  {\n    title: \"Threat Intel\",\n    url: \"/resources\",\n    icon: BookOpen,\n  },\n  {\n    title: \"Monitoring\",\n    url: \"/telemetry\",\n    icon: Activity,\n  },\n  {\n    title: \"Operations\",\n    url: \"/settings\",\n    icon: Settings,\n  },\n];\n\nexport function AppSidebar() {\n  const [location] = useLocation();\n  const [currentTime, setCurrentTime] = useState(new Date());\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  const formatTime = (date: Date) => {\n    return date.toLocaleTimeString('en-US', {\n      hour12: false,\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    });\n  };\n\n  const formatDate = (date: Date) => {\n    return date.toLocaleDateString('en-US', {\n      weekday: 'short',\n      month: 'short',\n      day: '2-digit',\n      year: 'numeric'\n    });\n  };\n\n  return (\n    <Sidebar data-testid=\"sidebar-main\" className=\"cyber-border\">\n      <SidebarContent className=\"hud-overlay\">\n        <SidebarGroup>\n          <SidebarGroupLabel className=\"text-primary font-mono text-sm tactical-font neon-glow tracking-wider\">\n            ◢ RED TEAM C2 ◣<br />\n            <span className=\"text-xs text-muted-foreground\">ADVERSARY SIMULATION</span>\n          </SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton \n                    asChild \n                    isActive={location === item.url}\n                    className={`tactical-font hover:neon-glow transition-all duration-200 ${\n                      location === item.url ? 'cyber-border neon-glow' : ''\n                    }`}\n                  >\n                    <Link href={item.url} data-testid={`link-${item.title.toLowerCase().replace(' ', '-')}`}>\n                      <item.icon className=\"w-4 h-4\" />\n                      <span className=\"tracking-wide\">{item.title.toUpperCase()}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n        \n        {/* Digital Time Display */}\n        <SidebarGroup>\n          <div className=\"p-4 mx-2 bg-primary/5 border border-primary/20 rounded-lg backdrop-blur-sm\">\n            <div className=\"text-center space-y-2\">\n              <div className=\"flex items-center justify-center gap-2 text-primary/70 text-xs font-mono tracking-wider\">\n                <Clock className=\"w-3 h-3\" />\n                <span>OPERATION TIME</span>\n              </div>\n              <div className=\"font-mono text-lg font-bold text-primary neon-glow tracking-wider\">\n                {formatTime(currentTime)}\n              </div>\n              <div className=\"text-xs text-muted-foreground font-mono tracking-wide\">\n                {formatDate(currentTime)}\n              </div>\n            </div>\n          </div>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  );\n}","size_bytes":3917},"client/src/components/ClientCard.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Monitor, Wifi, WifiOff, Shield, AlertTriangle, CheckCircle, \n  Server, Globe, Lock, Users, HardDrive, Activity, Eye, Terminal,\n  MapPin, Clock, Cpu, MemoryStick, User, Crown, Database,\n  Network, Zap, FileText, Settings, Play, Square, MoreVertical\n} from \"lucide-react\";\nimport type { Client } from '@shared/schema';\n\ninterface ClientCardProps extends Client {\n  onConnect?: (clientId: string, connectionType: string) => void;\n  onViewDetails?: (clientId: string) => void;\n  onSelect?: (clientId: string, selected: boolean) => void;\n  isSelected?: boolean;\n}\n\nexport function ClientCard({ \n  id, hostname, ipAddress, operatingSystem, osVersion, architecture,\n  country, city, status, lastSeen, uptime, currentUser, isElevated,\n  userAccounts, riskLevel, vulnerabilityCount, difficulty, tags,\n  connectionQuality, totalMemory, processorType, notes,\n  onConnect, onViewDetails, onSelect, isSelected = false\n}: ClientCardProps) {\n  const statusConfig = {\n    online: { \n      color: 'text-green-600 dark:text-green-400', \n      icon: Wifi, \n      text: 'Online',\n      bgColor: 'bg-green-50 dark:bg-green-950',\n      borderColor: 'border-green-200 dark:border-green-800',\n      dotColor: 'status-online'\n    },\n    offline: { \n      color: 'text-gray-500 dark:text-gray-400', \n      icon: WifiOff, \n      text: 'Offline',\n      bgColor: 'bg-gray-50 dark:bg-gray-900',\n      borderColor: 'border-gray-200 dark:border-gray-700',\n      dotColor: 'status-offline'\n    },\n    compromised: { \n      color: 'text-amber-600 dark:text-amber-400', \n      icon: AlertTriangle, \n      text: 'Compromised',\n      bgColor: 'bg-amber-50 dark:bg-amber-950',\n      borderColor: 'border-amber-200 dark:border-amber-800',\n      dotColor: 'status-compromised'\n    },\n    error: {\n      color: 'text-red-600 dark:text-red-400', \n      icon: AlertTriangle, \n      text: 'Error',\n      bgColor: 'bg-red-50 dark:bg-red-950',\n      borderColor: 'border-red-200 dark:border-red-800',\n      dotColor: 'status-critical'\n    }\n  };\n\n  const riskConfig = {\n    low: { color: 'text-green-700 dark:text-green-300', variant: 'outline' as const },\n    medium: { color: 'text-amber-700 dark:text-amber-300', variant: 'secondary' as const },\n    high: { color: 'text-red-700 dark:text-red-300', variant: 'default' as const },\n    critical: { color: 'text-red-800 dark:text-red-200', variant: 'destructive' as const }\n  };\n\n  type ConnectionQuality = 'excellent' | 'good' | 'fair' | 'poor';\n  \n  const qualityConfig: Record<ConnectionQuality, { progress: number; color: string }> = {\n    excellent: { progress: 95, color: 'text-green-600' },\n    good: { progress: 75, color: 'text-blue-600' },\n    fair: { progress: 50, color: 'text-amber-600' },\n    poor: { progress: 25, color: 'text-red-600' }\n  };\n\n  const getOSIcon = (os: string) => {\n    const osLower = os.toLowerCase();\n    if (osLower.includes('windows')) return '🪟';\n    if (osLower.includes('linux') || osLower.includes('ubuntu') || osLower.includes('debian')) return '🐧';\n    if (osLower.includes('mac') || osLower.includes('darwin')) return '🍎';\n    if (osLower.includes('android')) return '🤖';\n    if (osLower.includes('ios')) return '📱';\n    return '💻';\n  };\n\n  const formatUptime = (seconds: number) => {\n    if (!seconds) return 'N/A';\n    const days = Math.floor(seconds / 86400);\n    const hours = Math.floor((seconds % 86400) / 3600);\n    return `${days}d ${hours}h`;\n  };\n\n  const formatLastSeen = (timestamp: Date) => {\n    if (!timestamp) return 'Never';\n    const now = new Date();\n    const diff = now.getTime() - new Date(timestamp).getTime();\n    const minutes = Math.floor(diff / 60000);\n    const hours = Math.floor(diff / 3600000);\n    const days = Math.floor(diff / 86400000);\n    \n    if (days > 0) return `${days}d ago`;\n    if (hours > 0) return `${hours}h ago`;\n    if (minutes > 0) return `${minutes}m ago`;\n    return 'Now';\n  };\n\n  const handleConnect = (type: string) => {\n    if (onConnect) onConnect(id, type);\n  };\n\n  const handleViewDetails = () => {\n    if (onViewDetails) onViewDetails(id);\n  };\n\n  const handleSelect = () => {\n    if (onSelect) onSelect(id, !isSelected);\n  };\n\n  const StatusIcon = statusConfig[status as keyof typeof statusConfig]?.icon || Monitor;\n  const currentConfig = statusConfig[status as keyof typeof statusConfig] || statusConfig.offline;\n  \n  // Pre-calculate connection quality values for type safety\n  const isValidConnectionQuality = connectionQuality && (connectionQuality in qualityConfig);\n  const connectionQualityColor = isValidConnectionQuality \n    ? qualityConfig[connectionQuality as ConnectionQuality].color \n    : 'text-muted-foreground';\n  const connectionQualityProgress = isValidConnectionQuality \n    ? qualityConfig[connectionQuality as ConnectionQuality].progress \n    : 0;\n  const connectionQualityDisplayText = connectionQuality?.toUpperCase() || 'UNKNOWN';\n  \n  return (\n    <Card \n      className={`gov-card transition-all duration-200 ${currentConfig.borderColor} hover:shadow-lg ${\n        isSelected ? 'ring-2 ring-primary ring-offset-2' : ''\n      }`} \n      data-testid={`card-client-${id}`}\n    >\n      <CardHeader className=\"pb-3\">\n        {/* Header with selection and status */}\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-start gap-3 flex-1\">\n            <input\n              type=\"checkbox\"\n              checked={isSelected}\n              onChange={handleSelect}\n              className=\"mt-1 h-4 w-4 text-primary focus:ring-primary border-border rounded\"\n              data-testid={`checkbox-select-${id}`}\n            />\n            <div className={`p-2 rounded-lg ${currentConfig.bgColor}`}>\n              <Server className={`w-5 h-5 ${currentConfig.color}`} />\n            </div>\n            <div className=\"space-y-1 flex-1\">\n              <div className=\"flex items-center gap-2\">\n                <CardTitle className=\"text-base font-semibold gov-header\">{hostname}</CardTitle>\n                <span className=\"text-lg\" title={operatingSystem}>{getOSIcon(operatingSystem)}</span>\n              </div>\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <Globe className=\"w-3 h-3\" />\n                <span className=\"font-mono\">{ipAddress}</span>\n                {country && city && (\n                  <>\n                    <Separator orientation=\"vertical\" className=\"h-3\" />\n                    <MapPin className=\"w-3 h-3\" />\n                    <span>{city}, {country}</span>\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className={`w-2 h-2 rounded-full ${currentConfig.dotColor}`}></div>\n            <StatusIcon className={`w-4 h-4 ${currentConfig.color}`} />\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {/* System Information Grid */}\n        <div className=\"grid grid-cols-2 gap-3 text-xs\">\n          <div className=\"space-y-1\">\n            <span className=\"text-muted-foreground uppercase tracking-wide\">OS & Arch</span>\n            <p className=\"font-medium gov-body\">{operatingSystem.split(' ').slice(0, 2).join(' ')}</p>\n            <p className=\"text-muted-foreground font-mono\">{architecture}</p>\n          </div>\n          <div className=\"space-y-1\">\n            <span className=\"text-muted-foreground uppercase tracking-wide\">User Context</span>\n            <div className=\"flex items-center gap-1\">\n              <User className=\"w-3 h-3\" />\n              <p className=\"font-medium font-mono\">{currentUser || 'N/A'}</p>\n              {isElevated && <Crown className=\"w-3 h-3 text-amber-500\" />}\n            </div>\n          </div>\n        </div>\n\n        {/* System Specs */}\n        <div className=\"grid grid-cols-2 gap-3 text-xs\">\n          <div className=\"space-y-1\">\n            <span className=\"text-muted-foreground uppercase tracking-wide flex items-center gap-1\">\n              <Cpu className=\"w-3 h-3\" />\n              Processor\n            </span>\n            <p className=\"font-medium text-xs leading-tight\">{processorType || 'Unknown'}</p>\n          </div>\n          <div className=\"space-y-1\">\n            <span className=\"text-muted-foreground uppercase tracking-wide flex items-center gap-1\">\n              <MemoryStick className=\"w-3 h-3\" />\n              Memory\n            </span>\n            <p className=\"font-medium\">{totalMemory ? `${totalMemory} GB` : 'Unknown'}</p>\n          </div>\n        </div>\n\n        {/* Connection Quality & Uptime */}\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between text-xs\">\n            <span className=\"text-muted-foreground uppercase tracking-wide\">Connection Quality</span>\n            <span className={`font-medium ${connectionQualityColor}`}>\n              {String(connectionQualityDisplayText)}\n            </span>\n          </div>\n          <Progress \n            value={Number(connectionQualityProgress)} \n            className=\"h-1.5\"\n          />\n        </div>\n\n        {/* Risk Assessment */}\n        <div className=\"flex items-center justify-between p-3 rounded-lg bg-muted/30 border border-border\">\n          <div className=\"space-y-1\">\n            <span className=\"text-xs text-muted-foreground uppercase tracking-wide\">Risk Assessment</span>\n            <div className=\"flex items-center gap-2\">\n              <Badge \n                variant={riskConfig[riskLevel as keyof typeof riskConfig]?.variant || 'outline'}\n                className=\"text-xs font-mono\"\n              >\n                {riskLevel?.toUpperCase() || 'UNKNOWN'}\n              </Badge>\n              <span className=\"text-sm text-muted-foreground\">\n                {vulnerabilityCount || 0} CVE{vulnerabilityCount !== 1 ? 's' : ''}\n              </span>\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <Badge \n              variant=\"outline\"\n              className=\"text-xs capitalize\"\n            >\n              {difficulty || 'Unknown'}\n            </Badge>\n          </div>\n        </div>\n\n        {/* User Accounts Summary */}\n        {userAccounts && Array.isArray(userAccounts) && userAccounts.length > 0 && (\n          <div className=\"space-y-2\">\n            <span className=\"text-xs text-muted-foreground uppercase tracking-wide flex items-center gap-1\">\n              <Users className=\"w-3 h-3\" />\n              User Accounts ({userAccounts.length})\n            </span>\n            <div className=\"flex flex-wrap gap-1\">\n              {userAccounts.slice(0, 3).map((account: { username: string; isAdmin?: boolean }, index: number) => (\n                <Badge key={index} variant=\"outline\" className=\"text-xs font-mono px-2 py-1\">\n                  {account.username}\n                  {account.isAdmin && <Crown className=\"w-2 h-2 ml-1 text-amber-500\" />}\n                </Badge>\n              ))}\n              {userAccounts.length > 3 && (\n                <Badge variant=\"outline\" className=\"text-xs px-2 py-1\">\n                  +{userAccounts.length - 3} more\n                </Badge>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Tags */}\n        {tags && Array.isArray(tags) && tags.length > 0 && (\n          <div className=\"space-y-2\">\n            <span className=\"text-xs text-muted-foreground uppercase tracking-wide\">Tags</span>\n            <div className=\"flex flex-wrap gap-1\">\n              {tags.slice(0, 4).map((tag: string, index: number) => (\n                <Badge key={index} variant=\"secondary\" className=\"text-xs px-2 py-1\">\n                  {tag}\n                </Badge>\n              ))}\n              {tags.length > 4 && (\n                <Badge variant=\"secondary\" className=\"text-xs px-2 py-1\">\n                  +{tags.length - 4}\n                </Badge>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"flex items-center gap-2 pt-2\">\n          <Button \n            size=\"sm\" \n            variant={status === 'compromised' ? 'default' : 'outline'}\n            className=\"flex-1\" \n            onClick={() => handleConnect('shell')}\n            disabled={status === 'offline'}\n            data-testid={`button-shell-${id}`}\n          >\n            {status === 'compromised' ? (\n              <>\n                <Terminal className=\"w-3 h-3 mr-1\" />\n                Shell\n              </>\n            ) : status === 'online' ? (\n              <>\n                <Lock className=\"w-3 h-3 mr-1\" />\n                Exploit\n              </>\n            ) : (\n              <>\n                <WifiOff className=\"w-3 h-3 mr-1\" />\n                Offline\n              </>\n            )}\n          </Button>\n          \n          <Button \n            size=\"sm\" \n            variant=\"outline\"\n            onClick={() => handleConnect('files')}\n            disabled={status !== 'compromised'}\n            data-testid={`button-files-${id}`}\n          >\n            <HardDrive className=\"w-3 h-3\" />\n          </Button>\n          \n          <Button \n            size=\"sm\" \n            variant=\"outline\"\n            onClick={() => handleConnect('surveillance')}\n            disabled={status !== 'compromised'}\n            data-testid={`button-surveillance-${id}`}\n          >\n            <Eye className=\"w-3 h-3\" />\n          </Button>\n          \n          <Button \n            size=\"sm\" \n            variant=\"ghost\"\n            onClick={handleViewDetails}\n            data-testid={`button-details-${id}`}\n          >\n            <MoreVertical className=\"w-3 h-3\" />\n          </Button>\n        </div>\n\n        {/* Status Footer */}\n        <div className=\"flex items-center justify-between text-xs text-muted-foreground pt-2 border-t border-border\">\n          <div className=\"flex items-center gap-3\">\n            <span className=\"flex items-center gap-1\">\n              <Activity className=\"w-3 h-3\" />\n              {currentConfig.text}\n            </span>\n            <span className=\"flex items-center gap-1\">\n              <Clock className=\"w-3 h-3\" />\n              {formatUptime(uptime || 0)}\n            </span>\n          </div>\n          <span className=\"font-mono\">\n            Last: {formatLastSeen(lastSeen || new Date())}\n          </span>\n        </div>\n\n        {/* Notes (if any) */}\n        {notes && (\n          <div className=\"pt-2 border-t border-border\">\n            <p className=\"text-xs text-muted-foreground italic\">{notes}</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":14938},"client/src/components/DashboardHeader.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { Sun, Moon, Shield, AlertTriangle } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport function DashboardHeader() {\n  const [isDarkMode, setIsDarkMode] = useState(true);\n\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n    document.documentElement.classList.toggle('dark');\n    console.log('Theme toggled:', isDarkMode ? 'light' : 'dark');\n  };\n\n  return (\n    <header className=\"flex items-center justify-between p-4 border-b bg-card hud-overlay cyber-border\" data-testid=\"header-dashboard\">\n      <div className=\"flex items-center gap-4\">\n        <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n        <div className=\"classification-bar simulation tactical-font\">\n          <Shield className=\"w-3 h-3 inline mr-1\" />\n          SIMULATION MODE - TRAINING ENVIRONMENT\n        </div>\n      </div>\n      \n      <div className=\"flex items-center gap-2\">\n        <Badge variant=\"secondary\" className=\"font-mono text-xs cyber-border\" data-testid=\"badge-connection-status\">\n          <div className=\"w-2 h-2 rounded-full status-online mr-2\"></div>\n          LAB NETWORK: SECURE\n        </Badge>\n        <div className=\"text-xs font-mono text-muted-foreground terminal-cursor\">\n          OPSEC STATUS: ACTIVE\n        </div>\n        <Button \n          variant=\"ghost\" \n          size=\"icon\" \n          onClick={toggleTheme}\n          data-testid=\"button-theme-toggle\"\n          className=\"cyber-border neon-glow\"\n        >\n          {isDarkMode ? <Sun className=\"w-4 h-4\" /> : <Moon className=\"w-4 h-4\" />}\n        </Button>\n      </div>\n    </header>\n  );\n}","size_bytes":1746},"client/src/components/LabEnvironmentSelector.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Play, Clock, Users, Shield, AlertTriangle, CheckCircle } from \"lucide-react\";\n\ninterface LabEnvironment {\n  id: string;\n  name: string;\n  description: string;\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\n  duration: string;\n  participants: number;\n  maxParticipants: number;\n  techniques: string[];\n  status: 'available' | 'in-progress' | 'completed';\n}\n\nexport function LabEnvironmentSelector() {\n  //todo: remove mock functionality\n  const environments: LabEnvironment[] = [\n    {\n      id: 'windows-domain',\n      name: 'Windows Domain Compromise',\n      description: 'Learn lateral movement and persistence techniques in an Active Directory environment.',\n      difficulty: 'intermediate',\n      duration: '45-60 min',\n      participants: 1,\n      maxParticipants: 4,\n      techniques: ['Lateral Movement', 'Credential Dumping', 'Domain Admin'],\n      status: 'available'\n    },\n    {\n      id: 'linux-privilege-esc',\n      name: 'Linux Privilege Escalation',\n      description: 'Explore various methods to escalate privileges from a low-privileged user account.',\n      difficulty: 'beginner',\n      duration: '30-45 min',\n      participants: 2,\n      maxParticipants: 3,\n      techniques: ['SUID Binaries', 'Cron Jobs', 'Sudo Exploitation'],\n      status: 'in-progress'\n    },\n    {\n      id: 'web-app-pentest',\n      name: 'Web Application Penetration',\n      description: 'Advanced techniques for compromising web applications and maintaining access.',\n      difficulty: 'advanced',\n      duration: '60-90 min',\n      participants: 0,\n      maxParticipants: 2,\n      techniques: ['SQL Injection', 'XSS', 'Command Injection', 'File Upload'],\n      status: 'completed'\n    },\n    {\n      id: 'network-pivoting',\n      name: 'Network Pivoting & Tunneling',\n      description: 'Master network pivoting techniques to access isolated network segments.',\n      difficulty: 'advanced',\n      duration: '75-90 min',\n      participants: 0,\n      maxParticipants: 3,\n      techniques: ['Proxychains', 'SSH Tunneling', 'Meterpreter Pivoting'],\n      status: 'available'\n    }\n  ];\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'beginner': return 'bg-success text-success-foreground';\n      case 'intermediate': return 'bg-warning text-warning-foreground';\n      case 'advanced': return 'bg-destructive text-destructive-foreground';\n      default: return 'bg-secondary text-secondary-foreground';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'available': return <Play className=\"w-4 h-4\" />;\n      case 'in-progress': return <Clock className=\"w-4 h-4 text-warning\" />;\n      case 'completed': return <CheckCircle className=\"w-4 h-4 text-success\" />;\n      default: return <AlertTriangle className=\"w-4 h-4\" />;\n    }\n  };\n\n  const handleStartLab = (envId: string) => {\n    console.log(`Starting lab environment: ${envId}`);\n  };\n\n  return (\n    <div className=\"space-y-4\" data-testid=\"lab-environment-selector\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-lg font-semibold\">Lab Environments</h2>\n          <p className=\"text-sm text-muted-foreground\">Choose a scenario to practice post-exploitation techniques</p>\n        </div>\n        <Badge variant=\"outline\" className=\"text-xs\">\n          {environments.filter(e => e.status === 'available').length} Available\n        </Badge>\n      </div>\n\n      <div className=\"grid gap-4\">\n        {environments.map((env) => (\n          <Card key={env.id} className=\"hover-elevate\" data-testid={`lab-environment-${env.id}`}>\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"space-y-1\">\n                  <div className=\"flex items-center gap-2\">\n                    {getStatusIcon(env.status)}\n                    <CardTitle className=\"text-base\">{env.name}</CardTitle>\n                  </div>\n                  <CardDescription className=\"text-sm\">{env.description}</CardDescription>\n                </div>\n                <Badge className={`${getDifficultyColor(env.difficulty)} text-xs`}>\n                  {env.difficulty}\n                </Badge>\n              </div>\n            </CardHeader>\n\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                <div className=\"flex items-center gap-1\">\n                  <Clock className=\"w-3 h-3\" />\n                  <span>{env.duration}</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <Users className=\"w-3 h-3\" />\n                  <span>{env.participants}/{env.maxParticipants} participants</span>\n                </div>\n              </div>\n\n              <div className=\"flex flex-wrap gap-1\">\n                {env.techniques.map((technique, index) => (\n                  <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                    {technique}\n                  </Badge>\n                ))}\n              </div>\n\n              <div className=\"flex justify-between items-center\">\n                <div className=\"flex items-center gap-2\">\n                  <Shield className=\"w-4 h-4 text-muted-foreground\" />\n                  <span className=\"text-xs text-muted-foreground\">Isolated Environment</span>\n                </div>\n                <Button \n                  size=\"sm\"\n                  variant={env.status === 'available' ? 'default' : 'secondary'}\n                  disabled={env.status === 'in-progress'}\n                  onClick={() => handleStartLab(env.id)}\n                  data-testid={`button-start-${env.id}`}\n                >\n                  {env.status === 'available' ? 'Start Lab' : \n                   env.status === 'in-progress' ? 'In Progress' : 'Review'}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":6236},"client/src/components/NetworkTopology.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Network, Router, Monitor, Server, Smartphone, Shield } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface NetworkNode {\n  id: string;\n  name: string;\n  type: 'router' | 'server' | 'workstation' | 'mobile' | 'firewall';\n  status: 'online' | 'offline' | 'compromised';\n  ip: string;\n  x: number;\n  y: number;\n}\n\nexport function NetworkTopology() {\n  //todo: remove mock functionality\n  const [nodes] = useState<NetworkNode[]>([\n    { id: 'router', name: 'Gateway Router', type: 'router', status: 'online', ip: '192.168.1.1', x: 50, y: 20 },\n    { id: 'firewall', name: 'Firewall', type: 'firewall', status: 'online', ip: '192.168.1.2', x: 50, y: 45 },\n    { id: 'server1', name: 'Web Server', type: 'server', status: 'compromised', ip: '192.168.1.10', x: 20, y: 70 },\n    { id: 'server2', name: 'DB Server', type: 'server', status: 'online', ip: '192.168.1.11', x: 50, y: 70 },\n    { id: 'workstation1', name: 'Admin PC', type: 'workstation', status: 'online', ip: '192.168.1.20', x: 80, y: 70 },\n    { id: 'workstation2', name: 'User PC', type: 'workstation', status: 'offline', ip: '192.168.1.21', x: 20, y: 90 },\n    { id: 'mobile1', name: 'Mobile Device', type: 'mobile', status: 'online', ip: '192.168.1.30', x: 80, y: 90 },\n  ]);\n\n  const [selectedNode, setSelectedNode] = useState<string | null>(null);\n\n  const getIcon = (type: NetworkNode['type']) => {\n    switch (type) {\n      case 'router': return Router;\n      case 'server': return Server;\n      case 'workstation': return Monitor;\n      case 'mobile': return Smartphone;\n      case 'firewall': return Shield;\n      default: return Monitor;\n    }\n  };\n\n  const getStatusColor = (status: NetworkNode['status']) => {\n    switch (status) {\n      case 'online': return 'text-success';\n      case 'offline': return 'text-muted-foreground';\n      case 'compromised': return 'text-warning';\n      default: return 'text-muted-foreground';\n    }\n  };\n\n  const connections = [\n    { from: 'router', to: 'firewall' },\n    { from: 'firewall', to: 'server1' },\n    { from: 'firewall', to: 'server2' },\n    { from: 'firewall', to: 'workstation1' },\n    { from: 'firewall', to: 'workstation2' },\n    { from: 'firewall', to: 'mobile1' },\n  ];\n\n  const handleNodeClick = (nodeId: string) => {\n    setSelectedNode(nodeId);\n    console.log('Selected network node:', nodeId);\n  };\n\n  return (\n    <Card data-testid=\"network-topology\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Network className=\"w-5 h-5 text-primary\" />\n            <div>\n              <CardTitle>Network Topology</CardTitle>\n              <CardDescription>Lab network layout and device status</CardDescription>\n            </div>\n          </div>\n          <Badge variant=\"outline\" className=\"text-xs\">\n            7 devices\n          </Badge>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"p-6\">\n        <div className=\"relative bg-muted/20 rounded-lg p-4 min-h-[400px]\">\n          {/* Connection lines */}\n          <svg className=\"absolute inset-0 w-full h-full pointer-events-none\">\n            {connections.map((connection, index) => {\n              const fromNode = nodes.find(n => n.id === connection.from);\n              const toNode = nodes.find(n => n.id === connection.to);\n              if (!fromNode || !toNode) return null;\n              \n              return (\n                <line\n                  key={index}\n                  x1={`${fromNode.x}%`}\n                  y1={`${fromNode.y}%`}\n                  x2={`${toNode.x}%`}\n                  y2={`${toNode.y}%`}\n                  stroke=\"hsl(var(--border))\"\n                  strokeWidth=\"1\"\n                  strokeDasharray=\"2,2\"\n                />\n              );\n            })}\n          </svg>\n\n          {/* Network nodes */}\n          {nodes.map((node) => {\n            const IconComponent = getIcon(node.type);\n            const isSelected = selectedNode === node.id;\n            \n            return (\n              <div\n                key={node.id}\n                className=\"absolute transform -translate-x-1/2 -translate-y-1/2 cursor-pointer\"\n                style={{ left: `${node.x}%`, top: `${node.y}%` }}\n                onClick={() => handleNodeClick(node.id)}\n                data-testid={`node-${node.id}`}\n              >\n                <div className={`\n                  flex flex-col items-center gap-1 p-2 rounded-lg border\n                  ${isSelected ? 'bg-primary/20 border-primary' : 'bg-card border-border'}\n                  hover-elevate\n                `}>\n                  <IconComponent className={`w-6 h-6 ${getStatusColor(node.status)}`} />\n                  <div className=\"text-center\">\n                    <div className=\"text-xs font-medium\">{node.name}</div>\n                    <div className=\"text-xs text-muted-foreground font-mono\">{node.ip}</div>\n                    <Badge \n                      variant={node.status === 'compromised' ? 'destructive' : 'secondary'} \n                      className=\"text-xs mt-1\"\n                    >\n                      {node.status}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {selectedNode && (\n          <div className=\"mt-4 p-3 bg-muted rounded-lg\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h4 className=\"text-sm font-medium\">\n                  {nodes.find(n => n.id === selectedNode)?.name}\n                </h4>\n                <p className=\"text-xs text-muted-foreground font-mono\">\n                  {nodes.find(n => n.id === selectedNode)?.ip}\n                </p>\n              </div>\n              <Button size=\"sm\" variant=\"outline\" data-testid={`button-scan-${selectedNode}`}>\n                Scan Device\n              </Button>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6213},"client/src/components/TargetMachineCard.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Monitor, Wifi, WifiOff, Shield, AlertTriangle, CheckCircle, \n  Server, Globe, Lock, Users, HardDrive, Activity, Eye, Terminal\n} from \"lucide-react\";\n\ninterface TargetMachineCardProps {\n  id: string;\n  name: string;\n  os: string;\n  ip: string;\n  status: 'online' | 'offline' | 'compromised';\n  vulnerabilities: number;\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\n  domain?: string;\n  services?: string[];\n}\n\nexport function TargetMachineCard({ \n  id, name, os, ip, status, vulnerabilities, difficulty, domain = \"N/A\", services = []\n}: TargetMachineCardProps) {\n  const statusConfig = {\n    online: { \n      color: 'text-green-600 dark:text-green-400', \n      icon: Wifi, \n      text: 'Online',\n      bgColor: 'bg-green-50 dark:bg-green-950',\n      borderColor: 'border-green-200 dark:border-green-800'\n    },\n    offline: { \n      color: 'text-gray-500 dark:text-gray-400', \n      icon: WifiOff, \n      text: 'Offline',\n      bgColor: 'bg-gray-50 dark:bg-gray-900',\n      borderColor: 'border-gray-200 dark:border-gray-700'\n    },\n    compromised: { \n      color: 'text-amber-600 dark:text-amber-400', \n      icon: AlertTriangle, \n      text: 'Compromised',\n      bgColor: 'bg-amber-50 dark:bg-amber-950',\n      borderColor: 'border-amber-200 dark:border-amber-800'\n    }\n  };\n\n  const difficultyConfig = {\n    beginner: { \n      color: 'text-green-700 dark:text-green-300', \n      text: 'Beginner',\n      bgColor: 'bg-green-100 dark:bg-green-900'\n    },\n    intermediate: { \n      color: 'text-amber-700 dark:text-amber-300', \n      text: 'Intermediate',\n      bgColor: 'bg-amber-100 dark:bg-amber-900'\n    },\n    advanced: { \n      color: 'text-red-700 dark:text-red-300', \n      text: 'Advanced',\n      bgColor: 'bg-red-100 dark:bg-red-900'\n    }\n  };\n\n  const getRiskLevel = () => {\n    if (status === 'compromised') return 'HIGH';\n    if (vulnerabilities > 10) return 'CRITICAL';\n    if (vulnerabilities > 5) return 'HIGH';\n    if (vulnerabilities > 2) return 'MEDIUM';\n    return 'LOW';\n  };\n\n  const handleConnect = () => {\n    console.log(`Connecting to target machine: ${name} (${ip})`);\n  };\n\n  const handleViewDetails = () => {\n    console.log(`Viewing details for target machine: ${name}`);\n  };\n\n  const StatusIcon = statusConfig[status].icon;\n  const riskLevel = getRiskLevel();\n\n  return (\n    <Card \n      className={`gov-card transition-all duration-200 ${statusConfig[status].borderColor} hover:shadow-lg`} \n      data-testid={`card-target-${id}`}\n    >\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className={`p-2 rounded-lg ${statusConfig[status].bgColor}`}>\n              <Server className={`w-5 h-5 ${statusConfig[status].color}`} />\n            </div>\n            <div className=\"space-y-1\">\n              <CardTitle className=\"text-base font-semibold gov-header\">{name}</CardTitle>\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                <Globe className=\"w-3 h-3\" />\n                <span className=\"font-mono\">{ip}</span>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className={`w-2 h-2 rounded-full ${\n              status === 'online' ? 'status-online' : \n              status === 'compromised' ? 'status-compromised' : \n              'status-offline'\n            }`}></div>\n            <StatusIcon className={`w-4 h-4 ${statusConfig[status].color}`} />\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {/* System Information */}\n        <div className=\"grid grid-cols-2 gap-3 text-xs\">\n          <div className=\"space-y-1\">\n            <span className=\"text-muted-foreground uppercase tracking-wide\">OS</span>\n            <p className=\"font-medium gov-body\">{os}</p>\n          </div>\n          <div className=\"space-y-1\">\n            <span className=\"text-muted-foreground uppercase tracking-wide\">Domain</span>\n            <p className=\"font-medium font-mono\">{domain}</p>\n          </div>\n        </div>\n\n        {/* Risk Assessment */}\n        <div className=\"flex items-center justify-between p-3 rounded-lg bg-muted/30 border border-border\">\n          <div className=\"space-y-1\">\n            <span className=\"text-xs text-muted-foreground uppercase tracking-wide\">Risk Level</span>\n            <div className=\"flex items-center gap-2\">\n              <Badge \n                variant={\n                  riskLevel === 'CRITICAL' ? 'destructive' : \n                  riskLevel === 'HIGH' ? 'default' : \n                  riskLevel === 'MEDIUM' ? 'secondary' : \n                  'outline'\n                }\n                className=\"text-xs font-mono\"\n              >\n                {riskLevel}\n              </Badge>\n              <span className=\"text-sm text-muted-foreground\">\n                {vulnerabilities} CVE{vulnerabilities !== 1 ? 's' : ''}\n              </span>\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <Badge \n              className={`${difficultyConfig[difficulty].bgColor} ${difficultyConfig[difficulty].color} border-0 text-xs`}\n            >\n              {difficultyConfig[difficulty].text}\n            </Badge>\n          </div>\n        </div>\n\n        {/* Services */}\n        {services.length > 0 && (\n          <div className=\"space-y-2\">\n            <span className=\"text-xs text-muted-foreground uppercase tracking-wide\">Services</span>\n            <div className=\"flex flex-wrap gap-1\">\n              {services.slice(0, 4).map((service, index) => (\n                <Badge key={index} variant=\"outline\" className=\"text-xs font-mono px-2 py-1\">\n                  {service}\n                </Badge>\n              ))}\n              {services.length > 4 && (\n                <Badge variant=\"outline\" className=\"text-xs px-2 py-1\">\n                  +{services.length - 4} more\n                </Badge>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"flex items-center gap-2 pt-2\">\n          <Button \n            size=\"sm\" \n            variant={status === 'compromised' ? 'default' : 'outline'}\n            className=\"flex-1\" \n            onClick={handleConnect}\n            disabled={status === 'offline'}\n            data-testid={`button-connect-${id}`}\n          >\n            {status === 'compromised' ? (\n              <>\n                <Terminal className=\"w-3 h-3 mr-1\" />\n                Access Shell\n              </>\n            ) : status === 'online' ? (\n              <>\n                <Lock className=\"w-3 h-3 mr-1\" />\n                Exploit\n              </>\n            ) : (\n              <>\n                <WifiOff className=\"w-3 h-3 mr-1\" />\n                Offline\n              </>\n            )}\n          </Button>\n          <Button \n            size=\"sm\" \n            variant=\"ghost\"\n            onClick={handleViewDetails}\n            data-testid={`button-details-${id}`}\n          >\n            <Eye className=\"w-3 h-3\" />\n          </Button>\n        </div>\n\n        {/* Status Footer */}\n        <div className=\"flex items-center justify-between text-xs text-muted-foreground pt-2 border-t border-border\">\n          <span className=\"flex items-center gap-1\">\n            <Activity className=\"w-3 h-3\" />\n            {statusConfig[status].text}\n          </span>\n          <span className=\"font-mono\">\n            Last seen: {status === 'offline' ? '2h ago' : 'Now'}\n          </span>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7863},"client/src/components/TelemetryPanel.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Activity, BarChart3, Network, Shield, AlertTriangle, \n  TrendingUp, TrendingDown, Eye, Download, Zap, Clock, \n  Server, Database, Cpu, HardDrive, Wifi\n} from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface TelemetryEvent {\n  id: string;\n  timestamp: string;\n  source: string;\n  event: string;\n  details: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  category: 'network' | 'system' | 'security' | 'application';\n}\n\nexport function TelemetryPanel() {\n  // Professional government-style telemetry data with comprehensive events\n  const [events] = useState<TelemetryEvent[]>([\n    {\n      id: '001',\n      timestamp: '2024-03-14 14:32:15',\n      source: 'WIN-DC-2019',\n      event: 'Privilege Escalation Detected',\n      details: 'SeDebugPrivilege enabled for process: cmd.exe (PID: 2847)',\n      severity: 'high',\n      category: 'security'\n    },\n    {\n      id: '002',\n      timestamp: '2024-03-14 14:32:42',\n      source: 'UBUNTU-WEB', \n      event: 'Reverse Shell Connection',\n      details: 'Outbound TCP connection established to 10.0.1.100:4444',\n      severity: 'critical',\n      category: 'network'\n    },\n    {\n      id: '003',\n      timestamp: '2024-03-14 14:33:01',\n      source: 'CENTOS-DB',\n      event: 'Authentication Failure',\n      details: 'Multiple failed SSH login attempts from 10.0.1.20 (user: root)',\n      severity: 'medium',\n      category: 'security'\n    },\n    {\n      id: '004',\n      timestamp: '2024-03-14 14:33:15',\n      source: 'MACOS-DEV',\n      event: 'Suspicious Process Creation',\n      details: '/bin/bash spawned by launchctl with elevated privileges',\n      severity: 'high',\n      category: 'system'\n    },\n    {\n      id: '005',\n      timestamp: '2024-03-14 14:33:28',\n      source: 'WIN-DC-2019',\n      event: 'Registry Persistence Mechanism',\n      details: 'New autorun entry: HKLM\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\SecurityUpdate',\n      severity: 'critical',\n      category: 'system'\n    },\n    {\n      id: '006',\n      timestamp: '2024-03-14 14:33:45',\n      source: 'UBUNTU-WEB',\n      event: 'Data Exfiltration Attempt',\n      details: 'Large file transfer detected: /etc/passwd, /etc/shadow (2.3MB)',\n      severity: 'critical',\n      category: 'network'\n    },\n    {\n      id: '007',\n      timestamp: '2024-03-14 14:34:12',\n      source: 'FIREWALL-01',\n      event: 'Port Scan Detected',\n      details: 'Nmap scan detected from 10.0.1.20 targeting DMZ network',\n      severity: 'medium',\n      category: 'network'\n    },\n    {\n      id: '008',\n      timestamp: '2024-03-14 14:34:28',\n      source: 'CENTOS-DB',\n      event: 'Database Query Injection',\n      details: 'SQL injection attempt in login form: UNION SELECT * FROM users',\n      severity: 'high',\n      category: 'application'\n    }\n  ]);\n\n  const networkTraffic = [\n    { protocol: \"HTTPS\", requests: 2847, status: \"normal\", trend: \"up\" },\n    { protocol: \"SSH\", connections: 156, status: \"elevated\", trend: \"up\" },\n    { protocol: \"RDP\", attempts: 23, status: \"suspicious\", trend: \"down\" },\n    { protocol: \"SMB\", transfers: 892, status: \"normal\", trend: \"stable\" }\n  ];\n\n  const systemMetrics = {\n    cpuUsage: 34,\n    memoryUsage: 68,\n    networkLoad: 23,\n    diskIO: 12,\n    activeConnections: 892,\n    blockedAttempts: 156,\n    dataProcessed: \"2.3 GB\",\n    uptime: \"99.7%\"\n  };\n\n  const [selectedSeverity, setSelectedSeverity] = useState<string | null>(null);\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'low': return 'text-green-700 dark:text-green-300 bg-green-100 dark:bg-green-900';\n      case 'medium': return 'text-amber-700 dark:text-amber-300 bg-amber-100 dark:bg-amber-900';\n      case 'high': return 'text-red-700 dark:text-red-300 bg-red-100 dark:bg-red-900';\n      case 'critical': return 'text-red-100 bg-red-600 dark:bg-red-800';\n      default: return 'text-muted-foreground bg-muted';\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'network': return Network;\n      case 'security': return Shield;\n      case 'system': return Server;\n      case 'application': return Database;\n      default: return Activity;\n    }\n  };\n\n  const getTrendIcon = (trend: string) => {\n    switch (trend) {\n      case 'up': return <TrendingUp className=\"w-3 h-3 text-green-600 dark:text-green-400\" />;\n      case 'down': return <TrendingDown className=\"w-3 h-3 text-red-600 dark:text-red-400\" />;\n      default: return <div className=\"w-3 h-3 rounded-full bg-muted-foreground\" />;\n    }\n  };\n\n  const filteredEvents = selectedSeverity \n    ? events.filter(event => event.severity === selectedSeverity)\n    : events;\n\n  const severityCounts = {\n    low: events.filter(e => e.severity === 'low').length,\n    medium: events.filter(e => e.severity === 'medium').length,\n    high: events.filter(e => e.severity === 'high').length,\n    critical: events.filter(e => e.severity === 'critical').length,\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-xl font-semibold gov-header flex items-center gap-2\">\n          <BarChart3 className=\"w-5 h-5\" />\n          Real-Time Intelligence & Monitoring\n        </h2>\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"outline\" size=\"sm\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export Logs\n          </Button>\n          <Button variant=\"outline\" size=\"sm\">\n            <Eye className=\"w-4 h-4 mr-2\" />\n            Live Feed\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-6\">\n        {/* System Performance */}\n        <Card className=\"gov-card\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 gov-header\">\n              <Cpu className=\"w-4 h-4\" />\n              System Performance\n            </CardTitle>\n            <CardDescription className=\"gov-body\">\n              Real-time infrastructure monitoring\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-3\">\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"gov-body\">CPU Usage</span>\n                  <span className=\"font-mono\">{systemMetrics.cpuUsage}%</span>\n                </div>\n                <Progress value={systemMetrics.cpuUsage} className=\"h-2\" />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"gov-body\">Memory Usage</span>\n                  <span className=\"font-mono\">{systemMetrics.memoryUsage}%</span>\n                </div>\n                <Progress value={systemMetrics.memoryUsage} className=\"h-2\" />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"gov-body\">Network Load</span>\n                  <span className=\"font-mono\">{systemMetrics.networkLoad}%</span>\n                </div>\n                <Progress value={systemMetrics.networkLoad} className=\"h-2\" />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"gov-body\">Disk I/O</span>\n                  <span className=\"font-mono\">{systemMetrics.diskIO}%</span>\n                </div>\n                <Progress value={systemMetrics.diskIO} className=\"h-2\" />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4 pt-4 border-t border-border\">\n              <div className=\"text-center\">\n                <p className=\"text-lg font-semibold\">{systemMetrics.activeConnections}</p>\n                <p className=\"text-xs text-muted-foreground\">Active Connections</p>\n              </div>\n              <div className=\"text-center\">\n                <p className=\"text-lg font-semibold\">{systemMetrics.uptime}</p>\n                <p className=\"text-xs text-muted-foreground\">System Uptime</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Network Traffic */}\n        <Card className=\"gov-card\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 gov-header\">\n              <Wifi className=\"w-4 h-4\" />\n              Network Traffic Analysis\n            </CardTitle>\n            <CardDescription className=\"gov-body\">\n              Protocol analysis and traffic patterns\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {networkTraffic.map((traffic, index) => (\n              <div key={index} className=\"flex items-center justify-between p-3 rounded-lg bg-muted/20 border border-border\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"space-y-1\">\n                    <p className=\"font-medium text-sm gov-body\">{traffic.protocol}</p>\n                    <p className=\"text-xs text-muted-foreground gov-mono\">\n                      {traffic.protocol === 'HTTPS' ? 'Requests' : \n                       traffic.protocol === 'SSH' ? 'Connections' : \n                       traffic.protocol === 'RDP' ? 'Attempts' : \n                       'Transfers'}: {traffic.requests || traffic.connections || traffic.attempts || traffic.transfers}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Badge \n                    variant={traffic.status === 'suspicious' ? 'destructive' : traffic.status === 'elevated' ? 'default' : 'secondary'}\n                    className=\"text-xs font-mono\"\n                  >\n                    {traffic.status.toUpperCase()}\n                  </Badge>\n                  {getTrendIcon(traffic.trend)}\n                </div>\n              </div>\n            ))}\n\n            <div className=\"grid grid-cols-2 gap-4 pt-4 border-t border-border\">\n              <div className=\"text-center\">\n                <p className=\"text-lg font-semibold\">{systemMetrics.dataProcessed}</p>\n                <p className=\"text-xs text-muted-foreground\">Data Processed</p>\n              </div>\n              <div className=\"text-center\">\n                <p className=\"text-lg font-semibold\">{systemMetrics.blockedAttempts}</p>\n                <p className=\"text-xs text-muted-foreground\">Blocked Attempts</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Security Events */}\n        <Card className=\"gov-card\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"flex items-center gap-2 gov-header\">\n                  <Shield className=\"w-4 h-4\" />\n                  Security Events\n                </CardTitle>\n                <CardDescription className=\"gov-body\">\n                  Real-time security incident monitoring\n                </CardDescription>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  <Clock className=\"w-4 h-4 mr-1\" />\n                  <span className=\"text-xs\">Live</span>\n                </Button>\n              </div>\n            </div>\n\n            {/* Severity Filters */}\n            <div className=\"flex gap-2 flex-wrap pt-2\">\n              {Object.entries(severityCounts).map(([severity, count]) => (\n                <Badge \n                  key={severity}\n                  variant={selectedSeverity === severity ? \"default\" : \"outline\"}\n                  className={`cursor-pointer hover-elevate text-xs transition-all ${\n                    selectedSeverity === severity ? getSeverityColor(severity) : ''\n                  }`}\n                  onClick={() => setSelectedSeverity(selectedSeverity === severity ? null : severity)}\n                  data-testid={`filter-${severity}`}\n                >\n                  {severity.toUpperCase()}: {count}\n                </Badge>\n              ))}\n            </div>\n          </CardHeader>\n\n          <CardContent className=\"p-0\">\n            <ScrollArea className=\"h-80\">\n              <div className=\"p-4 space-y-2\">\n                {filteredEvents.map((event) => {\n                  const CategoryIcon = getCategoryIcon(event.category);\n                  \n                  return (\n                    <div \n                      key={event.id} \n                      className=\"flex items-start gap-3 p-3 rounded-lg border border-border hover:bg-muted/20 transition-colors cursor-pointer\"\n                      data-testid={`telemetry-event-${event.id}`}\n                    >\n                      <div className=\"flex-shrink-0 p-1.5 rounded-full bg-muted/50 mt-0.5\">\n                        <CategoryIcon className=\"w-3 h-3 text-muted-foreground\" />\n                      </div>\n                      \n                      <div className=\"flex-1 min-w-0 space-y-1\">\n                        <div className=\"flex items-center gap-2 flex-wrap\">\n                          <span className=\"font-medium text-sm gov-body\">{event.event}</span>\n                          <Badge className={`${getSeverityColor(event.severity)} text-xs border-0`}>\n                            {event.severity.toUpperCase()}\n                          </Badge>\n                        </div>\n                        \n                        <p className=\"text-xs text-muted-foreground gov-body\">{event.details}</p>\n                        \n                        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                          <span className=\"font-mono\">{event.source}</span>\n                          <span className=\"font-mono\">\n                            {event.timestamp}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </ScrollArea>\n            \n            <div className=\"p-4 border-t border-border\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"w-full\" data-testid=\"button-view-all-events\">\n                <Zap className=\"w-4 h-4 mr-2\" />\n                View Complete Event Log ({events.length} total)\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":15045},"client/src/components/TerminalInterface.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Terminal, X, Minimize2, Maximize2, Wifi, Shield, Lock, \n  Activity, Clock, User, HardDrive, Cpu, Globe \n} from \"lucide-react\";\nimport { useState, useRef, useEffect } from \"react\";\n\ninterface TerminalLog {\n  id: number;\n  timestamp: string;\n  command?: string;\n  output?: string;\n  type: 'command' | 'output' | 'error' | 'success';\n}\n\nexport function TerminalInterface() {\n  const [logs, setLogs] = useState<TerminalLog[]>([\n    { id: 1, timestamp: '14:32:01', output: '=== BYOB-LAB SECURE TERMINAL v3.2.1 ===', type: 'success' },\n    { id: 2, timestamp: '14:32:01', output: 'CLASSIFICATION: SIMULATION ENVIRONMENT', type: 'output' },\n    { id: 3, timestamp: '14:32:01', output: 'ENCRYPTION: AES-256 | SESSION: ESTABLISHED', type: 'output' },\n    { id: 4, timestamp: '14:32:02', output: 'TARGET: WIN-SERVER2019 (192.168.1.10)', type: 'success' },\n    { id: 5, timestamp: '14:32:02', output: 'ACCESS LEVEL: SYSTEM | PRIVILEGES: ELEVATED', type: 'success' },\n    { id: 6, timestamp: '14:32:03', output: 'Ready for operations...', type: 'output' },\n  ]);\n  const [currentCommand, setCurrentCommand] = useState('');\n  const [isMaximized, setIsMaximized] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState('SECURE');\n  const [sessionTime, setSessionTime] = useState('00:15:42');\n  const scrollRef = useRef<HTMLDivElement>(null);\n  \n  // Simulation commands for educational purposes\n  const mockCommands: { [key: string]: { output: string; type: 'output' | 'error' | 'success' } } = {\n    'help': { output: '[SYSTEM] Available commands:\\n├── whoami          - Display current user context\\n├── sysinfo         - System information\\n├── netstat         - Network connections\\n├── dir / ls        - Directory listing\\n├── ps              - Process listing\\n├── ipconfig        - Network configuration\\n├── cat <file>      - Display file contents\\n└── exit            - Terminate session', type: 'output' },\n    'sysinfo': { output: '[TARGET] System Information:\\n├── Hostname: WIN-SERVER2019\\n├── OS: Windows Server 2019 Standard\\n├── Architecture: x64\\n├── Domain: CORPORATE.local\\n├── Last Boot: 2024-03-14 08:30:15\\n└── Uptime: 6 days, 14 hours', type: 'output' },\n    'whoami': { output: 'NT AUTHORITY\\\\SYSTEM', type: 'success' },\n    'ps': { output: '[PROCESSES] Active processes:\\n├── PID 1234 - explorer.exe (Administrator)\\n├── PID 2156 - svchost.exe (SYSTEM)\\n├── PID 3421 - winlogon.exe (SYSTEM)\\n└── PID 4567 - services.exe (SYSTEM)', type: 'output' },\n    'ipconfig': { output: '[NETWORK] Interface Configuration:\\n├── Adapter: Ethernet0\\n├── IPv4: 192.168.1.10/24\\n├── Gateway: 192.168.1.1\\n├── DNS1: 8.8.8.8\\n└── Status: Connected', type: 'output' },\n    'netstat': { output: '[NETWORK] Active Connections:\\n├── TCP 192.168.1.10:135 → 0.0.0.0:0 [LISTENING]\\n├── TCP 192.168.1.10:445 → 0.0.0.0:0 [LISTENING]\\n├── TCP 192.168.1.10:3389 → 0.0.0.0:0 [LISTENING]\\n└── TCP 192.168.1.10:5985 → 0.0.0.0:0 [LISTENING]', type: 'output' },\n    'dir': { output: '[DIRECTORY] C:\\\\Users\\\\Administrator\\n├── 📁 Documents\\n├── 📁 Desktop\\n├── 📁 Downloads\\n├── 📄 flag.txt (2.1 KB)\\n└── 📄 notes.txt (1.5 KB)', type: 'output' },\n    'ls': { output: '[DIRECTORY] /home/admin\\n├── 📁 documents/\\n├── 📁 scripts/\\n├── 📄 .bash_history\\n└── 📄 credentials.txt', type: 'output' },\n    'cat flag.txt': { output: '[FILE] flag.txt:\\nBYOB{w3lc0m3_t0_th3_l4b_3nv1r0nm3nt}\\n\\n[SIMULATION] Educational flag captured!', type: 'success' },\n    'exit': { output: '[SESSION] Connection terminated by user.\\n[SECURITY] All activities logged for training analysis.', type: 'error' },\n  };\n\n  const executeCommand = () => {\n    if (!currentCommand.trim()) return;\n\n    const timestamp = new Date().toLocaleTimeString('en-US', { hour12: false });\n    const commandLog: TerminalLog = {\n      id: logs.length + 1,\n      timestamp,\n      command: currentCommand,\n      type: 'command'\n    };\n\n    const response = mockCommands[currentCommand.toLowerCase()] || { \n      output: `Command '${currentCommand}' not recognized. Type 'help' for available commands.`, \n      type: 'error' as const \n    };\n    \n    const outputLog: TerminalLog = {\n      id: logs.length + 2,\n      timestamp,\n      output: response.output,\n      type: response.type\n    };\n\n    setLogs(prev => [...prev, commandLog, outputLog]);\n    setCurrentCommand('');\n    console.log('Executed command:', currentCommand);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      executeCommand();\n    }\n  };\n\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n    }\n  }, [logs]);\n\n  // Update session time every second\n  useEffect(() => {\n    const timer = setInterval(() => {\n      const now = new Date();\n      const start = new Date(now.getTime() - 942000); // 15:42 ago\n      const diff = now.getTime() - start.getTime();\n      const hours = Math.floor(diff / 3600000).toString().padStart(2, '0');\n      const minutes = Math.floor((diff % 3600000) / 60000).toString().padStart(2, '0');\n      const seconds = Math.floor((diff % 60000) / 1000).toString().padStart(2, '0');\n      setSessionTime(`${hours}:${minutes}:${seconds}`);\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  return (\n    <div className={`${isMaximized ? 'fixed inset-4 z-50' : 'h-full'} flex flex-col bg-black/95 border border-green-500/30 rounded-lg overflow-hidden`} data-testid=\"terminal-interface\">\n      {/* Terminal Header */}\n      <div className=\"flex items-center justify-between bg-gray-900/90 border-b border-green-500/20 px-4 py-2\">\n        <div className=\"flex items-center gap-4\">\n          <div className=\"flex items-center gap-2\">\n            <Terminal className=\"w-4 h-4 text-green-400\" />\n            <span className=\"font-mono text-xs text-green-400 font-semibold\">SECURE SHELL</span>\n          </div>\n          \n          <div className=\"flex items-center gap-3 text-xs font-mono\">\n            <div className=\"flex items-center gap-1\">\n              <Globe className=\"w-3 h-3 text-green-400\" />\n              <span className=\"text-green-400\">192.168.1.10</span>\n            </div>\n            <div className=\"w-px h-3 bg-green-500/20\"></div>\n            <div className=\"flex items-center gap-1\">\n              <User className=\"w-3 h-3 text-blue-400\" />\n              <span className=\"text-blue-400\">SYSTEM</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex items-center gap-3\">\n          <div className=\"flex items-center gap-4 text-xs font-mono\">\n            <div className=\"flex items-center gap-1\">\n              <Clock className=\"w-3 h-3 text-yellow-400\" />\n              <span className=\"text-yellow-400\">{sessionTime}</span>\n            </div>\n            <Badge \n              variant=\"outline\" \n              className={`text-xs font-mono ${\n                connectionStatus === 'SECURE' ? 'border-green-500/30 text-green-400' : 'border-red-500/30 text-red-400'\n              }`}\n            >\n              <Lock className=\"w-2 h-2 mr-1\" />\n              {connectionStatus}\n            </Badge>\n          </div>\n          \n          <div className=\"flex items-center gap-1 ml-2\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\" \n              className=\"h-6 w-6 text-gray-400 hover:text-white\"\n              data-testid=\"button-terminal-minimize\"\n            >\n              <Minimize2 className=\"w-3 h-3\" />\n            </Button>\n            <Button \n              variant=\"ghost\" \n              size=\"icon\" \n              className=\"h-6 w-6 text-gray-400 hover:text-white\"\n              onClick={() => setIsMaximized(!isMaximized)}\n              data-testid=\"button-terminal-maximize\"\n            >\n              <Maximize2 className=\"w-3 h-3\" />\n            </Button>\n            <Button \n              variant=\"ghost\" \n              size=\"icon\" \n              className=\"h-6 w-6 text-gray-400 hover:text-red-400\"\n              data-testid=\"button-terminal-close\"\n            >\n              <X className=\"w-3 h-3\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Terminal Body */}\n      <div className=\"flex-1 flex flex-col\">\n        <ScrollArea className={`flex-1 p-4 font-mono text-sm bg-black/95`} ref={scrollRef}>\n          <div className=\"space-y-1\">\n            {logs.map((log) => (\n              <div key={log.id} className=\"flex gap-2 text-xs leading-relaxed\">\n                <span className=\"text-gray-500 min-w-[60px] select-none\">[{log.timestamp}]</span>\n                {log.command ? (\n                  <div className=\"flex gap-2 items-center\">\n                    <span className=\"text-green-400 font-bold\">root@target:~#</span>\n                    <span className=\"text-white\">{log.command}</span>\n                  </div>\n                ) : (\n                  <span \n                    className={`${\n                      log.type === 'error' ? 'text-red-400' : \n                      log.type === 'success' ? 'text-green-400' : \n                      'text-cyan-400'\n                    } whitespace-pre-wrap leading-relaxed`}\n                  >\n                    {log.output}\n                  </span>\n                )}\n              </div>\n            ))}\n          </div>\n        </ScrollArea>\n        \n        {/* Command Input */}\n        <div className=\"border-t border-green-500/20 bg-gray-900/50 p-3\">\n          <div className=\"flex items-center gap-3 font-mono text-sm\">\n            <div className=\"flex items-center gap-2 text-green-400 font-bold shrink-0\">\n              <span>root@target:~#</span>\n            </div>\n            <Input\n              value={currentCommand}\n              onChange={(e) => setCurrentCommand(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder=\"Enter command...\"\n              className=\"border-none bg-transparent focus-visible:ring-0 text-white font-mono placeholder:text-gray-500 p-0 h-auto\"\n              data-testid=\"input-terminal-command\"\n            />\n          </div>\n        </div>\n      </div>\n      \n      {/* Status Bar */}\n      <div className=\"flex items-center justify-between bg-gray-900/90 border-t border-green-500/20 px-4 py-1 text-xs font-mono\">\n        <div className=\"flex items-center gap-4 text-gray-400\">\n          <div className=\"flex items-center gap-1\">\n            <Activity className=\"w-3 h-3\" />\n            <span>Session Active</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <HardDrive className=\"w-3 h-3\" />\n            <span>C:\\\\ (78% free)</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Cpu className=\"w-3 h-3\" />\n            <span>CPU: 23%</span>\n          </div>\n        </div>\n        \n        <div className=\"text-orange-400 text-xs\">\n          SIMULATION ENVIRONMENT - EDUCATIONAL USE ONLY\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11464},"client/src/components/TopNavbar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useState, useEffect } from \"react\";\nimport \"../styles/c2-navbar.css\";\n\n// Navigation dropdown item types\ntype NavDropdownItem = {\n  title: string;\n  url: string;\n  icon: string;\n  badge?: string;\n} | {\n  divider: true;\n};\n\ntype NavDropdown = {\n  title: string;\n  icon: string;\n  badge?: string;\n  items: NavDropdownItem[];\n};\n\n// Navigation dropdown configurations\nconst navDropdowns: NavDropdown[] = [\n  {\n    title: \"Sessions\",\n    icon: \"fas fa-desktop\",\n    badge: \"24\",\n    items: [\n      { title: \"All Sessions\", url: \"/sessions/all\", icon: \"fas fa-list\" },\n      { title: \"Active Sessions\", url: \"/sessions/active\", icon: \"fas fa-circle\", badge: \"2\" },\n      { title: \"Session History\", url: \"/sessions/history\", icon: \"fas fa-history\" },\n      { divider: true },\n      { title: \"New Session\", url: \"/sessions/new\", icon: \"fas fa-plus\" },\n      { title: \"Session Settings\", url: \"/sessions/settings\", icon: \"fas fa-cog\" },\n    ]\n  },\n  {\n    title: \"Payloads\",\n    icon: \"fas fa-rocket\",\n    items: [\n      { title: \"Windows Payloads\", url: \"/payloads/windows\", icon: \"fab fa-windows\" },\n      { title: \"Linux Payloads\", url: \"/payloads/linux\", icon: \"fab fa-linux\" },\n      { title: \"macOS Payloads\", url: \"/payloads/macos\", icon: \"fab fa-apple\" },\n      { divider: true },\n      { title: \"Web Payloads\", url: \"/payloads/web\", icon: \"fas fa-globe\" },\n      { title: \"Mobile Payloads\", url: \"/payloads/mobile\", icon: \"fas fa-mobile-alt\" },\n      { divider: true },\n      { title: \"Payload Generator\", url: \"/payloads/generator\", icon: \"fas fa-magic\" },\n    ]\n  },\n  {\n    title: \"Exploits\",\n    icon: \"fas fa-bug\",\n    items: [\n      { title: \"Local Exploits\", url: \"/exploits/local\", icon: \"fas fa-desktop\" },\n      { title: \"Remote Exploits\", url: \"/exploits/remote\", icon: \"fas fa-network-wired\" },\n      { title: \"Web Exploits\", url: \"/exploits/web\", icon: \"fas fa-globe\" },\n      { divider: true },\n      { title: \"Search Exploits\", url: \"/exploits/search\", icon: \"fas fa-search\" },\n      { title: \"Exploit History\", url: \"/exploits/history\", icon: \"fas fa-history\" },\n    ]\n  },\n  {\n    title: \"Modules\",\n    icon: \"fas fa-puzzle-piece\",\n    items: [\n      { title: \"Post-Exploit\", url: \"/modules/post-exploitation\", icon: \"fas fa-terminal\" },\n      { title: \"Persistence\", url: \"/modules/persistence\", icon: \"fas fa-anchor\" },\n      { title: \"Privilege Escalation\", url: \"/modules/privilege-escalation\", icon: \"fas fa-arrow-up\" },\n      { title: \"Lateral Movement\", url: \"/modules/lateral-movement\", icon: \"fas fa-arrows-alt\" },\n      { divider: true },\n      { title: \"Reconnaissance\", url: \"/modules/reconnaissance\", icon: \"fas fa-search\" },\n      { title: \"Data Exfiltration\", url: \"/modules/data-exfiltration\", icon: \"fas fa-download\" },\n      { title: \"Anti-Forensics\", url: \"/modules/anti-forensics\", icon: \"fas fa-user-secret\" },\n    ]\n  },\n  {\n    title: \"Listeners\",\n    icon: \"fas fa-broadcast-tower\",\n    items: [\n      { title: \"HTTP Listener\", url: \"/listeners/http\", icon: \"fas fa-globe\" },\n      { title: \"HTTPS Listener\", url: \"/listeners/https\", icon: \"fas fa-lock\" },\n      { title: \"TCP Listener\", url: \"/listeners/tcp\", icon: \"fas fa-network-wired\" },\n      { title: \"UDP Listener\", url: \"/listeners/udp\", icon: \"fas fa-wifi\" },\n      { title: \"DNS Listener\", url: \"/listeners/dns\", icon: \"fas fa-server\" },\n      { title: \"SMB Listener\", url: \"/listeners/smb\", icon: \"fas fa-folder-open\" },\n      { divider: true },\n      { title: \"Listener Manager\", url: \"/listeners/manager\", icon: \"fas fa-cogs\" },\n      { title: \"Templates\", url: \"/listeners/templates\", icon: \"fas fa-file-alt\" },\n    ]\n  },\n  {\n    title: \"Reports\",\n    icon: \"fas fa-chart-line\",\n    items: [\n      { title: \"Executive Summary\", url: \"/reports\", icon: \"fas fa-chart-pie\" },\n      { title: \"Technical Report\", url: \"/reports\", icon: \"fas fa-file-code\" },\n      { title: \"Attack Timeline\", url: \"/telemetry\", icon: \"fas fa-clock\" },\n      { divider: true },\n      { title: \"Evidence Collection\", url: \"/analysis\", icon: \"fas fa-folder\" },\n      { title: \"Screenshots\", url: \"/surveillance\", icon: \"fas fa-camera\" },\n      { title: \"Export Data\", url: \"/reports\", icon: \"fas fa-download\" },\n    ]\n  },\n];\n\nexport function TopNavbar() {\n  const [location] = useLocation();\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [activeDropdown, setActiveDropdown] = useState<number | null>(null);\n  const [cpuUsage] = useState(\"23%\");\n  const [ramUsage] = useState(\"67%\");\n  const [networkStatus] = useState(\"UP\");\n\n  // Update time every second\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  const formatTime = (date: Date) => {\n    return date.toLocaleString('en-US', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false\n    });\n  };\n\n  const toggleMobileMenu = () => {\n    setMobileMenuOpen(!mobileMenuOpen);\n    setActiveDropdown(null); // Close any open dropdowns when toggling mobile menu\n  };\n\n  const toggleDropdown = (index: number, event: React.MouseEvent) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setActiveDropdown(activeDropdown === index ? null : index);\n  };\n\n  const closeDropdowns = () => {\n    setActiveDropdown(null);\n  };\n\n  // Close dropdowns when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      const target = event.target as Element;\n      if (!target?.closest('.nav-dropdown')) {\n        setActiveDropdown(null);\n      }\n    };\n\n    document.addEventListener('click', handleClickOutside);\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, []);\n\n  return (\n    <>\n      {/* Terminal Status Bar */}\n      <div className=\"c2-status-bar\">\n        <div className=\"status-left\">\n          <span className=\"terminal-prompt\">root@c2-server:~$</span>\n          <span className=\"status-indicator\">\n            <i className=\"fas fa-circle\"></i> CONNECTED\n          </span>\n        </div>\n        <div className=\"status-right\">\n          <span className=\"session-info\">Session: <span>C2-7A3F9B</span></span>\n          <span className=\"timestamp\">{formatTime(currentTime)}</span>\n        </div>\n      </div>\n\n      {/* C2 Navigation Bar */}\n      <nav className=\"c2-navbar\">\n        <div className=\"nav-container\">\n          {/* Left Section - Logo */}\n          <div className=\"nav-left\">\n            <Link href=\"/\" className=\"nav-logo\">\n              <div className=\"logo-icon\">\n                <i className=\"fas fa-terminal\"></i>\n              </div>\n              <div className=\"logo-text\">\n                <span className=\"brand-name\">C2-CORE</span>\n                <span className=\"version\">v2.1.4</span>\n              </div>\n            </Link>\n          </div>\n          \n          {/* Mobile Menu Button */}\n          <div \n            className={`nav-toggle ${mobileMenuOpen ? 'active' : ''}`} \n            onClick={toggleMobileMenu}\n            data-testid=\"button-mobile-menu\"\n            role=\"button\"\n            aria-label={mobileMenuOpen ? \"Close navigation menu\" : \"Open navigation menu\"}\n            aria-expanded={mobileMenuOpen}\n          >\n            <span className=\"bar\"></span>\n            <span className=\"bar\"></span>\n            <span className=\"bar\"></span>\n          </div>\n          \n          {/* Center Section - Main Features */}\n          <div className={`nav-center ${mobileMenuOpen ? 'mobile-open' : ''}`}>\n            <div className=\"nav-menu\">\n              {navDropdowns.map((dropdown, index) => (\n                <div key={index} className={`nav-dropdown ${activeDropdown === index ? 'active' : ''}`}>\n                  <a \n                    href=\"#\" \n                    className=\"nav-link dropdown-trigger\"\n                    onClick={(e) => toggleDropdown(index, e)}\n                    data-testid={`dropdown-${dropdown.title.toLowerCase()}`}\n                    aria-expanded={activeDropdown === index}\n                  >\n                    <i className={dropdown.icon}></i>\n                    <span>{dropdown.title}</span>\n                    {dropdown.badge && <span className=\"badge\">{dropdown.badge}</span>}\n                    <i className={`fas fa-chevron-down dropdown-arrow ${activeDropdown === index ? 'rotate' : ''}`}></i>\n                  </a>\n                  <div className={`dropdown-menu ${activeDropdown === index ? 'show' : ''}`}>\n                    {dropdown.items.map((item, itemIndex) => {\n                      if ('divider' in item && item.divider) {\n                        return <div key={itemIndex} className=\"dropdown-divider\"></div>;\n                      }\n                      \n                      const navItem = item as { title: string; url: string; icon: string; badge?: string };\n                      return (\n                        <Link \n                          key={itemIndex} \n                          href={navItem.url} \n                          className=\"dropdown-item\" \n                          onClick={() => setActiveDropdown(null)}\n                          data-testid={`link-${navItem.title.toLowerCase().replace(/\\s+/g, '-')}`}\n                        >\n                          <i className={navItem.icon}></i>\n                          <span>{navItem.title}</span>\n                          {navItem.badge && <span className=\"badge small\">{navItem.badge}</span>}\n                        </Link>\n                      );\n                    })}\n                  </div>\n                </div>\n              ))}\n              \n              {/* Mobile Only - Logs and Settings */}\n              <div className=\"mobile-nav-actions\">\n                <div className=\"nav-dropdown\">\n                  <Link href=\"/logs\" className=\"nav-link\" data-testid=\"mobile-link-logs\" onClick={() => setMobileMenuOpen(false)}>\n                    <i className=\"fas fa-file-alt\"></i>\n                    <span>Logs</span>\n                  </Link>\n                </div>\n                \n                <div className={`nav-dropdown ${activeDropdown === -1 ? 'active' : ''}`}>\n                  <a \n                    href=\"#\" \n                    className=\"nav-link dropdown-trigger\"\n                    onClick={(e) => toggleDropdown(-1, e)}\n                    data-testid=\"mobile-dropdown-settings\"\n                    aria-expanded={activeDropdown === -1}\n                  >\n                    <i className=\"fas fa-cog\"></i>\n                    <span>Settings</span>\n                    <i className={`fas fa-chevron-down dropdown-arrow ${activeDropdown === -1 ? 'rotate' : ''}`}></i>\n                  </a>\n                  <div className={`dropdown-menu ${activeDropdown === -1 ? 'show' : ''}`}>\n                    <Link href=\"/settings\" className=\"dropdown-item\" data-testid=\"mobile-link-settings-general\" onClick={() => setActiveDropdown(null)}>\n                      <i className=\"fas fa-sliders-h\"></i>\n                      <span>General</span>\n                    </Link>\n                    <Link href=\"/settings\" className=\"dropdown-item\" data-testid=\"mobile-link-settings-security\" onClick={() => setActiveDropdown(null)}>\n                      <i className=\"fas fa-shield-alt\"></i>\n                      <span>Security</span>\n                    </Link>\n                    <Link href=\"/network\" className=\"dropdown-item\" data-testid=\"mobile-link-settings-network\" onClick={() => setActiveDropdown(null)}>\n                      <i className=\"fas fa-network-wired\"></i>\n                      <span>Network</span>\n                    </Link>\n                    <div className=\"dropdown-divider\"></div>\n                    <Link href=\"/users\" className=\"dropdown-item\" data-testid=\"mobile-link-user-management\" onClick={() => setActiveDropdown(null)}>\n                      <i className=\"fas fa-users\"></i>\n                      <span>User Management</span>\n                    </Link>\n                    <Link href=\"/settings\" className=\"dropdown-item\" data-testid=\"mobile-link-backup-restore\" onClick={() => setActiveDropdown(null)}>\n                      <i className=\"fas fa-database\"></i>\n                      <span>Backup & Restore</span>\n                    </Link>\n                    <Link href=\"/settings\" className=\"dropdown-item\" data-testid=\"mobile-link-about\" onClick={() => setActiveDropdown(null)}>\n                      <i className=\"fas fa-info-circle\"></i>\n                      <span>About C2-CORE</span>\n                    </Link>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* Right Section - Logs, Settings & System Status */}\n          <div className=\"nav-right\">\n            <div className=\"nav-actions\">\n              <Link href=\"/logs\" className=\"nav-link\" data-testid=\"link-logs\">\n                <i className=\"fas fa-file-alt\"></i>\n                <span>Logs</span>\n              </Link>\n              \n              {/* Settings Dropdown */}\n              <div className={`nav-dropdown ${activeDropdown === -1 ? 'active' : ''}`}>\n                <a \n                  href=\"#\" \n                  className=\"nav-link dropdown-trigger\"\n                  onClick={(e) => toggleDropdown(-1, e)}\n                  data-testid=\"dropdown-settings\"\n                  aria-expanded={activeDropdown === -1}\n                >\n                  <i className=\"fas fa-cog\"></i>\n                  <span>Settings</span>\n                  <i className={`fas fa-chevron-down dropdown-arrow ${activeDropdown === -1 ? 'rotate' : ''}`}></i>\n                </a>\n                <div className={`dropdown-menu ${activeDropdown === -1 ? 'show' : ''}`}>\n                  <Link href=\"/settings\" className=\"dropdown-item\" data-testid=\"link-settings-general\">\n                    <i className=\"fas fa-sliders-h\"></i>\n                    <span>General</span>\n                  </Link>\n                  <Link href=\"/settings\" className=\"dropdown-item\" data-testid=\"link-settings-security\">\n                    <i className=\"fas fa-shield-alt\"></i>\n                    <span>Security</span>\n                  </Link>\n                  <Link href=\"/network\" className=\"dropdown-item\" data-testid=\"link-settings-network\">\n                    <i className=\"fas fa-network-wired\"></i>\n                    <span>Network</span>\n                  </Link>\n                  <div className=\"dropdown-divider\"></div>\n                  <Link href=\"/users\" className=\"dropdown-item\" data-testid=\"link-user-management\">\n                    <i className=\"fas fa-users\"></i>\n                    <span>User Management</span>\n                  </Link>\n                  <Link href=\"/settings\" className=\"dropdown-item\" data-testid=\"link-backup-restore\">\n                    <i className=\"fas fa-database\"></i>\n                    <span>Backup & Restore</span>\n                  </Link>\n                  <Link href=\"/settings\" className=\"dropdown-item\" data-testid=\"link-about\">\n                    <i className=\"fas fa-info-circle\"></i>\n                    <span>About C2-CORE</span>\n                  </Link>\n                </div>\n              </div>\n            </div>\n            \n            {/* System Status */}\n            <div className=\"system-status\">\n              <div className=\"status-item\">\n                <i className=\"fas fa-server\"></i>\n                <span>CPU: {cpuUsage}</span>\n              </div>\n              <div className=\"status-item\">\n                <i className=\"fas fa-memory\"></i>\n                <span>RAM: {ramUsage}</span>\n              </div>\n              <div className=\"status-item\">\n                <i className=\"fas fa-network-wired\"></i>\n                <span>NET: {networkStatus}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </nav>\n    </>\n  );\n}","size_bytes":16115},"client/src/data/mockClients.ts":{"content":"import type { Client } from '@/../../shared/schema';\n\n// Comprehensive mock data for C2 client management\nexport const mockClients: Client[] = [\n  // Corporate Windows workstations\n  {\n    id: \"client-001\",\n    hostname: \"CORP-WIN-001\",\n    ipAddress: \"192.168.1.45\",\n    macAddress: \"00:1A:2B:3C:4D:5E\",\n    \n    operatingSystem: \"Windows 11 Pro\",\n    osVersion: \"22H2 (Build 22621.2428)\",\n    architecture: \"x64\",\n    processorType: \"Intel Core i7-12700K\",\n    totalMemory: 32,\n    \n    country: \"United States\",\n    city: \"New York\",\n    region: \"NY\",\n    latitude: \"40.7128\",\n    longitude: \"-74.0060\",\n    timezone: \"America/New_York\",\n    \n    status: \"online\",\n    lastSeen: new Date(Date.now() - 5 * 60 * 1000), // 5 minutes ago\n    firstSeen: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 7 days ago\n    uptime: 345600, // 4 days in seconds\n    connectionQuality: \"excellent\",\n    \n    currentUser: \"j.smith\",\n    isElevated: true,\n    availablePrivileges: [\"admin\", \"debug\", \"backup\"],\n    userAccounts: [\n      { username: \"j.smith\", isAdmin: true, isActive: true, groups: [\"Administrators\", \"Domain Admins\"] },\n      { username: \"backup_svc\", isAdmin: false, isActive: true, groups: [\"Backup Operators\"] }\n    ],\n    \n    installedSoftware: [\n      { name: \"Microsoft Office 365\", version: \"16.0.16827\", vendor: \"Microsoft\", isSystemCritical: false },\n      { name: \"Google Chrome\", version: \"119.0.6045.199\", vendor: \"Google\", isSystemCritical: false },\n      { name: \"Windows Defender\", version: \"4.18.23110.3\", vendor: \"Microsoft\", isSystemCritical: true }\n    ],\n    \n    runningProcesses: [\n      { pid: 1234, name: \"chrome.exe\", cpu: 15.2, memory: 512, user: \"j.smith\", startTime: new Date() },\n      { pid: 5678, name: \"outlook.exe\", cpu: 3.1, memory: 256, user: \"j.smith\", startTime: new Date() }\n    ],\n    \n    openPorts: [\n      { port: 445, protocol: \"TCP\", state: \"LISTENING\", service: \"SMB\", processName: \"System\" },\n      { port: 3389, protocol: \"TCP\", state: \"LISTENING\", service: \"RDP\", processName: \"svchost.exe\" }\n    ],\n    \n    networkInterfaces: [\n      { name: \"Ethernet\", type: \"ethernet\", ipAddress: \"192.168.1.45\", macAddress: \"00:1A:2B:3C:4D:5E\", isActive: true, speed: 1000 }\n    ],\n    \n    riskLevel: \"high\",\n    vulnerabilityCount: 8,\n    difficulty: \"intermediate\",\n    \n    tags: [\"corporate\", \"finance\", \"critical\"],\n    notes: \"Domain controller with elevated privileges. High-value target for lateral movement.\",\n    isActive: true,\n    \n    createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),\n    updatedAt: new Date(Date.now() - 5 * 60 * 1000)\n  },\n\n  // Linux server - compromised\n  {\n    id: \"client-002\",\n    hostname: \"web-server-01\",\n    ipAddress: \"10.0.0.25\",\n    macAddress: \"02:42:AC:11:00:02\",\n    \n    operatingSystem: \"Ubuntu Server\",\n    osVersion: \"22.04.3 LTS\",\n    architecture: \"x64\",\n    processorType: \"AMD EPYC 7502P\",\n    totalMemory: 64,\n    \n    country: \"Germany\",\n    city: \"Frankfurt\",\n    region: \"Hesse\",\n    latitude: \"50.1109\",\n    longitude: \"8.6821\",\n    timezone: \"Europe/Berlin\",\n    \n    status: \"compromised\",\n    lastSeen: new Date(Date.now() - 30 * 1000), // 30 seconds ago\n    firstSeen: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000), // 14 days ago\n    uptime: 1209600, // 14 days in seconds\n    connectionQuality: \"good\",\n    \n    currentUser: \"www-data\",\n    isElevated: false,\n    availablePrivileges: [\"read\", \"execute\"],\n    userAccounts: [\n      { username: \"root\", isAdmin: true, isActive: true, groups: [\"root\"] },\n      { username: \"www-data\", isAdmin: false, isActive: true, groups: [\"www-data\"] },\n      { username: \"ubuntu\", isAdmin: true, isActive: true, groups: [\"sudo\", \"admin\"] }\n    ],\n    \n    installedSoftware: [\n      { name: \"Apache HTTP Server\", version: \"2.4.52\", vendor: \"Apache Software Foundation\", isSystemCritical: true },\n      { name: \"PHP\", version: \"8.1.2\", vendor: \"The PHP Group\", isSystemCritical: true },\n      { name: \"MySQL Server\", version: \"8.0.35\", vendor: \"Oracle Corporation\", isSystemCritical: true }\n    ],\n    \n    runningProcesses: [\n      { pid: 1001, name: \"apache2\", cpu: 8.5, memory: 128, user: \"www-data\", startTime: new Date() },\n      { pid: 1002, name: \"mysqld\", cpu: 12.3, memory: 1024, user: \"mysql\", startTime: new Date() }\n    ],\n    \n    openPorts: [\n      { port: 80, protocol: \"TCP\", state: \"LISTENING\", service: \"HTTP\", processName: \"apache2\" },\n      { port: 443, protocol: \"TCP\", state: \"LISTENING\", service: \"HTTPS\", processName: \"apache2\" },\n      { port: 22, protocol: \"TCP\", state: \"LISTENING\", service: \"SSH\", processName: \"sshd\" }\n    ],\n    \n    networkInterfaces: [\n      { name: \"eth0\", type: \"ethernet\", ipAddress: \"10.0.0.25\", macAddress: \"02:42:AC:11:00:02\", isActive: true, speed: 10000 }\n    ],\n    \n    riskLevel: \"critical\",\n    vulnerabilityCount: 15,\n    difficulty: \"advanced\",\n    \n    tags: [\"web-server\", \"php\", \"database\", \"production\"],\n    notes: \"Web server with shell access obtained. Contains customer database and sensitive information.\",\n    isActive: true,\n    \n    createdAt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000),\n    updatedAt: new Date(Date.now() - 30 * 1000)\n  },\n\n  // MacOS developer workstation\n  {\n    id: \"client-003\",\n    hostname: \"MacBook-Pro-Dev\",\n    ipAddress: \"172.16.0.100\",\n    macAddress: \"88:66:5A:10:3B:2C\",\n    \n    operatingSystem: \"macOS Sonoma\",\n    osVersion: \"14.1.2 (23B92)\",\n    architecture: \"arm64\",\n    processorType: \"Apple M2 Pro\",\n    totalMemory: 16,\n    \n    country: \"Canada\",\n    city: \"Toronto\",\n    region: \"ON\",\n    latitude: \"43.6532\",\n    longitude: \"-79.3832\",\n    timezone: \"America/Toronto\",\n    \n    status: \"online\",\n    lastSeen: new Date(Date.now() - 2 * 60 * 1000), // 2 minutes ago\n    firstSeen: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // 3 days ago\n    uptime: 259200, // 3 days in seconds\n    connectionQuality: \"fair\",\n    \n    currentUser: \"dev.user\",\n    isElevated: false,\n    availablePrivileges: [\"read\", \"execute\", \"write\"],\n    userAccounts: [\n      { username: \"root\", isAdmin: true, isActive: true, groups: [\"wheel\"] },\n      { username: \"dev.user\", isAdmin: false, isActive: true, groups: [\"staff\", \"admin\"] }\n    ],\n    \n    installedSoftware: [\n      { name: \"Xcode\", version: \"15.1\", vendor: \"Apple Inc.\", isSystemCritical: false },\n      { name: \"Visual Studio Code\", version: \"1.84.2\", vendor: \"Microsoft\", isSystemCritical: false },\n      { name: \"Docker Desktop\", version: \"4.25.2\", vendor: \"Docker Inc.\", isSystemCritical: false }\n    ],\n    \n    runningProcesses: [\n      { pid: 2001, name: \"Xcode\", cpu: 25.8, memory: 2048, user: \"dev.user\", startTime: new Date() },\n      { pid: 2002, name: \"Code\", cpu: 5.2, memory: 512, user: \"dev.user\", startTime: new Date() }\n    ],\n    \n    openPorts: [\n      { port: 22, protocol: \"TCP\", state: \"LISTENING\", service: \"SSH\", processName: \"sshd\" },\n      { port: 8080, protocol: \"TCP\", state: \"LISTENING\", service: \"HTTP-Alt\", processName: \"node\" }\n    ],\n    \n    networkInterfaces: [\n      { name: \"en0\", type: \"wifi\", ipAddress: \"172.16.0.100\", macAddress: \"88:66:5A:10:3B:2C\", isActive: true, speed: 867 }\n    ],\n    \n    riskLevel: \"medium\",\n    vulnerabilityCount: 3,\n    difficulty: \"beginner\",\n    \n    tags: [\"developer\", \"mac\", \"mobile-dev\"],\n    notes: \"Developer workstation with source code access. Potential intellectual property target.\",\n    isActive: true,\n    \n    createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),\n    updatedAt: new Date(Date.now() - 2 * 60 * 1000)\n  },\n\n  // Windows domain controller - offline\n  {\n    id: \"client-004\",\n    hostname: \"DC-PRIMARY\",\n    ipAddress: \"192.168.1.10\",\n    macAddress: \"00:50:56:A1:B2:C3\",\n    \n    operatingSystem: \"Windows Server 2022\",\n    osVersion: \"21H2 (Build 20348.2113)\",\n    architecture: \"x64\",\n    processorType: \"Intel Xeon E5-2680 v4\",\n    totalMemory: 128,\n    \n    country: \"United Kingdom\",\n    city: \"London\",\n    region: \"England\",\n    latitude: \"51.5074\",\n    longitude: \"-0.1278\",\n    timezone: \"Europe/London\",\n    \n    status: \"offline\",\n    lastSeen: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago\n    firstSeen: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // 30 days ago\n    uptime: 0, // currently offline\n    connectionQuality: \"poor\",\n    \n    currentUser: \"SYSTEM\",\n    isElevated: true,\n    availablePrivileges: [\"admin\", \"system\", \"debug\", \"backup\"],\n    userAccounts: [\n      { username: \"Administrator\", isAdmin: true, isActive: true, groups: [\"Domain Admins\", \"Enterprise Admins\"] },\n      { username: \"krbtgt\", isAdmin: false, isActive: false, groups: [\"Domain Users\"] }\n    ],\n    \n    installedSoftware: [\n      { name: \"Active Directory Domain Services\", version: \"10.0.20348\", vendor: \"Microsoft\", isSystemCritical: true },\n      { name: \"DNS Server\", version: \"10.0.20348\", vendor: \"Microsoft\", isSystemCritical: true },\n      { name: \"DHCP Server\", version: \"10.0.20348\", vendor: \"Microsoft\", isSystemCritical: true }\n    ],\n    \n    runningProcesses: [], // offline, no processes\n    \n    openPorts: [\n      { port: 389, protocol: \"TCP\", state: \"LISTENING\", service: \"LDAP\", processName: \"lsass.exe\" },\n      { port: 53, protocol: \"UDP\", state: \"LISTENING\", service: \"DNS\", processName: \"dns.exe\" }\n    ],\n    \n    networkInterfaces: [\n      { name: \"Ethernet\", type: \"ethernet\", ipAddress: \"192.168.1.10\", macAddress: \"00:50:56:A1:B2:C3\", isActive: false, speed: 1000 }\n    ],\n    \n    riskLevel: \"critical\",\n    vulnerabilityCount: 12,\n    difficulty: \"advanced\",\n    \n    tags: [\"domain-controller\", \"critical\", \"ad\", \"dns\", \"dhcp\"],\n    notes: \"Primary domain controller. CRITICAL TARGET - Controls entire domain infrastructure.\",\n    isActive: true,\n    \n    createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),\n    updatedAt: new Date(Date.now() - 2 * 60 * 60 * 1000)\n  },\n\n  // Android mobile device\n  {\n    id: \"client-005\",\n    hostname: \"Galaxy-S23-Ultra\",\n    ipAddress: \"192.168.43.157\",\n    macAddress: \"A4:C3:F0:85:AC:2D\",\n    \n    operatingSystem: \"Android\",\n    osVersion: \"14 (API 34)\",\n    architecture: \"arm64-v8a\",\n    processorType: \"Snapdragon 8 Gen 2\",\n    totalMemory: 8,\n    \n    country: \"Japan\",\n    city: \"Tokyo\",\n    region: \"Tokyo\",\n    latitude: \"35.6762\",\n    longitude: \"139.6503\",\n    timezone: \"Asia/Tokyo\",\n    \n    status: \"online\",\n    lastSeen: new Date(Date.now() - 1 * 60 * 1000), // 1 minute ago\n    firstSeen: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000), // 5 days ago\n    uptime: 86400, // 1 day in seconds\n    connectionQuality: \"good\",\n    \n    currentUser: \"android_user\",\n    isElevated: true, // rooted device\n    availablePrivileges: [\"root\", \"system\"],\n    userAccounts: [\n      { username: \"root\", isAdmin: true, isActive: true, groups: [\"root\"] },\n      { username: \"system\", isAdmin: false, isActive: true, groups: [\"system\"] }\n    ],\n    \n    installedSoftware: [\n      { name: \"Chrome\", version: \"119.0.6045.193\", vendor: \"Google\", isSystemCritical: false },\n      { name: \"WhatsApp\", version: \"2.23.24.21\", vendor: \"Meta\", isSystemCritical: false },\n      { name: \"Banking App\", version: \"12.4.1\", vendor: \"MUFG Bank\", isSystemCritical: false }\n    ],\n    \n    runningProcesses: [\n      { pid: 3001, name: \"com.android.chrome\", cpu: 8.2, memory: 256, user: \"u0_a123\", startTime: new Date() },\n      { pid: 3002, name: \"com.whatsapp\", cpu: 2.1, memory: 128, user: \"u0_a456\", startTime: new Date() }\n    ],\n    \n    openPorts: [\n      { port: 5555, protocol: \"TCP\", state: \"LISTENING\", service: \"ADB\", processName: \"adbd\" }\n    ],\n    \n    networkInterfaces: [\n      { name: \"wlan0\", type: \"wifi\", ipAddress: \"192.168.43.157\", macAddress: \"A4:C3:F0:85:AC:2D\", isActive: true, speed: 300 }\n    ],\n    \n    riskLevel: \"high\",\n    vulnerabilityCount: 6,\n    difficulty: \"intermediate\",\n    \n    tags: [\"mobile\", \"android\", \"rooted\", \"banking\"],\n    notes: \"Rooted Android device with banking apps. High-value target for financial fraud.\",\n    isActive: true,\n    \n    createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),\n    updatedAt: new Date(Date.now() - 1 * 60 * 1000)\n  },\n\n  // Linux IoT device\n  {\n    id: \"client-006\",\n    hostname: \"rpi-security-cam-01\",\n    ipAddress: \"192.168.1.200\",\n    macAddress: \"B8:27:EB:12:34:56\",\n    \n    operatingSystem: \"Raspberry Pi OS\",\n    osVersion: \"Debian GNU/Linux 12 (bookworm)\",\n    architecture: \"armv7l\",\n    processorType: \"ARM Cortex-A72\",\n    totalMemory: 4,\n    \n    country: \"Australia\",\n    city: \"Sydney\",\n    region: \"NSW\",\n    latitude: \"-33.8688\",\n    longitude: \"151.2093\",\n    timezone: \"Australia/Sydney\",\n    \n    status: \"compromised\",\n    lastSeen: new Date(Date.now() - 10 * 1000), // 10 seconds ago\n    firstSeen: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000), // 90 days ago\n    uptime: 2592000, // 30 days in seconds\n    connectionQuality: \"excellent\",\n    \n    currentUser: \"pi\",\n    isElevated: false,\n    availablePrivileges: [\"read\", \"execute\"],\n    userAccounts: [\n      { username: \"root\", isAdmin: true, isActive: true, groups: [\"root\"] },\n      { username: \"pi\", isAdmin: true, isActive: true, groups: [\"sudo\", \"adm\", \"dialout\"] }\n    ],\n    \n    installedSoftware: [\n      { name: \"Motion\", version: \"4.5.1\", vendor: \"Motion Project\", isSystemCritical: true },\n      { name: \"OpenSSH Server\", version: \"9.2p1\", vendor: \"OpenBSD\", isSystemCritical: true },\n      { name: \"Python\", version: \"3.11.2\", vendor: \"Python Software Foundation\", isSystemCritical: false }\n    ],\n    \n    runningProcesses: [\n      { pid: 1500, name: \"motion\", cpu: 15.6, memory: 64, user: \"pi\", startTime: new Date() },\n      { pid: 1501, name: \"sshd\", cpu: 0.1, memory: 8, user: \"root\", startTime: new Date() }\n    ],\n    \n    openPorts: [\n      { port: 22, protocol: \"TCP\", state: \"LISTENING\", service: \"SSH\", processName: \"sshd\" },\n      { port: 8081, protocol: \"TCP\", state: \"LISTENING\", service: \"Motion-HTTP\", processName: \"motion\" }\n    ],\n    \n    networkInterfaces: [\n      { name: \"eth0\", type: \"ethernet\", ipAddress: \"192.168.1.200\", macAddress: \"B8:27:EB:12:34:56\", isActive: true, speed: 100 }\n    ],\n    \n    riskLevel: \"medium\",\n    vulnerabilityCount: 4,\n    difficulty: \"beginner\",\n    \n    tags: [\"iot\", \"raspberry-pi\", \"camera\", \"surveillance\"],\n    notes: \"IoT security camera with weak credentials. Provides network surveillance capabilities.\",\n    isActive: true,\n    \n    createdAt: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000),\n    updatedAt: new Date(Date.now() - 10 * 1000)\n  }\n];\n\n// Helper functions for data analysis\nexport const getClientsByStatus = (clients: Client[]) => {\n  return clients.reduce((acc, client) => {\n    acc[client.status] = (acc[client.status] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n};\n\nexport const getClientsByOS = (clients: Client[]) => {\n  return clients.reduce((acc, client) => {\n    const os = client.operatingSystem.split(' ')[0]; // Get base OS name\n    acc[os] = (acc[os] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n};\n\nexport const getClientsByCountry = (clients: Client[]) => {\n  return clients.reduce((acc, client) => {\n    if (client.country) {\n      acc[client.country] = (acc[client.country] || 0) + 1;\n    }\n    return acc;\n  }, {} as Record<string, number>);\n};\n\nexport const getClientsByRiskLevel = (clients: Client[]) => {\n  return clients.reduce((acc, client) => {\n    if (client.riskLevel) {\n      acc[client.riskLevel] = (acc[client.riskLevel] || 0) + 1;\n    }\n    return acc;\n  }, {} as Record<string, number>);\n};\n\nexport const getRecentActivity = (clients: Client[], hours: number = 24) => {\n  const cutoff = new Date(Date.now() - hours * 60 * 60 * 1000);\n  return clients.filter(client => \n    client.lastSeen && new Date(client.lastSeen) > cutoff\n  );\n};","size_bytes":15766},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/ClientsPage.tsx":{"content":"import { ClientCard } from \"@/components/ClientCard\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Search, Filter, Plus, RefreshCw, Download, Upload, Zap, Globe,\n  Users, Shield, AlertTriangle, CheckCircle, Activity, MapPin,\n  Terminal, HardDrive, Eye, Trash2, PlayCircle, Settings, PauseCircle\n} from \"lucide-react\";\nimport { useState, useMemo } from \"react\";\nimport { mockClients, getClientsByStatus, getClientsByOS, getClientsByCountry, getClientsByRiskLevel, getRecentActivity } from \"@/data/mockClients\";\nimport type { Client } from '@/../../shared/schema';\n\nexport default function ClientsPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [osFilter, setOSFilter] = useState<string>(\"all\");\n  const [locationFilter, setLocationFilter] = useState<string>(\"all\");\n  const [riskFilter, setRiskFilter] = useState<string>(\"all\");\n  const [privilegeFilter, setPrivilegeFilter] = useState<string>(\"all\");\n  const [sortBy, setSortBy] = useState<string>(\"lastSeen\");\n  const [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\">(\"desc\");\n  const [selectedClients, setSelectedClients] = useState<Set<string>>(new Set());\n  const [bulkPanelOpen, setBulkPanelOpen] = useState(false);\n\n  // Statistics calculations\n  const statusCounts = getClientsByStatus(mockClients);\n  const osCounts = getClientsByOS(mockClients);\n  const countryCounts = getClientsByCountry(mockClients);\n  const riskCounts = getClientsByRiskLevel(mockClients);\n  const recentActivity = getRecentActivity(mockClients, 24);\n\n  // Filtering and sorting logic\n  const filteredClients = useMemo(() => {\n    let filtered = mockClients.filter(client => {\n      // Search filter\n      const matchesSearch = searchQuery === \"\" || \n        client.hostname.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        client.ipAddress.includes(searchQuery) ||\n        client.operatingSystem.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        client.country?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        client.city?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        client.currentUser?.toLowerCase().includes(searchQuery.toLowerCase());\n\n      // Status filter\n      const matchesStatus = statusFilter === \"all\" || client.status === statusFilter;\n\n      // OS filter\n      const matchesOS = osFilter === \"all\" || client.operatingSystem.toLowerCase().includes(osFilter.toLowerCase());\n\n      // Location filter\n      const matchesLocation = locationFilter === \"all\" || client.country === locationFilter;\n\n      // Risk filter\n      const matchesRisk = riskFilter === \"all\" || client.riskLevel === riskFilter;\n\n      // Privilege filter\n      const matchesPrivilege = privilegeFilter === \"all\" || \n        (privilegeFilter === \"elevated\" && client.isElevated) ||\n        (privilegeFilter === \"standard\" && !client.isElevated);\n\n      return matchesSearch && matchesStatus && matchesOS && matchesLocation && matchesRisk && matchesPrivilege;\n    });\n\n    // Sorting\n    filtered.sort((a, b) => {\n      let aVal, bVal;\n      \n      switch (sortBy) {\n        case 'hostname':\n          aVal = a.hostname.toLowerCase();\n          bVal = b.hostname.toLowerCase();\n          break;\n        case 'lastSeen':\n          aVal = new Date(a.lastSeen || 0).getTime();\n          bVal = new Date(b.lastSeen || 0).getTime();\n          break;\n        case 'status':\n          aVal = a.status;\n          bVal = b.status;\n          break;\n        case 'risk':\n          const riskOrder = { low: 1, medium: 2, high: 3, critical: 4 };\n          aVal = riskOrder[a.riskLevel as keyof typeof riskOrder] || 0;\n          bVal = riskOrder[b.riskLevel as keyof typeof riskOrder] || 0;\n          break;\n        case 'vulnerabilities':\n          aVal = a.vulnerabilityCount || 0;\n          bVal = b.vulnerabilityCount || 0;\n          break;\n        default:\n          aVal = a.hostname.toLowerCase();\n          bVal = b.hostname.toLowerCase();\n      }\n\n      if (sortOrder === 'asc') {\n        return aVal < bVal ? -1 : aVal > bVal ? 1 : 0;\n      } else {\n        return aVal > bVal ? -1 : aVal < bVal ? 1 : 0;\n      }\n    });\n\n    return filtered;\n  }, [searchQuery, statusFilter, osFilter, locationFilter, riskFilter, privilegeFilter, sortBy, sortOrder]);\n\n  const handleClientSelect = (clientId: string, selected: boolean) => {\n    const newSelection = new Set(selectedClients);\n    if (selected) {\n      newSelection.add(clientId);\n    } else {\n      newSelection.delete(clientId);\n    }\n    setSelectedClients(newSelection);\n  };\n\n  const handleSelectAll = () => {\n    if (selectedClients.size === filteredClients.length) {\n      setSelectedClients(new Set());\n    } else {\n      setSelectedClients(new Set(filteredClients.map(c => c.id)));\n    }\n  };\n\n  const handleBulkAction = (action: string) => {\n    console.log(`Executing bulk action: ${action} on ${selectedClients.size} clients`);\n    // Implement bulk actions here\n  };\n\n  const handleClientConnect = (clientId: string, connectionType: string) => {\n    console.log(`Connecting to client ${clientId} with type: ${connectionType}`);\n    // Implement connection logic\n  };\n\n  const handleViewDetails = (clientId: string) => {\n    console.log(`Viewing details for client: ${clientId}`);\n    // Implement details view\n  };\n\n  const clearFilters = () => {\n    setSearchQuery(\"\");\n    setStatusFilter(\"all\");\n    setOSFilter(\"all\");\n    setLocationFilter(\"all\");\n    setRiskFilter(\"all\");\n    setPrivilegeFilter(\"all\");\n  };\n\n  return (\n    <div className=\"space-y-6 p-6\" data-testid=\"clients-page\">\n      {/* Header */}\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-semibold gov-header\">Client Management</h1>\n            <p className=\"text-muted-foreground\">\n              Comprehensive C2 client monitoring and management interface\n            </p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-refresh\">\n              <RefreshCw className=\"w-4 h-4 mr-2\" />\n              Refresh\n            </Button>\n            <Button data-testid=\"button-add-client\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Client\n            </Button>\n          </div>\n        </div>\n\n        {/* Statistics Dashboard */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <Card className=\"gov-card\">\n            <CardHeader className=\"pb-2\">\n              <CardDescription className=\"text-xs uppercase tracking-wide\">Total Clients</CardDescription>\n              <CardTitle className=\"text-2xl font-bold\">{mockClients.length}</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-xs text-muted-foreground\">\n                {recentActivity.length} active in 24h\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"gov-card\">\n            <CardHeader className=\"pb-2\">\n              <CardDescription className=\"text-xs uppercase tracking-wide flex items-center gap-1\">\n                <CheckCircle className=\"w-3 h-3\" />\n                Online\n              </CardDescription>\n              <CardTitle className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\n                {statusCounts.online || 0}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Progress \n                value={(statusCounts.online || 0) / mockClients.length * 100} \n                className=\"h-1.5\"\n              />\n            </CardContent>\n          </Card>\n\n          <Card className=\"gov-card\">\n            <CardHeader className=\"pb-2\">\n              <CardDescription className=\"text-xs uppercase tracking-wide flex items-center gap-1\">\n                <AlertTriangle className=\"w-3 h-3\" />\n                Compromised\n              </CardDescription>\n              <CardTitle className=\"text-2xl font-bold text-amber-600 dark:text-amber-400\">\n                {statusCounts.compromised || 0}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Progress \n                value={(statusCounts.compromised || 0) / mockClients.length * 100} \n                className=\"h-1.5\"\n              />\n            </CardContent>\n          </Card>\n\n          <Card className=\"gov-card\">\n            <CardHeader className=\"pb-2\">\n              <CardDescription className=\"text-xs uppercase tracking-wide flex items-center gap-1\">\n                <Shield className=\"w-3 h-3\" />\n                High Risk\n              </CardDescription>\n              <CardTitle className=\"text-2xl font-bold text-red-600 dark:text-red-400\">\n                {(riskCounts.high || 0) + (riskCounts.critical || 0)}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-xs text-muted-foreground\">\n                Requires immediate attention\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Filters and Search */}\n      <Card className=\"gov-card\">\n        <CardHeader>\n          <CardTitle className=\"text-base\">Filters & Search</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Search Bar */}\n          <div className=\"relative flex-1\">\n            <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" />\n            <Input \n              placeholder=\"Search clients by hostname, IP, OS, location, or user...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-clients\"\n            />\n          </div>\n\n          {/* Filter Controls */}\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-3\">\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"online\">Online</SelectItem>\n                <SelectItem value=\"offline\">Offline</SelectItem>\n                <SelectItem value=\"compromised\">Compromised</SelectItem>\n                <SelectItem value=\"error\">Error</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={osFilter} onValueChange={setOSFilter}>\n              <SelectTrigger data-testid=\"select-os-filter\">\n                <SelectValue placeholder=\"OS\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All OS</SelectItem>\n                <SelectItem value=\"windows\">Windows</SelectItem>\n                <SelectItem value=\"linux\">Linux</SelectItem>\n                <SelectItem value=\"macos\">macOS</SelectItem>\n                <SelectItem value=\"android\">Android</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={locationFilter} onValueChange={setLocationFilter}>\n              <SelectTrigger data-testid=\"select-location-filter\">\n                <SelectValue placeholder=\"Location\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Locations</SelectItem>\n                {Object.keys(countryCounts).map(country => (\n                  <SelectItem key={country} value={country}>{country}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={riskFilter} onValueChange={setRiskFilter}>\n              <SelectTrigger data-testid=\"select-risk-filter\">\n                <SelectValue placeholder=\"Risk Level\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Risk</SelectItem>\n                <SelectItem value=\"low\">Low</SelectItem>\n                <SelectItem value=\"medium\">Medium</SelectItem>\n                <SelectItem value=\"high\">High</SelectItem>\n                <SelectItem value=\"critical\">Critical</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={privilegeFilter} onValueChange={setPrivilegeFilter}>\n              <SelectTrigger data-testid=\"select-privilege-filter\">\n                <SelectValue placeholder=\"Privileges\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Privileges</SelectItem>\n                <SelectItem value=\"elevated\">Elevated</SelectItem>\n                <SelectItem value=\"standard\">Standard</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={`${sortBy}-${sortOrder}`} onValueChange={(value) => {\n              const [sort, order] = value.split('-');\n              setSortBy(sort);\n              setSortOrder(order as \"asc\" | \"desc\");\n            }}>\n              <SelectTrigger data-testid=\"select-sort\">\n                <SelectValue placeholder=\"Sort\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"hostname-asc\">Hostname A-Z</SelectItem>\n                <SelectItem value=\"hostname-desc\">Hostname Z-A</SelectItem>\n                <SelectItem value=\"lastSeen-desc\">Last Seen (Recent)</SelectItem>\n                <SelectItem value=\"lastSeen-asc\">Last Seen (Oldest)</SelectItem>\n                <SelectItem value=\"status-asc\">Status</SelectItem>\n                <SelectItem value=\"risk-desc\">Risk (High to Low)</SelectItem>\n                <SelectItem value=\"vulnerabilities-desc\">Most Vulnerable</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Filter Summary and Clear */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm text-muted-foreground\">\n                Showing {filteredClients.length} of {mockClients.length} clients\n              </span>\n              {(searchQuery || statusFilter !== \"all\" || osFilter !== \"all\" || locationFilter !== \"all\" || riskFilter !== \"all\" || privilegeFilter !== \"all\") && (\n                <Button variant=\"ghost\" size=\"sm\" onClick={clearFilters} data-testid=\"button-clear-filters\">\n                  Clear Filters\n                </Button>\n              )}\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Checkbox\n                checked={selectedClients.size === filteredClients.length && filteredClients.length > 0}\n                onCheckedChange={handleSelectAll}\n                data-testid=\"checkbox-select-all\"\n              />\n              <span className=\"text-sm text-muted-foreground\">Select All</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Bulk Operations Panel */}\n      {selectedClients.size > 0 && (\n        <Card className=\"gov-card border-primary\">\n          <CardHeader>\n            <CardTitle className=\"text-base flex items-center gap-2\">\n              <Zap className=\"w-4 h-4\" />\n              Bulk Operations ({selectedClients.size} clients selected)\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-wrap items-center gap-2\">\n              <Button size=\"sm\" onClick={() => handleBulkAction('execute')} data-testid=\"button-bulk-execute\">\n                <Terminal className=\"w-3 h-3 mr-1\" />\n                Execute Command\n              </Button>\n              <Button size=\"sm\" variant=\"outline\" onClick={() => handleBulkAction('upload')} data-testid=\"button-bulk-upload\">\n                <Upload className=\"w-3 h-3 mr-1\" />\n                Upload File\n              </Button>\n              <Button size=\"sm\" variant=\"outline\" onClick={() => handleBulkAction('download')} data-testid=\"button-bulk-download\">\n                <Download className=\"w-3 h-3 mr-1\" />\n                Download Files\n              </Button>\n              <Button size=\"sm\" variant=\"outline\" onClick={() => handleBulkAction('surveillance')} data-testid=\"button-bulk-surveillance\">\n                <Eye className=\"w-3 h-3 mr-1\" />\n                Start Surveillance\n              </Button>\n              <Button size=\"sm\" variant=\"outline\" onClick={() => handleBulkAction('pause')} data-testid=\"button-bulk-pause\">\n                <PauseCircle className=\"w-3 h-3 mr-1\" />\n                Pause Sessions\n              </Button>\n              <Separator orientation=\"vertical\" className=\"h-6\" />\n              <Button size=\"sm\" variant=\"destructive\" onClick={() => handleBulkAction('remove')} data-testid=\"button-bulk-remove\">\n                <Trash2 className=\"w-3 h-3 mr-1\" />\n                Remove\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Geographic Distribution */}\n      <Card className=\"gov-card\">\n        <CardHeader>\n          <CardTitle className=\"text-base flex items-center gap-2\">\n            <Globe className=\"w-4 h-4\" />\n            Geographic Distribution\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-3\">\n            {Object.entries(countryCounts).map(([country, count]) => (\n              <div key={country} className=\"flex items-center justify-between p-2 rounded-lg bg-muted/30\">\n                <span className=\"text-sm font-medium\">{country}</span>\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  {count}\n                </Badge>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Client Grid */}\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-lg font-semibold gov-header\">\n            Active Clients ({filteredClients.length})\n          </h2>\n        </div>\n\n        {filteredClients.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <div className=\"mx-auto w-12 h-12 bg-muted rounded-full flex items-center justify-center mb-4\">\n              <Users className=\"w-6 h-6 text-muted-foreground\" />\n            </div>\n            <p className=\"text-muted-foreground\">No clients found matching your criteria.</p>\n            <Button variant=\"ghost\" className=\"mt-2\" onClick={clearFilters}>\n              Clear all filters\n            </Button>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4\">\n            {filteredClients.map((client) => (\n              <ClientCard\n                key={client.id}\n                {...client}\n                onConnect={handleClientConnect}\n                onViewDetails={handleViewDetails}\n                onSelect={handleClientSelect}\n                isSelected={selectedClients.has(client.id)}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":19807},"client/src/pages/Dashboard.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Shield, Target, Terminal, Activity, Play, Server, \n  Globe, Users, Clock, AlertTriangle, CheckCircle2,\n  Network, FileText, Settings, Eye, MapPin, Zap,\n  Monitor, Wifi, WifiOff, Skull, Lock, Unlock,\n  ArrowUp, ArrowDown, Minus, ChevronRight, \n  Command, Radio, Database, HardDrive, Cpu,\n  Signal, AlertCircle, TrendingUp, BarChart3,\n  Hash, Calendar, Download, Upload, Filter,\n  RefreshCw, Search, MoreHorizontal, ExternalLink\n} from \"lucide-react\";\n\nexport default function Dashboard() {\n  // Global C2 Statistics\n  const globalStats = [\n    { \n      label: \"Total Assets\", \n      value: \"247\", \n      icon: Users, \n      color: \"text-cyan-400\",\n      trend: \"+12\",\n      trendDirection: \"up\"\n    },\n    { \n      label: \"Compromised Assets\", \n      value: \"89\", \n      icon: Skull, \n      color: \"text-red-400\",\n      trend: \"+7\",\n      trendDirection: \"up\"\n    },\n    { \n      label: \"C2 Sessions\", \n      value: \"34\", \n      icon: Terminal, \n      color: \"text-green-400\",\n      trend: \"0\",\n      trendDirection: \"stable\"\n    },\n    { \n      label: \"Operation Success\", \n      value: \"94.7%\", \n      icon: Target, \n      color: \"text-amber-400\",\n      trend: \"+2.1%\",\n      trendDirection: \"up\"\n    },\n  ];\n\n  // World Map Asset Locations\n  const assetLocations = [\n    { id: \"us-east\", name: \"US East Coast\", lat: 40.7128, lng: -74.0060, assets: 45, status: \"online\", country: \"United States\" },\n    { id: \"us-west\", name: \"US West Coast\", lat: 34.0522, lng: -118.2437, assets: 32, status: \"compromised\", country: \"United States\" },\n    { id: \"eu-central\", name: \"EU Central\", lat: 50.1109, lng: 8.6821, assets: 28, status: \"online\", country: \"Germany\" },\n    { id: \"asia-pacific\", name: \"Asia Pacific\", lat: 35.6762, lng: 139.6503, assets: 19, status: \"offline\", country: \"Japan\" },\n    { id: \"uk\", name: \"United Kingdom\", lat: 51.5074, lng: -0.1278, assets: 23, status: \"online\", country: \"United Kingdom\" },\n    { id: \"canada\", name: \"Canada\", lat: 45.4215, lng: -75.6972, assets: 15, status: \"compromised\", country: \"Canada\" },\n    { id: \"australia\", name: \"Australia\", lat: -33.8688, lng: 151.2093, assets: 12, status: \"online\", country: \"Australia\" },\n    { id: \"brazil\", name: \"Brazil\", lat: -23.5505, lng: -46.6333, assets: 8, status: \"offline\", country: \"Brazil\" }\n  ];\n\n  // Active Sessions Data\n  const activeSessions = [\n    {\n      id: \"sess-001\",\n      hostname: \"DESKTOP-A7X9K2L\",\n      ip: \"192.168.1.105\",\n      os: \"Windows 11 Pro\",\n      user: \"admin\",\n      uptime: \"02:34:15\",\n      lastSeen: \"2 min ago\",\n      status: \"active\",\n      location: \"New York, US\",\n      privileges: \"SYSTEM\"\n    },\n    {\n      id: \"sess-002\", \n      hostname: \"UBUNTU-SERVER-01\",\n      ip: \"10.0.0.15\",\n      os: \"Ubuntu 22.04 LTS\",\n      user: \"root\",\n      uptime: \"12:45:30\",\n      lastSeen: \"5 min ago\",\n      status: \"idle\",\n      location: \"London, UK\",\n      privileges: \"root\"\n    },\n    {\n      id: \"sess-003\",\n      hostname: \"MACOS-WORKSTATION\",\n      ip: \"172.16.0.42\",\n      os: \"macOS Ventura\",\n      user: \"developer\",\n      uptime: \"00:47:22\",\n      lastSeen: \"1 min ago\", \n      status: \"active\",\n      location: \"Tokyo, JP\",\n      privileges: \"user\"\n    },\n    {\n      id: \"sess-004\",\n      hostname: \"WIN-SRV-DC01\",\n      ip: \"10.0.1.10\",\n      os: \"Windows Server 2019\",\n      user: \"Administrator\",\n      uptime: \"96:12:08\",\n      lastSeen: \"30 sec ago\",\n      status: \"active\",\n      location: \"Frankfurt, DE\",\n      privileges: \"Administrator\"\n    },\n    {\n      id: \"sess-005\",\n      hostname: \"CENTOS-WEB-01\", \n      ip: \"203.0.113.25\",\n      os: \"CentOS 8\",\n      user: \"apache\",\n      uptime: \"08:15:45\",\n      lastSeen: \"10 min ago\",\n      status: \"disconnected\",\n      location: \"Sydney, AU\",\n      privileges: \"user\"\n    }\n  ];\n\n  // Recent Activity Feed\n  const recentActivity = [\n    {\n      id: \"act-001\",\n      type: \"command\",\n      timestamp: \"14:32:15\",\n      source: \"DESKTOP-A7X9K2L\",\n      action: \"Executed privilege escalation\",\n      details: \"whoami /priv - SeDebugPrivilege enabled\",\n      severity: \"high\",\n      icon: Terminal\n    },\n    {\n      id: \"act-002\",\n      type: \"connection\", \n      timestamp: \"14:31:42\",\n      source: \"185.199.108.153\",\n      action: \"New asset compromised\",\n      details: \"UBUNTU-SERVER-01 established reverse shell\",\n      severity: \"info\",\n      icon: Wifi\n    },\n    {\n      id: \"act-003\",\n      type: \"alert\",\n      timestamp: \"14:30:18\",\n      source: \"WIN-SRV-DC01\",\n      action: \"Security alert triggered\",\n      details: \"Multiple failed authentication attempts detected\",\n      severity: \"warning\",\n      icon: AlertTriangle\n    },\n    {\n      id: \"act-004\",\n      type: \"command\",\n      timestamp: \"14:29:55\",\n      source: \"MACOS-WORKSTATION\",\n      action: \"File system enumeration\",\n      details: \"find / -type f -perm -4000 2>/dev/null\",\n      severity: \"medium\",\n      icon: FileText\n    },\n    {\n      id: \"act-005\",\n      type: \"system\",\n      timestamp: \"14:28:33\",\n      source: \"C2-INFRASTRUCTURE\",\n      action: \"Payload deployment successful\",\n      details: \"Persistence mechanism installed on 3 targets\",\n      severity: \"success\",\n      icon: CheckCircle2\n    },\n    {\n      id: \"act-006\",\n      type: \"connection\",\n      timestamp: \"14:27:12\",\n      source: \"CENTOS-WEB-01\",\n      action: \"Session timeout\",\n      details: \"Asset disconnected after 8h 15m\",\n      severity: \"info\",\n      icon: WifiOff\n    }\n  ];\n\n  // Quick Actions Data\n  const quickActions = [\n    { label: \"Shell\", icon: Terminal, action: \"open-shell\", color: \"text-cyan-400\" },\n    { label: \"File Manager\", icon: FileText, action: \"file-manager\", color: \"text-green-400\" },\n    { label: \"Process List\", icon: Activity, action: \"process-list\", color: \"text-blue-400\" },\n    { label: \"Network Scan\", icon: Network, action: \"network-scan\", color: \"text-purple-400\" },\n    { label: \"Screenshots\", icon: Monitor, action: \"screenshot\", color: \"text-amber-400\" },\n    { label: \"Keylogger\", icon: Command, action: \"keylogger\", color: \"text-red-400\" },\n    { label: \"Webcam\", icon: Eye, action: \"webcam\", color: \"text-pink-400\" },\n    { label: \"Audio Record\", icon: Radio, action: \"audio-record\", color: \"text-orange-400\" }\n  ];\n\n  // Network Intelligence Data\n  const networkSegments = [\n    { \n      name: \"Corporate LAN\", \n      subnet: \"192.168.1.0/24\", \n      hosts: 156, \n      compromised: 23, \n      risk: \"medium\",\n      coverage: 14.7\n    },\n    { \n      name: \"DMZ\", \n      subnet: \"10.0.0.0/24\", \n      hosts: 45, \n      compromised: 12, \n      risk: \"high\",\n      coverage: 26.7\n    },\n    { \n      name: \"Internal Servers\", \n      subnet: \"172.16.0.0/20\", \n      hosts: 89, \n      compromised: 8, \n      risk: \"low\",\n      coverage: 9.0\n    },\n    { \n      name: \"Guest Network\", \n      subnet: \"10.1.0.0/24\", \n      hosts: 234, \n      compromised: 67, \n      risk: \"critical\",\n      coverage: 28.6\n    }\n  ];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': case 'online': return 'text-green-400';\n      case 'compromised': return 'text-red-400';\n      case 'idle': return 'text-amber-400';\n      case 'disconnected': case 'offline': return 'text-gray-400';\n      default: return 'text-muted-foreground';\n    }\n  };\n\n  const getStatusDot = (status: string) => {\n    switch (status) {\n      case 'active': case 'online': return 'bg-green-400';\n      case 'compromised': return 'bg-red-400';\n      case 'idle': return 'bg-amber-400';\n      case 'disconnected': case 'offline': return 'bg-gray-400';\n      default: return 'bg-gray-400';\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'success': return 'text-green-400';\n      case 'info': return 'text-blue-400';\n      case 'warning': return 'text-amber-400';\n      case 'high': case 'critical': return 'text-red-400';\n      case 'medium': return 'text-orange-400';\n      default: return 'text-muted-foreground';\n    }\n  };\n\n  const getRiskColor = (risk: string) => {\n    switch (risk) {\n      case 'low': return 'text-green-400 bg-green-400/10';\n      case 'medium': return 'text-amber-400 bg-amber-400/10';\n      case 'high': return 'text-orange-400 bg-orange-400/10';\n      case 'critical': return 'text-red-400 bg-red-400/10';\n      default: return 'text-muted-foreground bg-muted/10';\n    }\n  };\n\n  const getTrendIcon = (direction: string) => {\n    switch (direction) {\n      case 'up': return <ArrowUp className=\"w-3 h-3 text-green-400\" />;\n      case 'down': return <ArrowDown className=\"w-3 h-3 text-red-400\" />;\n      default: return <Minus className=\"w-3 h-3 text-muted-foreground\" />;\n    }\n  };\n\n  return (\n    <div className=\"container-responsive py-6 space-y-6\" data-testid=\"dashboard-page\">\n      {/* Red Team C2 Header */}\n      <div className=\"space-y-3\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"space-y-1\">\n            <h1 className=\"text-3xl font-semibold text-foreground font-mono\">\n              Red Team Command & Control Center\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Advanced Adversary Simulation Platform • Real-time Operation Management\n            </p>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            <div className=\"px-3 py-1 bg-red-500/20 text-red-400 border border-red-500/30 rounded-md text-sm font-mono\">\n              ACTIVE OPERATION\n            </div>\n            <Badge variant=\"outline\" className=\"font-mono\">\n              <Clock className=\"w-3 h-3 mr-1\" />\n              Op Time: 127:34:15\n            </Badge>\n          </div>\n        </div>\n      </div>\n\n      {/* Global Statistics Panel */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {globalStats.map((stat, index) => {\n          const IconComponent = stat.icon;\n          return (\n            <Card \n              key={index} \n              className=\"bg-card/50 border-border/50 backdrop-blur-sm\" \n              data-testid={`stat-${stat.label.toLowerCase().replace(/\\s+/g, '-')}`}\n            >\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-1\">\n                    <p className=\"text-sm font-medium text-muted-foreground uppercase tracking-wide font-mono\">\n                      {stat.label}\n                    </p>\n                    <p className=\"text-3xl font-bold text-foreground font-mono\">\n                      {stat.value}\n                    </p>\n                    <div className=\"flex items-center gap-1 text-xs\">\n                      {getTrendIcon(stat.trendDirection)}\n                      <span className={stat.trendDirection === 'up' ? 'text-green-400' : stat.trendDirection === 'down' ? 'text-red-400' : 'text-muted-foreground'}>\n                        {stat.trend}\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"p-3 rounded-lg bg-muted/20\">\n                    <IconComponent className={`w-6 h-6 ${stat.color}`} />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-6\">\n        {/* Left Column - World Map & Sessions */}\n        <div className=\"xl:col-span-2 space-y-6\">\n          {/* Interactive World Map */}\n          <Card className=\"bg-card/50 border-border/50 backdrop-blur-sm\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle className=\"flex items-center gap-2 font-mono\">\n                    <Globe className=\"w-5 h-5 text-cyan-400\" />\n                    Global Asset Distribution\n                  </CardTitle>\n                  <CardDescription>\n                    Real-time compromised asset locations and operation status\n                  </CardDescription>\n                </div>\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"button-refresh-map\">\n                  <RefreshCw className=\"w-4 h-4 mr-2\" />\n                  Refresh\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {/* Mock World Map SVG */}\n              <div className=\"relative bg-muted/10 rounded-lg p-4 h-64 overflow-hidden\">\n                <svg viewBox=\"0 0 800 400\" className=\"w-full h-full\">\n                  {/* Simplified world map background */}\n                  <rect width=\"800\" height=\"400\" fill=\"hsl(var(--muted))\" opacity=\"0.1\" />\n                  \n                  {/* Asset location markers */}\n                  {assetLocations.map((location, index) => {\n                    const x = ((location.lng + 180) / 360) * 800;\n                    const y = ((90 - location.lat) / 180) * 400;\n                    \n                    return (\n                      <g key={location.id}>\n                        {/* Connection lines */}\n                        <line \n                          x1=\"400\" y1=\"200\" \n                          x2={x} y2={y} \n                          stroke=\"hsl(var(--muted-foreground))\" \n                          strokeWidth=\"1\" \n                          opacity=\"0.3\"\n                        />\n                        {/* Location pin */}\n                        <circle \n                          cx={x} \n                          cy={y} \n                          r=\"6\" \n                          fill={location.status === 'online' ? '#22d3ee' : location.status === 'compromised' ? '#ef4444' : '#6b7280'}\n                          className=\"cursor-pointer hover:opacity-80\"\n                          data-testid={`map-pin-${location.id}`}\n                        />\n                        {/* Client count */}\n                        <text \n                          x={x} \n                          y={y - 12} \n                          textAnchor=\"middle\" \n                          className=\"text-xs font-mono fill-foreground\"\n                        >\n                          {location.assets}\n                        </text>\n                      </g>\n                    );\n                  })}\n                  \n                  {/* Central C2 server */}\n                  <circle cx=\"400\" cy=\"200\" r=\"8\" fill=\"hsl(var(--primary))\" />\n                  <text x=\"400\" y=\"185\" textAnchor=\"middle\" className=\"text-sm font-mono fill-primary\">C2</text>\n                </svg>\n                \n                {/* Map Legend */}\n                <div className=\"absolute bottom-4 left-4 bg-card/80 backdrop-blur-sm border border-border/50 rounded-lg p-3\">\n                  <div className=\"flex items-center gap-4 text-xs\">\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-3 h-3 rounded-full bg-cyan-400\"></div>\n                      <span>Online</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-3 h-3 rounded-full bg-red-400\"></div>\n                      <span>Compromised</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-3 h-3 rounded-full bg-gray-400\"></div>\n                      <span>Offline</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Location Summary */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mt-4\">\n                {assetLocations.slice(0, 4).map((location) => (\n                  <div key={location.id} className=\"p-3 bg-muted/20 rounded-lg border border-border/50\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-1\">\n                        <p className=\"text-sm font-medium\">{location.country}</p>\n                        <p className=\"text-xs text-muted-foreground font-mono\">{location.assets} assets</p>\n                      </div>\n                      <div className={`w-2 h-2 rounded-full ${getStatusDot(location.status)}`}></div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Active Sessions Overview */}\n          <Card className=\"bg-card/50 border-border/50 backdrop-blur-sm\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle className=\"flex items-center gap-2 font-mono\">\n                    <Terminal className=\"w-5 h-5 text-green-400\" />\n                    Active Sessions ({activeSessions.length})\n                  </CardTitle>\n                  <CardDescription>\n                    Real-time asset session monitoring\n                  </CardDescription>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"button-filter-sessions\">\n                    <Filter className=\"w-4 h-4 mr-2\" />\n                    Filter\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"button-refresh-sessions\">\n                    <RefreshCw className=\"w-4 h-4 mr-2\" />\n                    Refresh\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <ScrollArea className=\"h-80\">\n                <div className=\"space-y-3\">\n                  {activeSessions.map((session) => (\n                    <div \n                      key={session.id} \n                      className=\"flex items-center gap-4 p-4 bg-muted/20 rounded-lg border border-border/50 hover:bg-muted/30 transition-colors cursor-pointer\"\n                      data-testid={`session-${session.id}`}\n                    >\n                      <div className={`w-3 h-3 rounded-full ${getStatusDot(session.status)} flex-shrink-0`}></div>\n                      \n                      <div className=\"flex-1 grid grid-cols-1 md:grid-cols-5 gap-4 min-w-0\">\n                        <div className=\"space-y-1\">\n                          <p className=\"text-sm font-medium font-mono truncate\">{session.hostname}</p>\n                          <p className=\"text-xs text-muted-foreground\">{session.ip}</p>\n                        </div>\n                        \n                        <div className=\"space-y-1\">\n                          <p className=\"text-sm\">{session.os}</p>\n                          <p className=\"text-xs text-muted-foreground\">{session.user}</p>\n                        </div>\n                        \n                        <div className=\"space-y-1\">\n                          <p className=\"text-sm font-mono\">{session.uptime}</p>\n                          <p className=\"text-xs text-muted-foreground\">{session.lastSeen}</p>\n                        </div>\n                        \n                        <div className=\"space-y-1\">\n                          <Badge \n                            variant={session.status === 'active' ? 'default' : session.status === 'idle' ? 'secondary' : 'outline'}\n                            className=\"text-xs font-mono\"\n                          >\n                            {session.status.toUpperCase()}\n                          </Badge>\n                          <p className=\"text-xs text-muted-foreground\">{session.privileges}</p>\n                        </div>\n                        \n                        <div className=\"flex items-center justify-end gap-2\">\n                          <Button variant=\"ghost\" size=\"sm\" data-testid={`button-interact-${session.id}`}>\n                            <Terminal className=\"w-4 h-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\" data-testid={`button-details-${session.id}`}>\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\" data-testid={`button-more-${session.id}`}>\n                            <MoreHorizontal className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Right Column - Activity & Actions */}\n        <div className=\"space-y-6\">\n          {/* Recent Activity Feed */}\n          <Card className=\"bg-card/50 border-border/50 backdrop-blur-sm\">\n            <CardHeader className=\"pb-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle className=\"flex items-center gap-2 font-mono\">\n                    <Activity className=\"w-5 h-5 text-amber-400\" />\n                    Activity Feed\n                  </CardTitle>\n                  <CardDescription>\n                    Real-time operational events\n                  </CardDescription>\n                </div>\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-clear-feed\">\n                  <RefreshCw className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <ScrollArea className=\"h-80\">\n                <div className=\"space-y-3\">\n                  {recentActivity.map((activity) => {\n                    const IconComponent = activity.icon;\n                    return (\n                      <div key={activity.id} className=\"flex items-start gap-3 p-3 rounded-lg bg-muted/20 border border-border/50\">\n                        <div className={`p-2 rounded-lg bg-muted/30 flex-shrink-0`}>\n                          <IconComponent className={`w-4 h-4 ${getSeverityColor(activity.severity)}`} />\n                        </div>\n                        <div className=\"flex-1 min-w-0 space-y-1\">\n                          <div className=\"flex items-center justify-between\">\n                            <p className=\"text-sm font-medium truncate\">{activity.action}</p>\n                            <span className=\"text-xs text-muted-foreground font-mono\">{activity.timestamp}</span>\n                          </div>\n                          <p className=\"text-xs text-muted-foreground font-mono\">{activity.source}</p>\n                          <p className=\"text-xs text-muted-foreground\">{activity.details}</p>\n                          <Badge \n                            variant=\"outline\" \n                            className={`text-xs ${getSeverityColor(activity.severity)}`}\n                          >\n                            {activity.severity.toUpperCase()}\n                          </Badge>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </ScrollArea>\n            </CardContent>\n          </Card>\n\n          {/* Quick Actions Dashboard */}\n          <Card className=\"bg-card/50 border-border/50 backdrop-blur-sm\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 font-mono\">\n                <Zap className=\"w-5 h-5 text-purple-400\" />\n                Quick Actions\n              </CardTitle>\n              <CardDescription>\n                Common C2 operations and tools\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 gap-3\">\n                {quickActions.map((action, index) => {\n                  const IconComponent = action.icon;\n                  return (\n                    <Button \n                      key={index}\n                      variant=\"outline\" \n                      className=\"h-16 flex-col gap-2 bg-muted/20 hover:bg-muted/30\" \n                      data-testid={`button-${action.action}`}\n                    >\n                      <IconComponent className={`w-5 h-5 ${action.color}`} />\n                      <span className=\"text-xs font-mono\">{action.label}</span>\n                    </Button>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* System Status */}\n          <Card className=\"bg-card/50 border-border/50 backdrop-blur-sm\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 font-mono\">\n                <Settings className=\"w-5 h-5 text-blue-400\" />\n                System Status\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">C2 Infrastructure</span>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-2 h-2 rounded-full bg-green-400\"></div>\n                    <span className=\"text-xs text-green-400 font-mono\">ONLINE</span>\n                  </div>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Payload Servers</span>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-2 h-2 rounded-full bg-green-400\"></div>\n                    <span className=\"text-xs text-green-400 font-mono\">ACTIVE</span>\n                  </div>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Data Exfiltration</span>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-2 h-2 rounded-full bg-amber-400\"></div>\n                    <span className=\"text-xs text-amber-400 font-mono\">THROTTLED</span>\n                  </div>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Stealth Mode</span>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-2 h-2 rounded-full bg-green-400\"></div>\n                    <span className=\"text-xs text-green-400 font-mono\">ENABLED</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"pt-4 border-t border-border\">\n                <div className=\"grid grid-cols-2 gap-4 text-center\">\n                  <div>\n                    <p className=\"text-lg font-semibold font-mono\">99.8%</p>\n                    <p className=\"text-xs text-muted-foreground\">Success Rate</p>\n                  </div>\n                  <div>\n                    <p className=\"text-lg font-semibold font-mono\">2.3GB</p>\n                    <p className=\"text-xs text-muted-foreground\">Data Collected</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Network Intelligence Summary */}\n      <Card className=\"bg-card/50 border-border/50 backdrop-blur-sm\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2 font-mono\">\n                <Network className=\"w-5 h-5 text-cyan-400\" />\n                Network Intelligence Summary\n              </CardTitle>\n              <CardDescription>\n                Network penetration overview and lateral movement analysis\n              </CardDescription>\n            </div>\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-view-topology\">\n              <Eye className=\"w-4 h-4 mr-2\" />\n              View Topology\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {networkSegments.map((segment, index) => (\n              <div key={index} className=\"p-4 bg-muted/20 rounded-lg border border-border/50\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"font-medium font-mono text-sm\">{segment.name}</h3>\n                    <Badge className={`text-xs font-mono ${getRiskColor(segment.risk)}`}>\n                      {segment.risk.toUpperCase()}\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-xs\">\n                      <span className=\"text-muted-foreground\">Subnet:</span>\n                      <span className=\"font-mono\">{segment.subnet}</span>\n                    </div>\n                    <div className=\"flex justify-between text-xs\">\n                      <span className=\"text-muted-foreground\">Total Hosts:</span>\n                      <span className=\"font-mono\">{segment.hosts}</span>\n                    </div>\n                    <div className=\"flex justify-between text-xs\">\n                      <span className=\"text-muted-foreground\">Compromised:</span>\n                      <span className=\"font-mono text-red-400\">{segment.compromised}</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-xs\">\n                      <span className=\"text-muted-foreground\">Coverage:</span>\n                      <span className=\"font-mono\">{segment.coverage}%</span>\n                    </div>\n                    <Progress value={segment.coverage} className=\"h-2\" />\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":30297},"client/src/pages/NetworkPage.tsx":{"content":"import { NetworkTopology } from \"@/components/NetworkTopology\";\n\nexport default function NetworkPage() {\n  return (\n    <div className=\"space-y-6 p-6\" data-testid=\"network-page\">\n      <div>\n        <h1 className=\"text-2xl font-semibold\">Network Map</h1>\n        <p className=\"text-muted-foreground\">\n          Visualize the lab network topology and device relationships\n        </p>\n      </div>\n      \n      <NetworkTopology />\n    </div>\n  );\n}","size_bytes":447},"client/src/pages/ScenariosPage.tsx":{"content":"import { LabEnvironmentSelector } from \"@/components/LabEnvironmentSelector\";\n\nexport default function ScenariosPage() {\n  return (\n    <div className=\"space-y-6 p-6\" data-testid=\"scenarios-page\">\n      <div>\n        <h1 className=\"text-2xl font-semibold\">Lab Scenarios</h1>\n        <p className=\"text-muted-foreground\">\n          Choose from various post-exploitation training scenarios\n        </p>\n      </div>\n      \n      <LabEnvironmentSelector />\n    </div>\n  );\n}","size_bytes":471},"client/src/pages/TargetsPage.tsx":{"content":"import { TargetMachineCard } from \"@/components/TargetMachineCard\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Filter, Plus } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport default function TargetsPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  \n  //todo: remove mock functionality\n  const targetMachines = [\n    {\n      id: \"target-1\",\n      name: \"Windows Server 2019\",\n      os: \"Windows\",\n      ip: \"192.168.1.10\",\n      status: \"online\" as const,\n      vulnerabilities: 3,\n      difficulty: \"beginner\" as const,\n    },\n    {\n      id: \"target-2\",\n      name: \"Ubuntu 20.04\", \n      os: \"Linux\",\n      ip: \"192.168.1.20\",\n      status: \"compromised\" as const,\n      vulnerabilities: 5,\n      difficulty: \"intermediate\" as const,\n    },\n    {\n      id: \"target-3\",\n      name: \"macOS Monterey\",\n      os: \"macOS\",\n      ip: \"192.168.1.30\", \n      status: \"offline\" as const,\n      vulnerabilities: 2,\n      difficulty: \"advanced\" as const,\n    },\n    {\n      id: \"target-4\",\n      name: \"Windows 10 Pro\",\n      os: \"Windows\",\n      ip: \"192.168.1.40\",\n      status: \"online\" as const,\n      vulnerabilities: 4,\n      difficulty: \"intermediate\" as const,\n    },\n    {\n      id: \"target-5\",\n      name: \"CentOS 8\",\n      os: \"Linux\",\n      ip: \"192.168.1.50\",\n      status: \"online\" as const,\n      vulnerabilities: 2,\n      difficulty: \"advanced\" as const,\n    },\n    {\n      id: \"target-6\",\n      name: \"FreeBSD 13\",\n      os: \"BSD\",\n      ip: \"192.168.1.60\",\n      status: \"offline\" as const,\n      vulnerabilities: 1,\n      difficulty: \"advanced\" as const,\n    },\n  ];\n\n  const filteredMachines = targetMachines.filter(machine =>\n    machine.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    machine.os.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    machine.ip.includes(searchQuery)\n  );\n\n  const statusCounts = {\n    online: targetMachines.filter(m => m.status === 'online').length,\n    offline: targetMachines.filter(m => m.status === 'offline').length,\n    compromised: targetMachines.filter(m => m.status === 'compromised').length,\n  };\n\n  return (\n    <div className=\"space-y-6 p-6\" data-testid=\"targets-page\">\n      {/* Header */}\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-semibold\">Target Machines</h1>\n            <p className=\"text-muted-foreground\">\n              Manage and interact with lab target machines\n            </p>\n          </div>\n          <Button data-testid=\"button-add-target\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Target\n          </Button>\n        </div>\n\n        {/* Search and Filters */}\n        <div className=\"flex items-center gap-4\">\n          <div className=\"relative flex-1 max-w-md\">\n            <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" />\n            <Input \n              placeholder=\"Search targets...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-targets\"\n            />\n          </div>\n          <Button variant=\"outline\" size=\"sm\" data-testid=\"button-filter-targets\">\n            <Filter className=\"w-4 h-4 mr-2\" />\n            Filter\n          </Button>\n        </div>\n\n        {/* Status Overview */}\n        <div className=\"flex gap-3\">\n          <Badge variant=\"secondary\" className=\"text-success border-success\">\n            Online: {statusCounts.online}\n          </Badge>\n          <Badge variant=\"secondary\" className=\"text-muted-foreground border-muted-foreground\">\n            Offline: {statusCounts.offline}  \n          </Badge>\n          <Badge variant=\"secondary\" className=\"text-warning border-warning\">\n            Compromised: {statusCounts.compromised}\n          </Badge>\n        </div>\n      </div>\n\n      {/* Target Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {filteredMachines.map((machine) => (\n          <TargetMachineCard key={machine.id} {...machine} />\n        ))}\n      </div>\n\n      {filteredMachines.length === 0 && (\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground\">No targets found matching your search.</p>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":4511},"client/src/pages/TelemetryPage.tsx":{"content":"import { TelemetryPanel } from \"@/components/TelemetryPanel\";\n\nexport default function TelemetryPage() {\n  return (\n    <div className=\"space-y-6 p-6\" data-testid=\"telemetry-page\">\n      <div>\n        <h1 className=\"text-2xl font-semibold\">Security Telemetry</h1>\n        <p className=\"text-muted-foreground\">\n          Monitor security events and system activities in real-time\n        </p>\n      </div>\n      \n      <TelemetryPanel />\n    </div>\n  );\n}","size_bytes":454},"client/src/pages/TerminalPage.tsx":{"content":"import { TerminalInterface } from \"@/components/TerminalInterface\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { \n  Terminal, Shield, Globe, Activity, Users, HardDrive, \n  Wifi, Lock, AlertTriangle, Clock \n} from \"lucide-react\";\n\nexport default function TerminalPage() {\n  return (\n    <div className=\"p-6 h-full bg-gradient-to-br from-gray-950 to-black\" data-testid=\"terminal-page\">\n      <div className=\"space-y-6 h-full\">\n        {/* Header Section */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"flex items-center justify-center w-10 h-10 rounded-lg bg-green-500/20 border border-green-500/30\">\n                <Terminal className=\"w-5 h-5 text-green-400\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-semibold text-white\">Secure Terminal</h1>\n                <p className=\"text-gray-400 font-mono text-sm\">\n                  Advanced Command & Control Interface\n                </p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            <Badge variant=\"outline\" className=\"border-orange-500/30 text-orange-400 font-mono\">\n              <AlertTriangle className=\"w-3 h-3 mr-1\" />\n              TRAINING MODE\n            </Badge>\n            <Button variant=\"outline\" size=\"sm\" className=\"font-mono\">\n              <Shield className=\"w-4 h-4 mr-2\" />\n              SECURE SESSION\n            </Button>\n          </div>\n        </div>\n\n        {/* Status Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card className=\"bg-gray-900/50 border-green-500/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-300\">Target Status</CardTitle>\n              <Globe className=\"w-4 h-4 text-green-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-400 font-mono\">ONLINE</div>\n              <p className=\"text-xs text-gray-500 font-mono\">192.168.1.10</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-900/50 border-blue-500/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-300\">Access Level</CardTitle>\n              <Users className=\"w-4 h-4 text-blue-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-400 font-mono\">SYSTEM</div>\n              <p className=\"text-xs text-gray-500 font-mono\">Elevated privileges</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-900/50 border-yellow-500/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-300\">Session Time</CardTitle>\n              <Clock className=\"w-4 h-4 text-yellow-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-yellow-400 font-mono\">00:15:42</div>\n              <p className=\"text-xs text-gray-500 font-mono\">Active session</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-900/50 border-purple-500/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-300\">Encryption</CardTitle>\n              <Lock className=\"w-4 h-4 text-purple-400\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-purple-400 font-mono\">AES-256</div>\n              <p className=\"text-xs text-gray-500 font-mono\">End-to-end secured</p>\n            </CardContent>\n          </Card>\n        </div>\n        \n        {/* Terminal Interface */}\n        <div className=\"flex-1 min-h-0\">\n          <TerminalInterface />\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4338},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/AppSidebar.tsx":{"content":"import { AppSidebar } from '../AppSidebar';\nimport { SidebarProvider } from \"@/components/ui/sidebar\";\n\nexport default function AppSidebarExample() {\n  const style = {\n    \"--sidebar-width\": \"20rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n      </div>\n    </SidebarProvider>\n  );\n}","size_bytes":422},"client/src/components/examples/DashboardHeader.tsx":{"content":"import { DashboardHeader } from '../DashboardHeader';\nimport { SidebarProvider } from \"@/components/ui/sidebar\";\n\nexport default function DashboardHeaderExample() {\n  const style = {\n    \"--sidebar-width\": \"20rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <div className=\"flex flex-col flex-1\">\n          <DashboardHeader />\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}","size_bytes":506},"client/src/components/examples/LabEnvironmentSelector.tsx":{"content":"import { LabEnvironmentSelector } from '../LabEnvironmentSelector';\n\nexport default function LabEnvironmentSelectorExample() {\n  return (\n    <div className=\"p-4 max-w-4xl\">\n      <LabEnvironmentSelector />\n    </div>\n  );\n}","size_bytes":224},"client/src/components/examples/NetworkTopology.tsx":{"content":"import { NetworkTopology } from '../NetworkTopology';\n\nexport default function NetworkTopologyExample() {\n  return (\n    <div className=\"p-4 max-w-4xl\">\n      <NetworkTopology />\n    </div>\n  );\n}","size_bytes":196},"client/src/components/examples/ProgressTracker.tsx":{"content":"import { ProgressTracker } from '../ProgressTracker';\n\nexport default function ProgressTrackerExample() {\n  return (\n    <div className=\"p-4 max-w-2xl\">\n      <ProgressTracker />\n    </div>\n  );\n}","size_bytes":196},"client/src/components/examples/TargetMachineCard.tsx":{"content":"import { TargetMachineCard } from '../TargetMachineCard';\n\nexport default function TargetMachineCardExample() {\n  //todo: remove mock functionality\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 p-4\">\n      <TargetMachineCard\n        id=\"target-1\"\n        name=\"Windows Server 2019\"\n        os=\"Windows\"\n        ip=\"192.168.1.10\"\n        status=\"online\"\n        vulnerabilities={3}\n        difficulty=\"beginner\"\n      />\n      <TargetMachineCard\n        id=\"target-2\"\n        name=\"Ubuntu 20.04\"\n        os=\"Linux\"\n        ip=\"192.168.1.20\"\n        status=\"compromised\"\n        vulnerabilities={5}\n        difficulty=\"intermediate\"\n      />\n      <TargetMachineCard\n        id=\"target-3\"\n        name=\"macOS Monterey\"\n        os=\"macOS\"\n        ip=\"192.168.1.30\"\n        status=\"offline\"\n        vulnerabilities={2}\n        difficulty=\"advanced\"\n      />\n    </div>\n  );\n}","size_bytes":909},"client/src/components/examples/TelemetryPanel.tsx":{"content":"import { TelemetryPanel } from '../TelemetryPanel';\n\nexport default function TelemetryPanelExample() {\n  return (\n    <div className=\"p-4 max-w-4xl\">\n      <TelemetryPanel />\n    </div>\n  );\n}","size_bytes":192},"client/src/components/examples/TerminalInterface.tsx":{"content":"import { TerminalInterface } from '../TerminalInterface';\n\nexport default function TerminalInterfaceExample() {\n  return (\n    <div className=\"p-4 max-w-4xl\">\n      <TerminalInterface />\n    </div>\n  );\n}","size_bytes":204},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/SEO.tsx":{"content":"import { useEffect } from \"react\";\n\ninterface SEOProps {\n  title: string;\n  description?: string;\n  keywords?: string;\n}\n\nexport function SEO({ title, description, keywords }: SEOProps) {\n  useEffect(() => {\n    // Set document title\n    document.title = title;\n\n    // Handle meta description\n    let metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (!metaDescription) {\n      metaDescription = document.createElement('meta');\n      metaDescription.setAttribute('name', 'description');\n      document.head.appendChild(metaDescription);\n    }\n    if (description) {\n      metaDescription.setAttribute('content', description);\n    }\n\n    // Handle meta keywords\n    let metaKeywords = document.querySelector('meta[name=\"keywords\"]');\n    if (!metaKeywords && keywords) {\n      metaKeywords = document.createElement('meta');\n      metaKeywords.setAttribute('name', 'keywords');\n      document.head.appendChild(metaKeywords);\n    }\n    if (keywords && metaKeywords) {\n      metaKeywords.setAttribute('content', keywords);\n    }\n\n    // Handle Open Graph tags\n    let ogTitle = document.querySelector('meta[property=\"og:title\"]');\n    if (!ogTitle) {\n      ogTitle = document.createElement('meta');\n      ogTitle.setAttribute('property', 'og:title');\n      document.head.appendChild(ogTitle);\n    }\n    ogTitle.setAttribute('content', title);\n\n    let ogDescription = document.querySelector('meta[property=\"og:description\"]');\n    if (!ogDescription && description) {\n      ogDescription = document.createElement('meta');\n      ogDescription.setAttribute('property', 'og:description');\n      document.head.appendChild(ogDescription);\n    }\n    if (description && ogDescription) {\n      ogDescription.setAttribute('content', description);\n    }\n  }, [title, description, keywords]);\n\n  return null; // This component doesn't render anything\n}","size_bytes":1865},"client/src/styles/c2-navbar.css":{"content":"/* C2 Command & Control Navbar Styles */\n/* Terminal Status Bar */\n.c2-status-bar {\n  position: fixed;\n  top: 0;\n  width: 100%;\n  background: #1a1a1a;\n  border-bottom: 1px solid #333;\n  padding: 8px 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 12px;\n  z-index: 1001;\n  height: 40px;\n  font-family: 'JetBrains Mono', monospace;\n}\n\n.status-left {\n  display: flex;\n  align-items: center;\n  gap: 20px;\n}\n\n.terminal-prompt {\n  color: #00ff00;\n  font-weight: 600;\n}\n\n.status-indicator {\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  color: #00ff00;\n}\n\n.status-indicator i {\n  color: #00ff00;\n  animation: pulse 2s infinite;\n}\n\n@keyframes pulse {\n  0%, 50%, 100% { opacity: 1; }\n  25%, 75% { opacity: 0.5; }\n}\n\n.status-right {\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  color: #888;\n}\n\n.session-info {\n  color: #00ff00;\n}\n\n.timestamp {\n  color: #666;\n}\n\n/* C2 Navigation Bar */\n.c2-navbar {\n  position: fixed;\n  top: 40px;\n  width: 100%;\n  background: rgba(10, 10, 10, 0.95);\n  backdrop-filter: blur(10px);\n  border-bottom: 2px solid #00ff00;\n  z-index: 1100;\n  transition: all 0.3s ease;\n  box-shadow: 0 0 20px rgba(0, 255, 0, 0.1);\n  font-family: 'JetBrains Mono', monospace;\n}\n\n.c2-navbar.scrolled {\n  background: rgba(10, 10, 10, 0.98);\n  box-shadow: 0 0 30px rgba(0, 255, 0, 0.2);\n}\n\n.nav-container {\n  max-width: 100vw;\n  margin: 0;\n  padding: 0 10px;\n  display: grid;\n  grid-template-columns: minmax(200px, 250px) 1fr minmax(250px, 300px);\n  align-items: center;\n  height: 60px;\n  gap: 10px;\n  overflow: visible;\n  position: relative;\n}\n\n/* Three Column Layout */\n.nav-left {\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n}\n\n.nav-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.nav-right {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  gap: 20px;\n}\n\n/* C2 Logo */\n.nav-logo {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  text-decoration: none;\n  transition: all 0.3s ease;\n}\n\n.nav-logo:hover {\n  opacity: 0.8;\n}\n\n.logo-icon {\n  font-size: 24px;\n  color: #00ff00;\n  text-shadow: 0 0 10px rgba(0, 255, 0, 0.5);\n}\n\n.logo-text {\n  display: flex;\n  flex-direction: column;\n}\n\n.brand-name {\n  font-size: 18px;\n  font-weight: 700;\n  color: #00ff00;\n  text-shadow: 0 0 5px rgba(0, 255, 0, 0.3);\n}\n\n.version {\n  font-size: 10px;\n  color: #666;\n  margin-top: -2px;\n}\n\n/* Navigation Actions */\n.nav-actions {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n/* Navigation Menu */\n.nav-menu {\n  display: flex;\n  align-items: center;\n  gap: 0;\n  flex-wrap: nowrap;\n  overflow: visible;\n  justify-content: center;\n  width: 100%;\n}\n\n.nav-link {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  text-decoration: none;\n  color: #888;\n  font-weight: 500;\n  font-size: 12px;\n  padding: 10px 12px;\n  position: relative;\n  transition: all 0.3s ease;\n  border-left: 1px solid #333;\n  min-width: 90px;\n  max-width: 140px;\n  justify-content: center;\n  white-space: nowrap;\n  flex-shrink: 1;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.nav-link:first-child {\n  border-left: none;\n}\n\n.nav-link:hover {\n  color: #00ff00;\n  background: rgba(0, 255, 0, 0.05);\n  text-shadow: 0 0 5px rgba(0, 255, 0, 0.3);\n}\n\n.nav-link.active {\n  color: #00ff00;\n  background: rgba(0, 255, 0, 0.1);\n  text-shadow: 0 0 5px rgba(0, 255, 0, 0.5);\n}\n\n.nav-link i {\n  font-size: 14px;\n}\n\n.badge {\n  background: #ff4444;\n  color: #000;\n  font-size: 10px;\n  padding: 2px 6px;\n  border-radius: 10px;\n  font-weight: bold;\n  margin-left: 5px;\n}\n\n.badge.small {\n  font-size: 8px;\n  padding: 1px 4px;\n}\n\n/* Dropdown Styles */\n.nav-dropdown {\n  position: relative;\n  display: inline-block;\n}\n\n.dropdown-trigger {\n  cursor: pointer;\n  user-select: none;\n}\n\n.dropdown-arrow {\n  font-size: 10px;\n  transition: transform 0.3s ease;\n  margin-left: 5px;\n}\n\n.nav-dropdown:hover .dropdown-arrow,\n.nav-dropdown.active .dropdown-arrow,\n.dropdown-arrow.rotate {\n  transform: rotate(180deg);\n}\n\n.dropdown-menu {\n  position: absolute;\n  top: 100%;\n  left: 0;\n  background: rgba(10, 10, 10, 0.98);\n  backdrop-filter: blur(10px);\n  border: 1px solid #333;\n  border-top: 2px solid #00ff00;\n  border-radius: 0 0 8px 8px;\n  min-width: 220px;\n  z-index: 9999;\n  opacity: 0;\n  visibility: hidden;\n  transform: translateY(-10px);\n  transition: all 0.3s ease;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);\n  pointer-events: none;\n}\n\n/* Desktop dropdown behavior */\n@media screen and (min-width: 1025px) {\n  .nav-dropdown:hover .dropdown-menu,\n  .nav-dropdown.active .dropdown-menu,\n  .dropdown-menu.show {\n    opacity: 1 !important;\n    visibility: visible !important;\n    transform: translateY(0) !important;\n    pointer-events: auto !important;\n  }\n}\n\n/* All screens dropdown click behavior */\n.nav-dropdown.active .dropdown-menu,\n.dropdown-menu.show {\n  opacity: 1;\n  visibility: visible;\n  transform: translateY(0);\n  pointer-events: auto;\n}\n\n.dropdown-item {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  padding: 12px 16px;\n  color: #888;\n  text-decoration: none;\n  font-size: 12px;\n  transition: all 0.3s ease;\n  border-bottom: 1px solid #222;\n  position: relative;\n}\n\n.dropdown-item:last-child {\n  border-bottom: none;\n}\n\n.dropdown-item:hover {\n  color: #00ff00;\n  background: rgba(0, 255, 0, 0.05);\n  text-shadow: 0 0 5px rgba(0, 255, 0, 0.3);\n  padding-left: 20px;\n}\n\n.dropdown-item i {\n  font-size: 12px;\n  width: 16px;\n  text-align: center;\n  color: #666;\n}\n\n.dropdown-item:hover i {\n  color: #00ff00;\n}\n\n.dropdown-item .badge {\n  margin-left: auto;\n  background: #00ff00;\n  color: #000;\n  font-size: 8px;\n  padding: 1px 4px;\n}\n\n.dropdown-divider {\n  height: 1px;\n  background: #333;\n  margin: 8px 0;\n}\n\n/* Dropdown positioning for different menu items */\n.nav-dropdown:nth-child(2) .dropdown-menu { left: 0; }\n.nav-dropdown:nth-child(3) .dropdown-menu { left: -50px; }\n.nav-dropdown:nth-child(4) .dropdown-menu { left: -100px; }\n.nav-dropdown:nth-child(5) .dropdown-menu { left: -150px; }\n.nav-dropdown:nth-child(6) .dropdown-menu { left: -200px; }\n.nav-dropdown:nth-child(7) .dropdown-menu { left: -250px; }\n\n/* Dropdown item hover effects */\n.dropdown-item::before {\n  content: '';\n  position: absolute;\n  left: 0;\n  top: 0;\n  height: 100%;\n  width: 3px;\n  background: #00ff00;\n  transform: scaleY(0);\n  transition: transform 0.3s ease;\n}\n\n.dropdown-item:hover::before {\n  transform: scaleY(1);\n}\n\n/* Special effects for different categories */\n.nav-dropdown:nth-child(2) .dropdown-menu { border-top-color: #00ff00; } /* Sessions */\n.nav-dropdown:nth-child(3) .dropdown-menu { border-top-color: #ff6b35; } /* Payloads */\n.nav-dropdown:nth-child(4) .dropdown-menu { border-top-color: #ff4444; } /* Exploits */\n.nav-dropdown:nth-child(5) .dropdown-menu { border-top-color: #00aaff; } /* Modules */\n.nav-dropdown:nth-child(6) .dropdown-menu { border-top-color: #ffaa00; } /* Listeners */\n.nav-dropdown:nth-child(7) .dropdown-menu { border-top-color: #34a853; } /* Reports */\n\n/* System Status */\n.system-status {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 9px;\n  padding: 6px 8px;\n  background: rgba(0, 255, 0, 0.05);\n  border: 1px solid rgba(0, 255, 0, 0.1);\n  border-radius: 4px;\n  flex-shrink: 0;\n  overflow: hidden;\n}\n\n.status-item {\n  display: flex;\n  align-items: center;\n  gap: 2px;\n  color: #888;\n  white-space: nowrap;\n  font-size: 8px;\n}\n\n.status-item i {\n  color: #00ff00;\n  font-size: 10px;\n}\n\n/* Mobile Navigation Actions - Hidden by default */\n.mobile-nav-actions {\n  display: none;\n}\n\n/* Mobile Menu Button */\n.nav-toggle {\n  display: none;\n  flex-direction: column;\n  cursor: pointer;\n  z-index: 1001;\n  position: absolute;\n  right: 20px;\n  top: 50%;\n  transform: translateY(-50%);\n  padding: 8px;\n}\n\n.bar {\n  width: 20px;\n  height: 2px;\n  background: #00ff00;\n  margin: 2px 0;\n  transition: 0.3s;\n  box-shadow: 0 0 5px rgba(0, 255, 0, 0.3);\n}\n\n.nav-toggle.active .bar:nth-child(2) {\n  opacity: 0;\n}\n\n.nav-toggle.active .bar:nth-child(1) {\n  transform: translateY(6px) rotate(45deg);\n}\n\n.nav-toggle.active .bar:nth-child(3) {\n  transform: translateY(-6px) rotate(-45deg);\n}\n\n/* Adjust main content for fixed navbar */\nmain {\n  margin-top: 100px; /* 40px status bar + 60px navbar */\n  width: 100%;\n  box-sizing: border-box;\n}\n\n/* Ensure full width layout */\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  width: 100%;\n  overflow-x: hidden;\n}\n\n/* Responsive Design */\n@media screen and (max-width: 1400px) {\n  .nav-container {\n    grid-template-columns: 200px 1fr 250px;\n    padding: 0 8px;\n  }\n  \n  .nav-link {\n    font-size: 11px;\n    padding: 10px 8px;\n    min-width: 85px;\n    max-width: 115px;\n  }\n  \n  .system-status {\n    gap: 6px;\n    font-size: 9px;\n    padding: 5px 6px;\n  }\n}\n\n@media screen and (max-width: 1280px) {\n  .nav-toggle {\n    display: flex;\n  }\n  \n  .nav-container {\n    grid-template-columns: 1fr auto;\n    gap: 10px;\n    padding: 0 10px;\n  }\n  \n  .nav-center {\n    position: fixed;\n    top: 100px; /* Below the status bar and navbar */\n    left: 0;\n    right: 0;\n    background: rgba(10, 10, 10, 0.98);\n    backdrop-filter: blur(10px);\n    border-top: 2px solid #00ff00;\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);\n    transform: translateY(-100%);\n    opacity: 0;\n    visibility: hidden;\n    transition: all 0.3s ease;\n    z-index: 1000;\n    padding: 20px;\n    max-height: calc(100vh - 100px);\n    overflow-y: auto;\n  }\n  \n  .nav-center.mobile-open {\n    transform: translateY(0);\n    opacity: 1;\n    visibility: visible;\n  }\n  \n  .nav-menu {\n    flex-direction: column;\n    gap: 0;\n    width: 100%;\n    overflow: hidden;\n  }\n  \n  .nav-dropdown {\n    width: 100%;\n    border-bottom: 1px solid #333;\n  }\n  \n  .nav-link {\n    font-size: 16px;\n    padding: 16px 20px;\n    min-width: auto;\n    max-width: none;\n    width: 100%;\n    justify-content: flex-start;\n    border-left: none;\n    border-bottom: 1px solid #222;\n  }\n  \n  .dropdown-menu {\n    position: static;\n    opacity: 0;\n    visibility: hidden;\n    transform: none;\n    background: rgba(0, 0, 0, 0.4);\n    border: none;\n    border-radius: 0;\n    box-shadow: inset 0 2px 10px rgba(0, 0, 0, 0.3);\n    margin-top: 0;\n    pointer-events: none;\n    min-width: auto;\n  }\n  \n  .nav-dropdown.active .dropdown-menu {\n    opacity: 1;\n    visibility: visible;\n    pointer-events: auto;\n  }\n  \n  .dropdown-item {\n    font-size: 14px;\n    padding: 14px 30px;\n  }\n  \n  .mobile-nav-actions {\n    display: block;\n    border-top: 2px solid #333;\n    margin-top: 10px;\n    padding-top: 10px;\n  }\n  \n  .nav-right {\n    display: none;\n  }\n}\n\n@media screen and (max-width: 768px) {\n  .nav-container {\n    grid-template-columns: 1fr;\n    height: auto;\n    padding: 8px 10px;\n    gap: 10px;\n  }\n  \n  .nav-left {\n    justify-content: flex-start;\n  }\n  \n  .nav-toggle {\n    display: flex;\n  }\n  \n  .nav-right {\n    display: none;\n  }\n  \n  .system-status {\n    display: none;\n  }\n\n  /* Logo adjustments for mobile */\n  .logo-text .version {\n    display: none;\n  }\n  \n  .brand-name {\n    font-size: 14px;\n  }\n}","size_bytes":11046},"client/src/pages/exploits/ExploitHistoryPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Filter, History, Calendar } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function ExploitHistoryPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  return (\n    <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-green-400\">Exploit History</h1>\n          <p className=\"text-muted-foreground\">Track exploit usage and execution history</p>\n        </div>\n      </div>\n\n      <div className=\"text-center py-12\">\n        <History className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">Exploit History</h3>\n        <p className=\"text-muted-foreground mb-4\">Exploit execution tracking and history coming soon</p>\n        <Button variant=\"outline\">\n          <Calendar className=\"h-4 w-4 mr-2\" />\n          View Timeline\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":1299},"client/src/pages/exploits/LocalExploitsPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Search, Filter, Plus, Shield, AlertTriangle, CheckCircle } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface LocalExploit {\n  id: string;\n  name: string;\n  cve?: string;\n  severity: string;\n  verified: boolean;\n  platform: string[];\n  description?: string;\n  published?: string;\n}\n\nfunction ExploitCard({ exploit }: { exploit: LocalExploit }) {\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case \"critical\": return \"bg-red-500/20 text-red-400 border-red-500/30\";\n      case \"high\": return \"bg-orange-500/20 text-orange-400 border-orange-500/30\";\n      case \"medium\": return \"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\";\n      case \"low\": return \"bg-blue-500/20 text-blue-400 border-blue-500/30\";\n      default: return \"bg-gray-500/20 text-gray-400 border-gray-500/30\";\n    }\n  };\n\n  return (\n    <Card className=\"bg-card/50 border-border/50 hover:bg-card/80 transition-colors\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Shield className=\"h-4 w-4 text-red-400\" />\n            <CardTitle className=\"text-sm\">{exploit.name}</CardTitle>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge className={getSeverityColor(exploit.severity)}>\n              {exploit.severity}\n            </Badge>\n            {exploit.verified && (\n              <CheckCircle className=\"h-4 w-4 text-green-400\" />\n            )}\n          </div>\n        </div>\n        <CardDescription className=\"line-clamp-2\">\n          {exploit.cve && <span className=\"font-mono text-xs\">{exploit.cve} • </span>}\n          {exploit.description || \"Local privilege escalation exploit\"}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"pt-0\">\n        <div className=\"space-y-2 text-xs text-muted-foreground\">\n          <div>Platforms: {exploit.platform.join(\", \")}</div>\n          {exploit.published && (\n            <div>Published: {new Date(exploit.published).toLocaleDateString()}</div>\n          )}\n          <div className=\"flex items-center gap-1\">\n            Status: {exploit.verified ? (\n              <span className=\"text-green-400\">Verified</span>\n            ) : (\n              <span className=\"text-yellow-400\">Unverified</span>\n            )}\n          </div>\n        </div>\n        <div className=\"flex gap-2 mt-4\">\n          <Button size=\"sm\" className=\"h-7 text-xs bg-red-600 hover:bg-red-700\">\n            Execute\n          </Button>\n          <Button size=\"sm\" variant=\"secondary\" className=\"h-7 text-xs\">\n            Configure\n          </Button>\n          <Button size=\"sm\" variant=\"outline\" className=\"h-7 text-xs\">\n            Details\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function LocalExploitsPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [severityFilter, setSeverityFilter] = useState<string>(\"all\");\n\n  const { data: exploitsData, isLoading } = useQuery({\n    queryKey: [\"exploits\", \"local\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/exploits/scope/local\");\n      if (!response.ok) throw new Error(\"Failed to fetch local exploits\");\n      return response.json();\n    }\n  });\n\n  const exploits = exploitsData?.data || [];\n\n  const filteredExploits = exploits.filter((exploit: LocalExploit) => {\n    const matchesSearch = exploit.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         exploit.cve?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         exploit.description?.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesSeverity = severityFilter === \"all\" || exploit.severity === severityFilter;\n    return matchesSearch && matchesSeverity;\n  });\n\n  return (\n    <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-red-400\">Local Exploits</h1>\n          <p className=\"text-muted-foreground\">Local privilege escalation and system exploits</p>\n        </div>\n        <Button className=\"bg-red-600 hover:bg-red-700\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Exploit\n        </Button>\n      </div>\n\n      <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search local exploits...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n        <div className=\"flex gap-2\">\n          <Select value={severityFilter} onValueChange={setSeverityFilter}>\n            <SelectTrigger className=\"w-[130px]\">\n              <Filter className=\"h-4 w-4 mr-2\" />\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Severity</SelectItem>\n              <SelectItem value=\"critical\">Critical</SelectItem>\n              <SelectItem value=\"high\">High</SelectItem>\n              <SelectItem value=\"medium\">Medium</SelectItem>\n              <SelectItem value=\"low\">Low</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {isLoading ? (\n          Array.from({ length: 6 }).map((_, i) => (\n            <Card key={i} className=\"bg-card/50 border-border/50 animate-pulse\">\n              <CardHeader>\n                <div className=\"h-4 bg-muted rounded w-32\"></div>\n                <div className=\"h-3 bg-muted rounded w-24\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"h-3 bg-muted rounded w-full\"></div>\n                  <div className=\"h-3 bg-muted rounded w-3/4\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : filteredExploits.length > 0 ? (\n          filteredExploits.map((exploit: LocalExploit) => (\n            <ExploitCard key={exploit.id} exploit={exploit} />\n          ))\n        ) : (\n          <div className=\"col-span-full text-center py-12\">\n            <AlertTriangle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No local exploits found</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              {searchQuery || severityFilter !== \"all\" \n                ? \"No exploits match your current filters.\" \n                : \"No local exploits are available.\"}\n            </p>\n            <Button variant=\"outline\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Exploit\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {!isLoading && filteredExploits.length > 0 && (\n        <div className=\"mt-6 text-center text-sm text-muted-foreground\">\n          Showing {filteredExploits.length} local exploits\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":7649},"client/src/pages/exploits/RemoteExploitsPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Search, Filter, Plus, Wifi, AlertTriangle, CheckCircle } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function RemoteExploitsPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [severityFilter, setSeverityFilter] = useState<string>(\"all\");\n\n  const { data: exploitsData, isLoading } = useQuery({\n    queryKey: [\"exploits\", \"remote\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/exploits/scope/remote\");\n      if (!response.ok) throw new Error(\"Failed to fetch remote exploits\");\n      return response.json();\n    }\n  });\n\n  const exploits = exploitsData?.data || [];\n\n  return (\n    <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-orange-400\">Remote Exploits</h1>\n          <p className=\"text-muted-foreground\">Network-based exploits and remote code execution</p>\n        </div>\n        <Button className=\"bg-orange-600 hover:bg-orange-700\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Exploit\n        </Button>\n      </div>\n\n      <div className=\"text-center py-12\">\n        <Wifi className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">Remote Exploits</h3>\n        <p className=\"text-muted-foreground mb-4\">Remote exploitation modules coming soon</p>\n        <Button variant=\"outline\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Exploit\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":1981},"client/src/pages/exploits/SearchExploitsPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Filter, Database, ExternalLink } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function SearchExploitsPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const handleSearch = () => {\n    // Implement search functionality\n  };\n\n  return (\n    <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-green-400\">Search Exploits</h1>\n          <p className=\"text-muted-foreground\">Search exploit databases and vulnerability feeds</p>\n        </div>\n      </div>\n\n      <div className=\"text-center py-12\">\n        <Database className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">Exploit Search</h3>\n        <p className=\"text-muted-foreground mb-4\">Comprehensive exploit database search coming soon</p>\n        <Button variant=\"outline\">\n          <ExternalLink className=\"h-4 w-4 mr-2\" />\n          External Database\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":1393},"client/src/pages/exploits/WebExploitsPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Search, Filter, Plus, Globe, AlertTriangle, CheckCircle } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function WebExploitsPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [severityFilter, setSeverityFilter] = useState<string>(\"all\");\n\n  const { data: exploitsData, isLoading } = useQuery({\n    queryKey: [\"exploits\", \"web\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/exploits/scope/web\");\n      if (!response.ok) throw new Error(\"Failed to fetch web exploits\");\n      return response.json();\n    }\n  });\n\n  const exploits = exploitsData?.data || [];\n\n  return (\n    <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-purple-400\">Web Exploits</h1>\n          <p className=\"text-muted-foreground\">Web application vulnerabilities and exploits</p>\n        </div>\n        <Button className=\"bg-purple-600 hover:bg-purple-700\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Exploit\n        </Button>\n      </div>\n\n      <div className=\"text-center py-12\">\n        <Globe className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">Web Exploits</h3>\n        <p className=\"text-muted-foreground mb-4\">Web application exploitation modules coming soon</p>\n        <Button variant=\"outline\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Exploit\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":1970},"client/src/pages/listeners/DNSListenersPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Filter, Plus, Globe, Play, Square } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function DNSListenersPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: listenersData, isLoading } = useQuery({\n    queryKey: [\"listeners\", \"dns\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/listeners/protocol/dns\");\n      if (!response.ok) throw new Error(\"Failed to fetch DNS listeners\");\n      return response.json();\n    }\n  });\n\n  const listeners = listenersData?.data || [];\n\n  return (\n    <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-cyan-400\">DNS Listeners</h1>\n          <p className=\"text-muted-foreground\">DNS protocol listeners and tunneling</p>\n        </div>\n        <Button className=\"bg-cyan-600 hover:bg-cyan-700\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Listener\n        </Button>\n      </div>\n\n      <div className=\"text-center py-12\">\n        <Globe className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">DNS Listeners</h3>\n        <p className=\"text-muted-foreground mb-4\">DNS listener management coming soon</p>\n        <Button variant=\"outline\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Listener\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":1774},"client/src/pages/listeners/HTTPListenersPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Filter, Plus, Wifi, Play, Square } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function HTTPListenersPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: listenersData, isLoading } = useQuery({\n    queryKey: [\"listeners\", \"http\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/listeners/protocol/http\");\n      if (!response.ok) throw new Error(\"Failed to fetch HTTP listeners\");\n      return response.json();\n    }\n  });\n\n  const listeners = listenersData?.data || [];\n\n  return (\n    <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-blue-400\">HTTP Listeners</h1>\n          <p className=\"text-muted-foreground\">HTTP protocol listeners and handlers</p>\n        </div>\n        <Button className=\"bg-blue-600 hover:bg-blue-700\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Listener\n        </Button>\n      </div>\n\n      <div className=\"text-center py-12\">\n        <Wifi className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">HTTP Listeners</h3>\n        <p className=\"text-muted-foreground mb-4\">HTTP listener management coming soon</p>\n        <Button variant=\"outline\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Listener\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":1779},"client/src/pages/listeners/HTTPSListenersPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Filter, Plus, Shield, Play, Square } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function HTTPSListenersPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: listenersData, isLoading } = useQuery({\n    queryKey: [\"listeners\", \"https\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/listeners/protocol/https\");\n      if (!response.ok) throw new Error(\"Failed to fetch HTTPS listeners\");\n      return response.json();\n    }\n  });\n\n  const listeners = listenersData?.data || [];\n\n  return (\n    <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-green-400\">HTTPS Listeners</h1>\n          <p className=\"text-muted-foreground\">Secure HTTPS protocol listeners with TLS encryption</p>\n        </div>\n        <Button className=\"bg-green-600 hover:bg-green-700\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Listener\n        </Button>\n      </div>\n\n      <div className=\"text-center py-12\">\n        <Shield className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">HTTPS Listeners</h3>\n        <p className=\"text-muted-foreground mb-4\">Secure HTTPS listener management coming soon</p>\n        <Button variant=\"outline\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Listener\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":1815},"client/src/pages/listeners/ListenerManagerPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Filter, Plus, Settings, Play, Square } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function ListenerManagerPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: listenersData, isLoading } = useQuery({\n    queryKey: [\"listeners\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/listeners\");\n      if (!response.ok) throw new Error(\"Failed to fetch listeners\");\n      return response.json();\n    }\n  });\n\n  const listeners = listenersData?.data || [];\n\n  return (\n    <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-green-400\">Listener Manager</h1>\n          <p className=\"text-muted-foreground\">Centralized listener management and monitoring</p>\n        </div>\n        <Button className=\"bg-green-600 hover:bg-green-700\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Listener\n        </Button>\n      </div>\n\n      <div className=\"text-center py-12\">\n        <Settings className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">Listener Manager</h3>\n        <p className=\"text-muted-foreground mb-4\">Centralized listener management coming soon</p>\n        <Button variant=\"outline\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Listener\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":1786},"client/src/pages/listeners/ListenerTemplatesPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { SEO } from \"@/components/SEO\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Filter, Plus, FileText, Play, Square } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function ListenerTemplatesPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: templatesData, isLoading } = useQuery({\n    queryKey: [\"listeners\", \"templates\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/listeners/templates\");\n      if (!response.ok) throw new Error(\"Failed to fetch listener templates\");\n      return response.json();\n    }\n  });\n\n  const templates = templatesData?.data || [];\n\n  return (\n    <>\n      <SEO \n        title=\"Listener Templates - C2 Command & Control\"\n        description=\"Manage pre-configured listener templates and configurations for HTTP, HTTPS, TCP, UDP, DNS and SMB listeners in your C2 infrastructure\"\n        keywords=\"listener templates, c2 listeners, http listener, https listener, tcp, udp, dns, smb\"\n      />\n      <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-green-400\">Listener Templates</h1>\n          <p className=\"text-muted-foreground\">Pre-configured listener templates and configurations</p>\n        </div>\n        <Button className=\"bg-green-600 hover:bg-green-700\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Template\n        </Button>\n      </div>\n\n      <div className=\"text-center py-12\">\n        <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">Listener Templates</h3>\n        <p className=\"text-muted-foreground mb-4\">Listener template management coming soon</p>\n        <Button variant=\"outline\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Template\n        </Button>\n      </div>\n      </div>\n    </>\n  );\n}","size_bytes":2225},"client/src/pages/listeners/SMBListenersPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Filter, Plus, HardDrive, Play, Square } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function SMBListenersPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: listenersData, isLoading } = useQuery({\n    queryKey: [\"listeners\", \"smb\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/listeners/protocol/smb\");\n      if (!response.ok) throw new Error(\"Failed to fetch SMB listeners\");\n      return response.json();\n    }\n  });\n\n  const listeners = listenersData?.data || [];\n\n  return (\n    <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-yellow-400\">SMB Listeners</h1>\n          <p className=\"text-muted-foreground\">SMB protocol listeners and named pipes</p>\n        </div>\n        <Button className=\"bg-yellow-600 hover:bg-yellow-700\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Listener\n        </Button>\n      </div>\n\n      <div className=\"text-center py-12\">\n        <HardDrive className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">SMB Listeners</h3>\n        <p className=\"text-muted-foreground mb-4\">SMB listener management coming soon</p>\n        <Button variant=\"outline\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Listener\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":1790},"client/src/pages/listeners/TCPListenersPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Filter, Plus, Network, Play, Square } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function TCPListenersPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: listenersData, isLoading } = useQuery({\n    queryKey: [\"listeners\", \"tcp\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/listeners/protocol/tcp\");\n      if (!response.ok) throw new Error(\"Failed to fetch TCP listeners\");\n      return response.json();\n    }\n  });\n\n  const listeners = listenersData?.data || [];\n\n  return (\n    <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-orange-400\">TCP Listeners</h1>\n          <p className=\"text-muted-foreground\">Raw TCP socket listeners and handlers</p>\n        </div>\n        <Button className=\"bg-orange-600 hover:bg-orange-700\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Listener\n        </Button>\n      </div>\n\n      <div className=\"text-center py-12\">\n        <Network className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">TCP Listeners</h3>\n        <p className=\"text-muted-foreground mb-4\">TCP listener management coming soon</p>\n        <Button variant=\"outline\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Listener\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":1785},"client/src/pages/listeners/UDPListenersPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Filter, Plus, Radio, Play, Square } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function UDPListenersPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: listenersData, isLoading } = useQuery({\n    queryKey: [\"listeners\", \"udp\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/listeners/protocol/udp\");\n      if (!response.ok) throw new Error(\"Failed to fetch UDP listeners\");\n      return response.json();\n    }\n  });\n\n  const listeners = listenersData?.data || [];\n\n  return (\n    <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-purple-400\">UDP Listeners</h1>\n          <p className=\"text-muted-foreground\">UDP datagram listeners and handlers</p>\n        </div>\n        <Button className=\"bg-purple-600 hover:bg-purple-700\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Listener\n        </Button>\n      </div>\n\n      <div className=\"text-center py-12\">\n        <Radio className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">UDP Listeners</h3>\n        <p className=\"text-muted-foreground mb-4\">UDP listener management coming soon</p>\n        <Button variant=\"outline\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Listener\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":1779},"client/src/pages/modules/AntiForensicsPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Search, Filter, Plus, EyeOff, Settings, Play, AlertTriangle, CheckCircle } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AntiForensicsPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: modulesData, isLoading } = useQuery({\n    queryKey: [\"modules\", \"anti-forensics\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/modules/category/anti-forensics\");\n      if (!response.ok) throw new Error(\"Failed to fetch anti-forensics modules\");\n      return response.json();\n    }\n  });\n\n  const modules = modulesData?.data || [];\n  \n  const filteredModules = modules.filter((module: any) => \n    module.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    module.description.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const handleAddModule = () => {\n    toast({\n      title: \"Add Module\",\n      description: \"Module creation dialog will be implemented soon\"\n    });\n  };\n\n  const handleDeployModule = (moduleId: string, moduleName: string) => {\n    toast({\n      title: \"Module Deployed\",\n      description: `${moduleName} has been deployed successfully`\n    });\n  };\n\n  const handleConfigureModule = (moduleId: string, moduleName: string) => {\n    toast({\n      title: \"Configure Module\",\n      description: `Configuration for ${moduleName} will be implemented soon`\n    });\n  };\n\n  return (\n    <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-gray-400\">Anti-Forensics</h1>\n          <p className=\"text-muted-foreground\">Evidence deletion and anti-forensics techniques</p>\n        </div>\n        <Button className=\"bg-gray-600 hover:bg-gray-700\" onClick={handleAddModule} data-testid=\"button-add-module\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Module\n        </Button>\n      </div>\n\n      {/* Search and Filter */}\n      <div className=\"flex items-center gap-4 mb-6\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n          <Input\n            placeholder=\"Search modules...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-modules\"\n          />\n        </div>\n        <Button variant=\"outline\" size=\"icon\" data-testid=\"button-filter\">\n          <Filter className=\"h-4 w-4\" />\n        </Button>\n      </div>\n\n      {/* Loading State */}\n      {isLoading && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n          {[1, 2, 3].map((i) => (\n            <Card key={i}>\n              <CardHeader>\n                <Skeleton className=\"h-4 w-3/4\" />\n                <Skeleton className=\"h-3 w-full\" />\n              </CardHeader>\n              <CardContent>\n                <Skeleton className=\"h-20 w-full mb-4\" />\n                <div className=\"flex gap-2 mb-4\">\n                  <Skeleton className=\"h-6 w-16\" />\n                  <Skeleton className=\"h-6 w-16\" />\n                </div>\n                <Skeleton className=\"h-8 w-full\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Empty State */}\n      {!isLoading && filteredModules.length === 0 && searchQuery === \"\" && (\n        <div className=\"text-center py-12\">\n          <EyeOff className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">No Anti-Forensics Modules</h3>\n          <p className=\"text-muted-foreground mb-4\">Get started by adding your first anti-forensics module</p>\n          <Button variant=\"outline\" onClick={handleAddModule} data-testid=\"button-add-first-module\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Module\n          </Button>\n        </div>\n      )}\n\n      {/* No Search Results */}\n      {!isLoading && filteredModules.length === 0 && searchQuery !== \"\" && (\n        <div className=\"text-center py-12\">\n          <Search className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">No modules found</h3>\n          <p className=\"text-muted-foreground mb-4\">Try adjusting your search terms</p>\n        </div>\n      )}\n\n      {/* Modules Grid */}\n      {!isLoading && filteredModules.length > 0 && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n          {filteredModules.map((module: any) => (\n            <Card key={module.id} className=\"hover:shadow-lg transition-shadow\" data-testid={`card-module-${module.id}`}>\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-lg font-semibold text-gray-400 mb-1\" data-testid={`text-module-name-${module.id}`}>\n                      {module.name}\n                    </CardTitle>\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      {module.reliable ? (\n                        <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                      ) : (\n                        <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />\n                      )}\n                      <span className=\"text-xs text-muted-foreground\">\n                        {module.reliable ? \"Reliable\" : \"Experimental\"}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                <CardDescription className=\"text-sm\" data-testid={`text-module-description-${module.id}`}>\n                  {module.description}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                {/* Platform badges */}\n                <div className=\"flex flex-wrap gap-1 mb-3\">\n                  {module.platform?.map((platform: string) => (\n                    <Badge key={platform} variant=\"secondary\" className=\"text-xs\">\n                      {platform}\n                    </Badge>\n                  ))}\n                </div>\n                \n                {/* Requirements */}\n                {module.requirements && module.requirements.length > 0 && (\n                  <div className=\"mb-3\">\n                    <p className=\"text-xs text-muted-foreground mb-1\">Requirements:</p>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {module.requirements.slice(0, 2).map((req: string) => (\n                        <Badge key={req} variant=\"outline\" className=\"text-xs\">\n                          {req}\n                        </Badge>\n                      ))}\n                      {module.requirements.length > 2 && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          +{module.requirements.length - 2} more\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                )}\n                \n                {/* Author */}\n                {module.author && (\n                  <p className=\"text-xs text-muted-foreground mb-4\" data-testid={`text-module-author-${module.id}`}>\n                    By {module.author}\n                  </p>\n                )}\n                \n                {/* Action buttons */}\n                <div className=\"flex gap-2\">\n                  <Button \n                    size=\"sm\" \n                    className=\"flex-1 bg-gray-600 hover:bg-gray-700\" \n                    onClick={() => handleDeployModule(module.id, module.name)}\n                    data-testid={`button-deploy-${module.id}`}\n                  >\n                    <Play className=\"h-3 w-3 mr-1\" />\n                    Deploy\n                  </Button>\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\" \n                    onClick={() => handleConfigureModule(module.id, module.name)}\n                    data-testid={`button-configure-${module.id}`}\n                  >\n                    <Settings className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":8823},"client/src/pages/modules/DataExfiltrationPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Search, Filter, Plus, Download, Settings, Play, AlertTriangle, CheckCircle } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function DataExfiltrationPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: modulesData, isLoading } = useQuery({\n    queryKey: [\"modules\", \"exfil\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/modules/category/exfil\");\n      if (!response.ok) throw new Error(\"Failed to fetch data exfiltration modules\");\n      return response.json();\n    }\n  });\n\n  const modules = modulesData?.data || [];\n  \n  const filteredModules = modules.filter((module: any) => \n    module.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    module.description.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const handleAddModule = () => {\n    toast({\n      title: \"Add Module\",\n      description: \"Module creation dialog will be implemented soon\"\n    });\n  };\n\n  const handleDeployModule = (moduleId: string, moduleName: string) => {\n    toast({\n      title: \"Module Deployed\",\n      description: `${moduleName} has been deployed successfully`\n    });\n  };\n\n  const handleConfigureModule = (moduleId: string, moduleName: string) => {\n    toast({\n      title: \"Configure Module\",\n      description: `Configuration for ${moduleName} will be implemented soon`\n    });\n  };\n\n  return (\n    <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-purple-400\">Data Exfiltration</h1>\n          <p className=\"text-muted-foreground\">Data extraction and exfiltration techniques</p>\n        </div>\n        <Button className=\"bg-purple-600 hover:bg-purple-700\" onClick={handleAddModule} data-testid=\"button-add-module\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Module\n        </Button>\n      </div>\n\n      {/* Search and Filter */}\n      <div className=\"flex items-center gap-4 mb-6\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n          <Input\n            placeholder=\"Search modules...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-modules\"\n          />\n        </div>\n        <Button variant=\"outline\" size=\"icon\" data-testid=\"button-filter\">\n          <Filter className=\"h-4 w-4\" />\n        </Button>\n      </div>\n\n      {/* Loading State */}\n      {isLoading && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n          {[1, 2, 3].map((i) => (\n            <Card key={i}>\n              <CardHeader>\n                <Skeleton className=\"h-4 w-3/4\" />\n                <Skeleton className=\"h-3 w-full\" />\n              </CardHeader>\n              <CardContent>\n                <Skeleton className=\"h-20 w-full mb-4\" />\n                <div className=\"flex gap-2 mb-4\">\n                  <Skeleton className=\"h-6 w-16\" />\n                  <Skeleton className=\"h-6 w-16\" />\n                </div>\n                <Skeleton className=\"h-8 w-full\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Empty State */}\n      {!isLoading && filteredModules.length === 0 && searchQuery === \"\" && (\n        <div className=\"text-center py-12\">\n          <Download className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">No Data Exfiltration Modules</h3>\n          <p className=\"text-muted-foreground mb-4\">Get started by adding your first data exfiltration module</p>\n          <Button variant=\"outline\" onClick={handleAddModule} data-testid=\"button-add-first-module\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Module\n          </Button>\n        </div>\n      )}\n\n      {/* No Search Results */}\n      {!isLoading && filteredModules.length === 0 && searchQuery !== \"\" && (\n        <div className=\"text-center py-12\">\n          <Search className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">No modules found</h3>\n          <p className=\"text-muted-foreground mb-4\">Try adjusting your search terms</p>\n        </div>\n      )}\n\n      {/* Modules Grid */}\n      {!isLoading && filteredModules.length > 0 && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n          {filteredModules.map((module: any) => (\n            <Card key={module.id} className=\"hover:shadow-lg transition-shadow\" data-testid={`card-module-${module.id}`}>\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-lg font-semibold text-purple-400 mb-1\" data-testid={`text-module-name-${module.id}`}>\n                      {module.name}\n                    </CardTitle>\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      {module.reliable ? (\n                        <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                      ) : (\n                        <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />\n                      )}\n                      <span className=\"text-xs text-muted-foreground\">\n                        {module.reliable ? \"Reliable\" : \"Experimental\"}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                <CardDescription className=\"text-sm\" data-testid={`text-module-description-${module.id}`}>\n                  {module.description}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                {/* Platform badges */}\n                <div className=\"flex flex-wrap gap-1 mb-3\">\n                  {module.platform?.map((platform: string) => (\n                    <Badge key={platform} variant=\"secondary\" className=\"text-xs\">\n                      {platform}\n                    </Badge>\n                  ))}\n                </div>\n                \n                {/* Requirements */}\n                {module.requirements && module.requirements.length > 0 && (\n                  <div className=\"mb-3\">\n                    <p className=\"text-xs text-muted-foreground mb-1\">Requirements:</p>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {module.requirements.slice(0, 2).map((req: string) => (\n                        <Badge key={req} variant=\"outline\" className=\"text-xs\">\n                          {req}\n                        </Badge>\n                      ))}\n                      {module.requirements.length > 2 && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          +{module.requirements.length - 2} more\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                )}\n                \n                {/* Author */}\n                {module.author && (\n                  <p className=\"text-xs text-muted-foreground mb-4\" data-testid={`text-module-author-${module.id}`}>\n                    By {module.author}\n                  </p>\n                )}\n                \n                {/* Action buttons */}\n                <div className=\"flex gap-2\">\n                  <Button \n                    size=\"sm\" \n                    className=\"flex-1 bg-purple-600 hover:bg-purple-700\" \n                    onClick={() => handleDeployModule(module.id, module.name)}\n                    data-testid={`button-deploy-${module.id}`}\n                  >\n                    <Play className=\"h-3 w-3 mr-1\" />\n                    Deploy\n                  </Button>\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\" \n                    onClick={() => handleConfigureModule(module.id, module.name)}\n                    data-testid={`button-configure-${module.id}`}\n                  >\n                    <Settings className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":8832},"client/src/pages/modules/LateralMovementPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Search, Filter, Plus, ArrowRight, Settings, Play, Download, AlertTriangle, CheckCircle } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function LateralMovementPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: modulesData, isLoading } = useQuery({\n    queryKey: [\"modules\", \"lateral\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/modules/category/lateral\");\n      if (!response.ok) throw new Error(\"Failed to fetch lateral movement modules\");\n      return response.json();\n    }\n  });\n\n  const modules = modulesData?.data || [];\n  \n  const filteredModules = modules.filter((module: any) => \n    module.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    module.description.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const handleAddModule = () => {\n    toast({\n      title: \"Add Module\",\n      description: \"Module creation dialog will be implemented soon\"\n    });\n  };\n\n  const handleDeployModule = (moduleId: string, moduleName: string) => {\n    toast({\n      title: \"Module Deployed\",\n      description: `${moduleName} has been deployed successfully`\n    });\n  };\n\n  const handleConfigureModule = (moduleId: string, moduleName: string) => {\n    toast({\n      title: \"Configure Module\",\n      description: `Configuration for ${moduleName} will be implemented soon`\n    });\n  };\n\n  return (\n    <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-blue-400\">Lateral Movement</h1>\n          <p className=\"text-muted-foreground\">Network traversal and lateral movement techniques</p>\n        </div>\n        <Button className=\"bg-blue-600 hover:bg-blue-700\" onClick={handleAddModule} data-testid=\"button-add-module\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Module\n        </Button>\n      </div>\n\n      {/* Search and Filter */}\n      <div className=\"flex items-center gap-4 mb-6\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n          <Input\n            placeholder=\"Search modules...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-modules\"\n          />\n        </div>\n        <Button variant=\"outline\" size=\"icon\" data-testid=\"button-filter\">\n          <Filter className=\"h-4 w-4\" />\n        </Button>\n      </div>\n\n      {/* Loading State */}\n      {isLoading && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n          {[1, 2, 3].map((i) => (\n            <Card key={i}>\n              <CardHeader>\n                <Skeleton className=\"h-4 w-3/4\" />\n                <Skeleton className=\"h-3 w-full\" />\n              </CardHeader>\n              <CardContent>\n                <Skeleton className=\"h-20 w-full mb-4\" />\n                <div className=\"flex gap-2 mb-4\">\n                  <Skeleton className=\"h-6 w-16\" />\n                  <Skeleton className=\"h-6 w-16\" />\n                </div>\n                <Skeleton className=\"h-8 w-full\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Empty State */}\n      {!isLoading && filteredModules.length === 0 && searchQuery === \"\" && (\n        <div className=\"text-center py-12\">\n          <ArrowRight className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">No Lateral Movement Modules</h3>\n          <p className=\"text-muted-foreground mb-4\">Get started by adding your first lateral movement module</p>\n          <Button variant=\"outline\" onClick={handleAddModule} data-testid=\"button-add-first-module\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Module\n          </Button>\n        </div>\n      )}\n\n      {/* No Search Results */}\n      {!isLoading && filteredModules.length === 0 && searchQuery !== \"\" && (\n        <div className=\"text-center py-12\">\n          <Search className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">No modules found</h3>\n          <p className=\"text-muted-foreground mb-4\">Try adjusting your search terms</p>\n        </div>\n      )}\n\n      {/* Modules Grid */}\n      {!isLoading && filteredModules.length > 0 && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n          {filteredModules.map((module: any) => (\n            <Card key={module.id} className=\"hover:shadow-lg transition-shadow\" data-testid={`card-module-${module.id}`}>\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-lg font-semibold text-blue-400 mb-1\" data-testid={`text-module-name-${module.id}`}>\n                      {module.name}\n                    </CardTitle>\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      {module.reliable ? (\n                        <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                      ) : (\n                        <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />\n                      )}\n                      <span className=\"text-xs text-muted-foreground\">\n                        {module.reliable ? \"Reliable\" : \"Experimental\"}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                <CardDescription className=\"text-sm\" data-testid={`text-module-description-${module.id}`}>\n                  {module.description}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                {/* Platform badges */}\n                <div className=\"flex flex-wrap gap-1 mb-3\">\n                  {module.platform?.map((platform: string) => (\n                    <Badge key={platform} variant=\"secondary\" className=\"text-xs\">\n                      {platform}\n                    </Badge>\n                  ))}\n                </div>\n                \n                {/* Requirements */}\n                {module.requirements && module.requirements.length > 0 && (\n                  <div className=\"mb-3\">\n                    <p className=\"text-xs text-muted-foreground mb-1\">Requirements:</p>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {module.requirements.slice(0, 2).map((req: string) => (\n                        <Badge key={req} variant=\"outline\" className=\"text-xs\">\n                          {req}\n                        </Badge>\n                      ))}\n                      {module.requirements.length > 2 && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          +{module.requirements.length - 2} more\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                )}\n                \n                {/* Author */}\n                {module.author && (\n                  <p className=\"text-xs text-muted-foreground mb-4\" data-testid={`text-module-author-${module.id}`}>\n                    By {module.author}\n                  </p>\n                )}\n                \n                {/* Action buttons */}\n                <div className=\"flex gap-2\">\n                  <Button \n                    size=\"sm\" \n                    className=\"flex-1 bg-blue-600 hover:bg-blue-700\" \n                    onClick={() => handleDeployModule(module.id, module.name)}\n                    data-testid={`button-deploy-${module.id}`}\n                  >\n                    <Play className=\"h-3 w-3 mr-1\" />\n                    Deploy\n                  </Button>\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\" \n                    onClick={() => handleConfigureModule(module.id, module.name)}\n                    data-testid={`button-configure-${module.id}`}\n                  >\n                    <Settings className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":8839},"client/src/pages/modules/PersistencePage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Search, Filter, Plus, Clock, Settings, Play, AlertTriangle, CheckCircle } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function PersistencePage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: modulesData, isLoading } = useQuery({\n    queryKey: [\"modules\", \"persistence\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/modules/category/persistence\");\n      if (!response.ok) throw new Error(\"Failed to fetch persistence modules\");\n      return response.json();\n    }\n  });\n\n  const modules = modulesData?.data || [];\n  \n  const filteredModules = modules.filter((module: any) => \n    module.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    module.description.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const handleAddModule = () => {\n    toast({\n      title: \"Add Module\",\n      description: \"Module creation dialog will be implemented soon\"\n    });\n  };\n\n  const handleDeployModule = (moduleId: string, moduleName: string) => {\n    toast({\n      title: \"Module Deployed\",\n      description: `${moduleName} has been deployed successfully`\n    });\n  };\n\n  const handleConfigureModule = (moduleId: string, moduleName: string) => {\n    toast({\n      title: \"Configure Module\",\n      description: `Configuration for ${moduleName} will be implemented soon`\n    });\n  };\n\n  return (\n    <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-orange-400\">Persistence</h1>\n          <p className=\"text-muted-foreground\">Persistence mechanisms and techniques</p>\n        </div>\n        <Button className=\"bg-orange-600 hover:bg-orange-700\" onClick={handleAddModule} data-testid=\"button-add-module\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Module\n        </Button>\n      </div>\n\n      {/* Search and Filter */}\n      <div className=\"flex items-center gap-4 mb-6\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n          <Input\n            placeholder=\"Search modules...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-modules\"\n          />\n        </div>\n        <Button variant=\"outline\" size=\"icon\" data-testid=\"button-filter\">\n          <Filter className=\"h-4 w-4\" />\n        </Button>\n      </div>\n\n      {/* Loading State */}\n      {isLoading && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n          {[1, 2, 3].map((i) => (\n            <Card key={i}>\n              <CardHeader>\n                <Skeleton className=\"h-4 w-3/4\" />\n                <Skeleton className=\"h-3 w-full\" />\n              </CardHeader>\n              <CardContent>\n                <Skeleton className=\"h-20 w-full mb-4\" />\n                <div className=\"flex gap-2 mb-4\">\n                  <Skeleton className=\"h-6 w-16\" />\n                  <Skeleton className=\"h-6 w-16\" />\n                </div>\n                <Skeleton className=\"h-8 w-full\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Empty State */}\n      {!isLoading && filteredModules.length === 0 && searchQuery === \"\" && (\n        <div className=\"text-center py-12\">\n          <Clock className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">No Persistence Modules</h3>\n          <p className=\"text-muted-foreground mb-4\">Get started by adding your first persistence module</p>\n          <Button variant=\"outline\" onClick={handleAddModule} data-testid=\"button-add-first-module\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Module\n          </Button>\n        </div>\n      )}\n\n      {/* No Search Results */}\n      {!isLoading && filteredModules.length === 0 && searchQuery !== \"\" && (\n        <div className=\"text-center py-12\">\n          <Search className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">No modules found</h3>\n          <p className=\"text-muted-foreground mb-4\">Try adjusting your search terms</p>\n        </div>\n      )}\n\n      {/* Modules Grid */}\n      {!isLoading && filteredModules.length > 0 && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n          {filteredModules.map((module: any) => (\n            <Card key={module.id} className=\"hover:shadow-lg transition-shadow\" data-testid={`card-module-${module.id}`}>\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-lg font-semibold text-orange-400 mb-1\" data-testid={`text-module-name-${module.id}`}>\n                      {module.name}\n                    </CardTitle>\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      {module.reliable ? (\n                        <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                      ) : (\n                        <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />\n                      )}\n                      <span className=\"text-xs text-muted-foreground\">\n                        {module.reliable ? \"Reliable\" : \"Experimental\"}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                <CardDescription className=\"text-sm\" data-testid={`text-module-description-${module.id}`}>\n                  {module.description}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                {/* Platform badges */}\n                <div className=\"flex flex-wrap gap-1 mb-3\">\n                  {module.platform?.map((platform: string) => (\n                    <Badge key={platform} variant=\"secondary\" className=\"text-xs\">\n                      {platform}\n                    </Badge>\n                  ))}\n                </div>\n                \n                {/* Requirements */}\n                {module.requirements && module.requirements.length > 0 && (\n                  <div className=\"mb-3\">\n                    <p className=\"text-xs text-muted-foreground mb-1\">Requirements:</p>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {module.requirements.slice(0, 2).map((req: string) => (\n                        <Badge key={req} variant=\"outline\" className=\"text-xs\">\n                          {req}\n                        </Badge>\n                      ))}\n                      {module.requirements.length > 2 && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          +{module.requirements.length - 2} more\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                )}\n                \n                {/* Author */}\n                {module.author && (\n                  <p className=\"text-xs text-muted-foreground mb-4\" data-testid={`text-module-author-${module.id}`}>\n                    By {module.author}\n                  </p>\n                )}\n                \n                {/* Action buttons */}\n                <div className=\"flex gap-2\">\n                  <Button \n                    size=\"sm\" \n                    className=\"flex-1 bg-orange-600 hover:bg-orange-700\" \n                    onClick={() => handleDeployModule(module.id, module.name)}\n                    data-testid={`button-deploy-${module.id}`}\n                  >\n                    <Play className=\"h-3 w-3 mr-1\" />\n                    Deploy\n                  </Button>\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\" \n                    onClick={() => handleConfigureModule(module.id, module.name)}\n                    data-testid={`button-configure-${module.id}`}\n                  >\n                    <Settings className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":8803},"client/src/pages/modules/PostExploitationPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Search, Filter, Plus, Target, Settings, Play, Download, AlertTriangle, CheckCircle } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function PostExploitationPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: modulesData, isLoading } = useQuery({\n    queryKey: [\"modules\", \"post\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/modules/category/post\");\n      if (!response.ok) throw new Error(\"Failed to fetch post-exploitation modules\");\n      return response.json();\n    }\n  });\n\n  const modules = modulesData?.data || [];\n  \n  const filteredModules = modules.filter((module: any) => \n    module.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    module.description.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const handleAddModule = () => {\n    toast({\n      title: \"Add Module\",\n      description: \"Module creation dialog will be implemented soon\"\n    });\n  };\n\n  const handleDeployModule = (moduleId: string, moduleName: string) => {\n    toast({\n      title: \"Module Deployed\",\n      description: `${moduleName} has been deployed successfully`\n    });\n  };\n\n  const handleConfigureModule = (moduleId: string, moduleName: string) => {\n    toast({\n      title: \"Configure Module\",\n      description: `Configuration for ${moduleName} will be implemented soon`\n    });\n  };\n\n  return (\n    <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-red-400\">Post-Exploitation</h1>\n          <p className=\"text-muted-foreground\">Post-exploitation modules and techniques</p>\n        </div>\n        <Button className=\"bg-red-600 hover:bg-red-700\" onClick={handleAddModule} data-testid=\"button-add-module\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Module\n        </Button>\n      </div>\n\n      {/* Search and Filter */}\n      <div className=\"flex items-center gap-4 mb-6\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n          <Input\n            placeholder=\"Search modules...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-modules\"\n          />\n        </div>\n        <Button variant=\"outline\" size=\"icon\" data-testid=\"button-filter\">\n          <Filter className=\"h-4 w-4\" />\n        </Button>\n      </div>\n\n      {/* Loading State */}\n      {isLoading && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n          {[1, 2, 3].map((i) => (\n            <Card key={i}>\n              <CardHeader>\n                <Skeleton className=\"h-4 w-3/4\" />\n                <Skeleton className=\"h-3 w-full\" />\n              </CardHeader>\n              <CardContent>\n                <Skeleton className=\"h-20 w-full mb-4\" />\n                <div className=\"flex gap-2 mb-4\">\n                  <Skeleton className=\"h-6 w-16\" />\n                  <Skeleton className=\"h-6 w-16\" />\n                </div>\n                <Skeleton className=\"h-8 w-full\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Empty State */}\n      {!isLoading && filteredModules.length === 0 && searchQuery === \"\" && (\n        <div className=\"text-center py-12\">\n          <Target className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">No Post-Exploitation Modules</h3>\n          <p className=\"text-muted-foreground mb-4\">Get started by adding your first post-exploitation module</p>\n          <Button variant=\"outline\" onClick={handleAddModule} data-testid=\"button-add-first-module\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Module\n          </Button>\n        </div>\n      )}\n\n      {/* No Search Results */}\n      {!isLoading && filteredModules.length === 0 && searchQuery !== \"\" && (\n        <div className=\"text-center py-12\">\n          <Search className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">No modules found</h3>\n          <p className=\"text-muted-foreground mb-4\">Try adjusting your search terms</p>\n        </div>\n      )}\n\n      {/* Modules Grid */}\n      {!isLoading && filteredModules.length > 0 && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n          {filteredModules.map((module: any) => (\n            <Card key={module.id} className=\"hover:shadow-lg transition-shadow\" data-testid={`card-module-${module.id}`}>\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-lg font-semibold text-red-400 mb-1\" data-testid={`text-module-name-${module.id}`}>\n                      {module.name}\n                    </CardTitle>\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      {module.reliable ? (\n                        <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                      ) : (\n                        <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />\n                      )}\n                      <span className=\"text-xs text-muted-foreground\">\n                        {module.reliable ? \"Reliable\" : \"Experimental\"}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                <CardDescription className=\"text-sm\" data-testid={`text-module-description-${module.id}`}>\n                  {module.description}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                {/* Platform badges */}\n                <div className=\"flex flex-wrap gap-1 mb-3\">\n                  {module.platform?.map((platform: string) => (\n                    <Badge key={platform} variant=\"secondary\" className=\"text-xs\">\n                      {platform}\n                    </Badge>\n                  ))}\n                </div>\n                \n                {/* Requirements */}\n                {module.requirements && module.requirements.length > 0 && (\n                  <div className=\"mb-3\">\n                    <p className=\"text-xs text-muted-foreground mb-1\">Requirements:</p>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {module.requirements.slice(0, 2).map((req: string) => (\n                        <Badge key={req} variant=\"outline\" className=\"text-xs\">\n                          {req}\n                        </Badge>\n                      ))}\n                      {module.requirements.length > 2 && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          +{module.requirements.length - 2} more\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                )}\n                \n                {/* Author */}\n                {module.author && (\n                  <p className=\"text-xs text-muted-foreground mb-4\" data-testid={`text-module-author-${module.id}`}>\n                    By {module.author}\n                  </p>\n                )}\n                \n                {/* Action buttons */}\n                <div className=\"flex gap-2\">\n                  <Button \n                    size=\"sm\" \n                    className=\"flex-1 bg-red-600 hover:bg-red-700\" \n                    onClick={() => handleDeployModule(module.id, module.name)}\n                    data-testid={`button-deploy-${module.id}`}\n                  >\n                    <Play className=\"h-3 w-3 mr-1\" />\n                    Deploy\n                  </Button>\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\" \n                    onClick={() => handleConfigureModule(module.id, module.name)}\n                    data-testid={`button-configure-${module.id}`}\n                  >\n                    <Settings className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":8815},"client/src/pages/modules/PrivilegeEscalationPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Search, Filter, Plus, Shield, Settings, Play, Download, AlertTriangle, CheckCircle } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function PrivilegeEscalationPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: modulesData, isLoading } = useQuery({\n    queryKey: [\"modules\", \"priv-esc\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/modules/category/priv-esc\");\n      if (!response.ok) throw new Error(\"Failed to fetch privilege escalation modules\");\n      return response.json();\n    }\n  });\n\n  const modules = modulesData?.data || [];\n  \n  const filteredModules = modules.filter((module: any) => \n    module.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    module.description.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const handleAddModule = () => {\n    toast({\n      title: \"Add Module\",\n      description: \"Module creation dialog will be implemented soon\"\n    });\n  };\n\n  const handleDeployModule = (moduleId: string, moduleName: string) => {\n    toast({\n      title: \"Module Deployed\",\n      description: `${moduleName} has been deployed successfully`\n    });\n  };\n\n  const handleConfigureModule = (moduleId: string, moduleName: string) => {\n    toast({\n      title: \"Configure Module\",\n      description: `Configuration for ${moduleName} will be implemented soon`\n    });\n  };\n\n  return (\n    <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-yellow-400\">Privilege Escalation</h1>\n          <p className=\"text-muted-foreground\">Privilege escalation techniques and exploits</p>\n        </div>\n        <Button className=\"bg-yellow-600 hover:bg-yellow-700\" onClick={handleAddModule} data-testid=\"button-add-module\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Module\n        </Button>\n      </div>\n\n      {/* Search and Filter */}\n      <div className=\"flex items-center gap-4 mb-6\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n          <Input\n            placeholder=\"Search modules...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-modules\"\n          />\n        </div>\n        <Button variant=\"outline\" size=\"icon\" data-testid=\"button-filter\">\n          <Filter className=\"h-4 w-4\" />\n        </Button>\n      </div>\n\n      {/* Loading State */}\n      {isLoading && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n          {[1, 2, 3].map((i) => (\n            <Card key={i}>\n              <CardHeader>\n                <Skeleton className=\"h-4 w-3/4\" />\n                <Skeleton className=\"h-3 w-full\" />\n              </CardHeader>\n              <CardContent>\n                <Skeleton className=\"h-20 w-full mb-4\" />\n                <div className=\"flex gap-2 mb-4\">\n                  <Skeleton className=\"h-6 w-16\" />\n                  <Skeleton className=\"h-6 w-16\" />\n                </div>\n                <Skeleton className=\"h-8 w-full\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Empty State */}\n      {!isLoading && filteredModules.length === 0 && searchQuery === \"\" && (\n        <div className=\"text-center py-12\">\n          <Shield className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">No Privilege Escalation Modules</h3>\n          <p className=\"text-muted-foreground mb-4\">Get started by adding your first privilege escalation module</p>\n          <Button variant=\"outline\" onClick={handleAddModule} data-testid=\"button-add-first-module\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Module\n          </Button>\n        </div>\n      )}\n\n      {/* No Search Results */}\n      {!isLoading && filteredModules.length === 0 && searchQuery !== \"\" && (\n        <div className=\"text-center py-12\">\n          <Search className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">No modules found</h3>\n          <p className=\"text-muted-foreground mb-4\">Try adjusting your search terms</p>\n        </div>\n      )}\n\n      {/* Modules Grid */}\n      {!isLoading && filteredModules.length > 0 && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n          {filteredModules.map((module: any) => (\n            <Card key={module.id} className=\"hover:shadow-lg transition-shadow\" data-testid={`card-module-${module.id}`}>\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-lg font-semibold text-yellow-400 mb-1\" data-testid={`text-module-name-${module.id}`}>\n                      {module.name}\n                    </CardTitle>\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      {module.reliable ? (\n                        <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                      ) : (\n                        <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />\n                      )}\n                      <span className=\"text-xs text-muted-foreground\">\n                        {module.reliable ? \"Reliable\" : \"Experimental\"}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                <CardDescription className=\"text-sm\" data-testid={`text-module-description-${module.id}`}>\n                  {module.description}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                {/* Platform badges */}\n                <div className=\"flex flex-wrap gap-1 mb-3\">\n                  {module.platform?.map((platform: string) => (\n                    <Badge key={platform} variant=\"secondary\" className=\"text-xs\">\n                      {platform}\n                    </Badge>\n                  ))}\n                </div>\n                \n                {/* Requirements */}\n                {module.requirements && module.requirements.length > 0 && (\n                  <div className=\"mb-3\">\n                    <p className=\"text-xs text-muted-foreground mb-1\">Requirements:</p>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {module.requirements.slice(0, 2).map((req: string) => (\n                        <Badge key={req} variant=\"outline\" className=\"text-xs\">\n                          {req}\n                        </Badge>\n                      ))}\n                      {module.requirements.length > 2 && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          +{module.requirements.length - 2} more\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                )}\n                \n                {/* Author */}\n                {module.author && (\n                  <p className=\"text-xs text-muted-foreground mb-4\" data-testid={`text-module-author-${module.id}`}>\n                    By {module.author}\n                  </p>\n                )}\n                \n                {/* Action buttons */}\n                <div className=\"flex gap-2\">\n                  <Button \n                    size=\"sm\" \n                    className=\"flex-1 bg-yellow-600 hover:bg-yellow-700\" \n                    onClick={() => handleDeployModule(module.id, module.name)}\n                    data-testid={`button-deploy-${module.id}`}\n                  >\n                    <Play className=\"h-3 w-3 mr-1\" />\n                    Deploy\n                  </Button>\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\" \n                    onClick={() => handleConfigureModule(module.id, module.name)}\n                    data-testid={`button-configure-${module.id}`}\n                  >\n                    <Settings className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":8860},"client/src/pages/modules/ReconnaissancePage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Search, Filter, Plus, Eye, Settings, Play, Download, AlertTriangle, CheckCircle } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function ReconnaissancePage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: modulesData, isLoading } = useQuery({\n    queryKey: [\"modules\", \"recon\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/modules/category/recon\");\n      if (!response.ok) throw new Error(\"Failed to fetch reconnaissance modules\");\n      return response.json();\n    }\n  });\n\n  const modules = modulesData?.data || [];\n  \n  const filteredModules = modules.filter((module: any) => \n    module.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    module.description.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const handleAddModule = () => {\n    toast({\n      title: \"Add Module\",\n      description: \"Module creation dialog will be implemented soon\"\n    });\n  };\n\n  const handleDeployModule = (moduleId: string, moduleName: string) => {\n    toast({\n      title: \"Module Deployed\",\n      description: `${moduleName} has been deployed successfully`\n    });\n  };\n\n  const handleConfigureModule = (moduleId: string, moduleName: string) => {\n    toast({\n      title: \"Configure Module\",\n      description: `Configuration for ${moduleName} will be implemented soon`\n    });\n  };\n\n  return (\n    <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-cyan-400\">Reconnaissance</h1>\n          <p className=\"text-muted-foreground\">Information gathering and reconnaissance modules</p>\n        </div>\n        <Button className=\"bg-cyan-600 hover:bg-cyan-700\" onClick={handleAddModule} data-testid=\"button-add-module\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Module\n        </Button>\n      </div>\n\n      {/* Search and Filter */}\n      <div className=\"flex items-center gap-4 mb-6\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n          <Input\n            placeholder=\"Search modules...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-modules\"\n          />\n        </div>\n        <Button variant=\"outline\" size=\"icon\" data-testid=\"button-filter\">\n          <Filter className=\"h-4 w-4\" />\n        </Button>\n      </div>\n\n      {/* Loading State */}\n      {isLoading && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n          {[1, 2, 3].map((i) => (\n            <Card key={i}>\n              <CardHeader>\n                <Skeleton className=\"h-4 w-3/4\" />\n                <Skeleton className=\"h-3 w-full\" />\n              </CardHeader>\n              <CardContent>\n                <Skeleton className=\"h-20 w-full mb-4\" />\n                <div className=\"flex gap-2 mb-4\">\n                  <Skeleton className=\"h-6 w-16\" />\n                  <Skeleton className=\"h-6 w-16\" />\n                </div>\n                <Skeleton className=\"h-8 w-full\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Empty State */}\n      {!isLoading && filteredModules.length === 0 && searchQuery === \"\" && (\n        <div className=\"text-center py-12\">\n          <Eye className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">No Reconnaissance Modules</h3>\n          <p className=\"text-muted-foreground mb-4\">Get started by adding your first reconnaissance module</p>\n          <Button variant=\"outline\" onClick={handleAddModule} data-testid=\"button-add-first-module\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Module\n          </Button>\n        </div>\n      )}\n\n      {/* No Search Results */}\n      {!isLoading && filteredModules.length === 0 && searchQuery !== \"\" && (\n        <div className=\"text-center py-12\">\n          <Search className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">No modules found</h3>\n          <p className=\"text-muted-foreground mb-4\">Try adjusting your search terms</p>\n        </div>\n      )}\n\n      {/* Modules Grid */}\n      {!isLoading && filteredModules.length > 0 && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n          {filteredModules.map((module: any) => (\n            <Card key={module.id} className=\"hover:shadow-lg transition-shadow\" data-testid={`card-module-${module.id}`}>\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-lg font-semibold text-cyan-400 mb-1\" data-testid={`text-module-name-${module.id}`}>\n                      {module.name}\n                    </CardTitle>\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      {module.reliable ? (\n                        <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                      ) : (\n                        <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />\n                      )}\n                      <span className=\"text-xs text-muted-foreground\">\n                        {module.reliable ? \"Reliable\" : \"Experimental\"}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                <CardDescription className=\"text-sm\" data-testid={`text-module-description-${module.id}`}>\n                  {module.description}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                {/* Platform badges */}\n                <div className=\"flex flex-wrap gap-1 mb-3\">\n                  {module.platform?.map((platform: string) => (\n                    <Badge key={platform} variant=\"secondary\" className=\"text-xs\">\n                      {platform}\n                    </Badge>\n                  ))}\n                </div>\n                \n                {/* Requirements */}\n                {module.requirements && module.requirements.length > 0 && (\n                  <div className=\"mb-3\">\n                    <p className=\"text-xs text-muted-foreground mb-1\">Requirements:</p>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {module.requirements.slice(0, 2).map((req: string) => (\n                        <Badge key={req} variant=\"outline\" className=\"text-xs\">\n                          {req}\n                        </Badge>\n                      ))}\n                      {module.requirements.length > 2 && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          +{module.requirements.length - 2} more\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                )}\n                \n                {/* Author */}\n                {module.author && (\n                  <p className=\"text-xs text-muted-foreground mb-4\" data-testid={`text-module-author-${module.id}`}>\n                    By {module.author}\n                  </p>\n                )}\n                \n                {/* Action buttons */}\n                <div className=\"flex gap-2\">\n                  <Button \n                    size=\"sm\" \n                    className=\"flex-1 bg-cyan-600 hover:bg-cyan-700\" \n                    onClick={() => handleDeployModule(module.id, module.name)}\n                    data-testid={`button-deploy-${module.id}`}\n                  >\n                    <Play className=\"h-3 w-3 mr-1\" />\n                    Deploy\n                  </Button>\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\" \n                    onClick={() => handleConfigureModule(module.id, module.name)}\n                    data-testid={`button-configure-${module.id}`}\n                  >\n                    <Settings className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":8811},"client/src/pages/payloads/LinuxPayloadsPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Search, Filter, Plus, Download, Terminal, FileText, Settings, Info, Cog } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface LinuxPayload {\n  id: string;\n  name: string;\n  type: string;\n  description?: string;\n  size?: number;\n  config: any;\n  isGenerated: boolean;\n  createdAt: string;\n}\n\nfunction PayloadCard({ payload }: { payload: LinuxPayload }) {\n  const [detailsOpen, setDetailsOpen] = useState(false);\n  const [configOpen, setConfigOpen] = useState(false);\n  const { toast } = useToast();\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"executable\": return Terminal;\n      case \"script\": return FileText;\n      case \"shellcode\": return Settings;\n      default: return Terminal;\n    }\n  };\n\n  const formatSize = (bytes?: number) => {\n    if (!bytes) return \"Unknown\";\n    if (bytes < 1024) return `${bytes} B`;\n    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;\n    return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;\n  };\n\n  const downloadMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/payloads/${payload.id}/download`, {\n        method: \"POST\"\n      });\n      if (!response.ok) throw new Error(\"Download failed\");\n      return response;\n    },\n    onSuccess: () => {\n      // Simulate file download\n      const link = document.createElement('a');\n      link.href = `/api/payloads/${payload.id}/download`;\n      link.download = `${payload.name}.elf`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      toast({\n        title: \"Download Started\",\n        description: `${payload.name} download initiated successfully.`\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Download Failed\",\n        description: \"Failed to download payload. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleDownload = () => {\n    downloadMutation.mutate();\n  };\n\n  const handleConfigure = () => {\n    setConfigOpen(true);\n  };\n\n  const handleDetails = () => {\n    setDetailsOpen(true);\n  };\n\n  const Icon = getTypeIcon(payload.type);\n\n  return (\n    <Card className=\"bg-card/50 border-border/50 hover:bg-card/80 transition-colors\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Icon className=\"h-4 w-4 text-orange-400\" />\n            <CardTitle className=\"text-sm\">{payload.name}</CardTitle>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge variant={payload.isGenerated ? \"default\" : \"secondary\"}>\n              {payload.type}\n            </Badge>\n          </div>\n        </div>\n        <CardDescription className=\"line-clamp-2\">\n          {payload.description || \"Linux-specific payload\"}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"pt-0\">\n        <div className=\"space-y-2 text-xs text-muted-foreground\">\n          <div>Size: {formatSize(payload.size)}</div>\n          <div>Architecture: {payload.config?.architecture || \"x64\"}</div>\n          <div>Created: {new Date(payload.createdAt).toLocaleDateString()}</div>\n        </div>\n        <div className=\"flex gap-2 mt-4\">\n          <Button \n            size=\"sm\" \n            className=\"h-7 text-xs bg-orange-600 hover:bg-orange-700\"\n            onClick={handleDownload}\n            disabled={downloadMutation.isPending}\n            data-testid={`button-download-${payload.id}`}\n          >\n            <Download className=\"h-3 w-3 mr-1\" />\n            {downloadMutation.isPending ? 'Downloading...' : 'Download'}\n          </Button>\n          <Dialog open={configOpen} onOpenChange={setConfigOpen}>\n            <DialogTrigger asChild>\n              <Button size=\"sm\" variant=\"secondary\" className=\"h-7 text-xs\" data-testid={`button-configure-${payload.id}`}>\n                <Cog className=\"h-3 w-3 mr-1\" />\n                Configure\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[425px]\">\n              <DialogHeader>\n                <DialogTitle>Configure {payload.name}</DialogTitle>\n                <DialogDescription>\n                  Modify payload configuration and settings\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4 py-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"architecture\">Architecture</Label>\n                  <Select defaultValue={(payload.config?.architecture && payload.config.architecture.trim() !== '') ? payload.config.architecture : \"x64\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select architecture\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"x86\">x86 (32-bit)</SelectItem>\n                      <SelectItem value=\"x64\">x64 (64-bit)</SelectItem>\n                      <SelectItem value=\"arm\">ARM</SelectItem>\n                      <SelectItem value=\"arm64\">ARM64</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"host\">LHOST</Label>\n                  <Input id=\"host\" defaultValue={payload.config?.host || \"127.0.0.1\"} placeholder=\"Listener host\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"port\">LPORT</Label>\n                  <Input id=\"port\" type=\"number\" defaultValue={payload.config?.port || \"4444\"} placeholder=\"Listener port\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"shell\">Shell</Label>\n                  <Select defaultValue={(payload.config?.shell && payload.config.shell.trim() !== '') ? payload.config.shell : \"/bin/bash\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select shell\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"/bin/bash\">Bash</SelectItem>\n                      <SelectItem value=\"/bin/sh\">Sh</SelectItem>\n                      <SelectItem value=\"/bin/zsh\">Zsh</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <div className=\"flex justify-end gap-2\">\n                <Button variant=\"outline\" onClick={() => setConfigOpen(false)}>Cancel</Button>\n                <Button className=\"bg-orange-600 hover:bg-orange-700\">Save Configuration</Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n          <Dialog open={detailsOpen} onOpenChange={setDetailsOpen}>\n            <DialogTrigger asChild>\n              <Button size=\"sm\" variant=\"outline\" className=\"h-7 text-xs\" data-testid={`button-details-${payload.id}`}>\n                <Info className=\"h-3 w-3 mr-1\" />\n                Details\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[600px]\">\n              <DialogHeader>\n                <DialogTitle className=\"flex items-center gap-2\">\n                  <Icon className=\"h-5 w-5 text-orange-400\" />\n                  {payload.name}\n                </DialogTitle>\n                <DialogDescription>\n                  Detailed information about this Linux payload\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4 py-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-sm font-semibold\">Type</Label>\n                    <p className=\"text-sm text-muted-foreground\">{payload.type}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-semibold\">Size</Label>\n                    <p className=\"text-sm text-muted-foreground\">{formatSize(payload.size)}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-semibold\">Architecture</Label>\n                    <p className=\"text-sm text-muted-foreground\">{payload.config?.architecture || \"x64\"}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-semibold\">Status</Label>\n                    <Badge variant={payload.isGenerated ? \"default\" : \"secondary\"}>\n                      {payload.isGenerated ? \"Generated\" : \"Template\"}\n                    </Badge>\n                  </div>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-semibold\">Description</Label>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    {payload.description || \"Linux-specific payload for penetration testing and red team operations.\"}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-semibold\">Configuration</Label>\n                  <div className=\"mt-2 p-3 bg-muted/50 rounded-lg\">\n                    <pre className=\"text-xs\">{JSON.stringify(payload.config, null, 2)}</pre>\n                  </div>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-semibold\">Created</Label>\n                  <p className=\"text-sm text-muted-foreground\">{new Date(payload.createdAt).toLocaleString()}</p>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function LinuxPayloadsPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\");\n  const [, navigate] = useLocation();\n\n  const { data: payloadsData, isLoading } = useQuery({\n    queryKey: [\"payloads\", \"linux\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/payloads/platform/linux\");\n      if (!response.ok) throw new Error(\"Failed to fetch Linux payloads\");\n      return response.json();\n    }\n  });\n\n  const payloads = payloadsData?.data || [];\n\n  const filteredPayloads = payloads.filter((payload: LinuxPayload) => {\n    const matchesSearch = payload.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         payload.description?.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesType = typeFilter === \"all\" || payload.type === typeFilter;\n    return matchesSearch && matchesType;\n  });\n\n  return (\n    <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-orange-400\">Linux Payloads</h1>\n          <p className=\"text-muted-foreground\">Linux-specific executables, scripts and implants</p>\n        </div>\n        <Button \n          className=\"bg-orange-600 hover:bg-orange-700\"\n          onClick={() => navigate(\"/payloads/generator?platform=linux\")}\n          data-testid=\"button-generate-payload\"\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Generate Payload\n        </Button>\n      </div>\n\n      <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search Linux payloads...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n        <div className=\"flex gap-2\">\n          <Select value={typeFilter} onValueChange={setTypeFilter}>\n            <SelectTrigger className=\"w-[130px]\">\n              <Filter className=\"h-4 w-4 mr-2\" />\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Types</SelectItem>\n              <SelectItem value=\"executable\">Executable</SelectItem>\n              <SelectItem value=\"script\">Script</SelectItem>\n              <SelectItem value=\"shellcode\">Shellcode</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {isLoading ? (\n          Array.from({ length: 6 }).map((_, i) => (\n            <Card key={i} className=\"bg-card/50 border-border/50 animate-pulse\">\n              <CardHeader>\n                <div className=\"h-4 bg-muted rounded w-32\"></div>\n                <div className=\"h-3 bg-muted rounded w-24\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"h-3 bg-muted rounded w-full\"></div>\n                  <div className=\"h-3 bg-muted rounded w-3/4\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : filteredPayloads.length > 0 ? (\n          filteredPayloads.map((payload: LinuxPayload) => (\n            <PayloadCard key={payload.id} payload={payload} />\n          ))\n        ) : (\n          <div className=\"col-span-full text-center py-12\">\n            <Terminal className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No Linux payloads found</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              {searchQuery || typeFilter !== \"all\" \n                ? \"No payloads match your current filters.\" \n                : \"No Linux payloads are available.\"}\n            </p>\n            <Button variant=\"outline\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Generate Payload\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {!isLoading && filteredPayloads.length > 0 && (\n        <div className=\"mt-6 text-center text-sm text-muted-foreground\">\n          Showing {filteredPayloads.length} Linux payloads\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":14847},"client/src/pages/payloads/MacOSPayloadsPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Search, Filter, Plus, Download, Apple, FileText, Settings, Info, Cog } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\n\ninterface MacOSPayload {\n  id: string;\n  name: string;\n  type: string;\n  description?: string;\n  size?: number;\n  config: any;\n  isGenerated: boolean;\n  createdAt: string;\n}\n\nfunction PayloadCard({ payload }: { payload: MacOSPayload }) {\n  const [detailsOpen, setDetailsOpen] = useState(false);\n  const [configOpen, setConfigOpen] = useState(false);\n  const { toast } = useToast();\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"application\": return Apple;\n      case \"script\": return FileText;\n      case \"shellcode\": return Settings;\n      default: return Apple;\n    }\n  };\n\n  const formatSize = (bytes?: number) => {\n    if (!bytes) return \"Unknown\";\n    if (bytes < 1024) return `${bytes} B`;\n    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;\n    return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;\n  };\n\n  const downloadMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/payloads/${payload.id}/download`, {\n        method: \"POST\"\n      });\n      if (!response.ok) throw new Error(\"Download failed\");\n      return response;\n    },\n    onSuccess: () => {\n      // Simulate file download\n      const link = document.createElement('a');\n      link.href = `/api/payloads/${payload.id}/download`;\n      link.download = `${payload.name}.app`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      toast({\n        title: \"Download Started\",\n        description: `${payload.name} download initiated successfully.`\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Download Failed\",\n        description: \"Failed to download payload. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleDownload = () => {\n    downloadMutation.mutate();\n  };\n\n  const handleConfigure = () => {\n    setConfigOpen(true);\n  };\n\n  const handleDetails = () => {\n    setDetailsOpen(true);\n  };\n\n  const Icon = getTypeIcon(payload.type);\n\n  return (\n    <Card className=\"bg-card/50 border-border/50 hover:bg-card/80 transition-colors\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Icon className=\"h-4 w-4 text-gray-400\" />\n            <CardTitle className=\"text-sm\">{payload.name}</CardTitle>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge variant={payload.isGenerated ? \"default\" : \"secondary\"}>\n              {payload.type}\n            </Badge>\n          </div>\n        </div>\n        <CardDescription className=\"line-clamp-2\">\n          {payload.description || \"macOS-specific payload\"}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"pt-0\">\n        <div className=\"space-y-2 text-xs text-muted-foreground\">\n          <div>Size: {formatSize(payload.size)}</div>\n          <div>Architecture: {payload.config?.architecture || \"Universal\"}</div>\n          <div>Created: {new Date(payload.createdAt).toLocaleDateString()}</div>\n        </div>\n        <div className=\"flex gap-2 mt-4\">\n          <Button \n            size=\"sm\" \n            className=\"h-7 text-xs bg-gray-600 hover:bg-gray-700\"\n            onClick={handleDownload}\n            disabled={downloadMutation.isPending}\n            data-testid={`button-download-${payload.id}`}\n          >\n            <Download className=\"h-3 w-3 mr-1\" />\n            {downloadMutation.isPending ? 'Downloading...' : 'Download'}\n          </Button>\n          <Dialog open={configOpen} onOpenChange={setConfigOpen}>\n            <DialogTrigger asChild>\n              <Button size=\"sm\" variant=\"secondary\" className=\"h-7 text-xs\" data-testid={`button-configure-${payload.id}`}>\n                <Cog className=\"h-3 w-3 mr-1\" />\n                Configure\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[425px]\">\n              <DialogHeader>\n                <DialogTitle>Configure {payload.name}</DialogTitle>\n                <DialogDescription>\n                  Modify payload configuration and settings\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4 py-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"architecture\">Architecture</Label>\n                  <Select defaultValue={(payload.config?.architecture && payload.config.architecture.trim() !== '') ? payload.config.architecture : \"Universal\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select architecture\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Intel\">Intel (x64)</SelectItem>\n                      <SelectItem value=\"Apple Silicon\">Apple Silicon (M1/M2)</SelectItem>\n                      <SelectItem value=\"Universal\">Universal Binary</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"host\">LHOST</Label>\n                  <Input id=\"host\" defaultValue={payload.config?.host || \"127.0.0.1\"} placeholder=\"Listener host\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"port\">LPORT</Label>\n                  <Input id=\"port\" type=\"number\" defaultValue={payload.config?.port || \"4444\"} placeholder=\"Listener port\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"shell\">Shell</Label>\n                  <Select defaultValue={(payload.config?.shell && payload.config.shell.trim() !== '') ? payload.config.shell : \"/bin/zsh\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select shell\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"/bin/zsh\">Zsh</SelectItem>\n                      <SelectItem value=\"/bin/bash\">Bash</SelectItem>\n                      <SelectItem value=\"/bin/sh\">Sh</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <div className=\"flex justify-end gap-2\">\n                <Button variant=\"outline\" onClick={() => setConfigOpen(false)}>Cancel</Button>\n                <Button className=\"bg-gray-600 hover:bg-gray-700\">Save Configuration</Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n          <Dialog open={detailsOpen} onOpenChange={setDetailsOpen}>\n            <DialogTrigger asChild>\n              <Button size=\"sm\" variant=\"outline\" className=\"h-7 text-xs\" data-testid={`button-details-${payload.id}`}>\n                <Info className=\"h-3 w-3 mr-1\" />\n                Details\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[600px]\">\n              <DialogHeader>\n                <DialogTitle className=\"flex items-center gap-2\">\n                  <Icon className=\"h-5 w-5 text-gray-400\" />\n                  {payload.name}\n                </DialogTitle>\n                <DialogDescription>\n                  Detailed information about this macOS payload\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4 py-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-sm font-semibold\">Type</Label>\n                    <p className=\"text-sm text-muted-foreground\">{payload.type}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-semibold\">Size</Label>\n                    <p className=\"text-sm text-muted-foreground\">{formatSize(payload.size)}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-semibold\">Architecture</Label>\n                    <p className=\"text-sm text-muted-foreground\">{payload.config?.architecture || \"Universal\"}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-semibold\">Status</Label>\n                    <Badge variant={payload.isGenerated ? \"default\" : \"secondary\"}>\n                      {payload.isGenerated ? \"Generated\" : \"Template\"}\n                    </Badge>\n                  </div>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-semibold\">Description</Label>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    {payload.description || \"macOS-specific payload for penetration testing and red team operations.\"}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-semibold\">Configuration</Label>\n                  <div className=\"mt-2 p-3 bg-muted/50 rounded-lg\">\n                    <pre className=\"text-xs\">{JSON.stringify(payload.config, null, 2)}</pre>\n                  </div>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-semibold\">Created</Label>\n                  <p className=\"text-sm text-muted-foreground\">{new Date(payload.createdAt).toLocaleString()}</p>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function MacOSPayloadsPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\");\n  const [, navigate] = useLocation();\n\n  const { data: payloadsData, isLoading } = useQuery({\n    queryKey: [\"payloads\", \"macos\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/payloads/platform/macos\");\n      if (!response.ok) throw new Error(\"Failed to fetch macOS payloads\");\n      return response.json();\n    }\n  });\n\n  const payloads = payloadsData?.data || [];\n\n  const filteredPayloads = payloads.filter((payload: MacOSPayload) => {\n    const matchesSearch = payload.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         payload.description?.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesType = typeFilter === \"all\" || payload.type === typeFilter;\n    return matchesSearch && matchesType;\n  });\n\n  return (\n    <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-gray-300\">macOS Payloads</h1>\n          <p className=\"text-muted-foreground\">macOS-specific applications and scripts</p>\n        </div>\n        <Button \n          className=\"bg-gray-600 hover:bg-gray-700\" \n          data-testid=\"button-generate-payload\"\n          onClick={() => navigate(\"/payloads/generator?platform=macos\")}\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Generate Payload\n        </Button>\n      </div>\n\n      <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search macOS payloads...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-payloads\"\n          />\n        </div>\n        <div className=\"flex gap-2\">\n          <Select value={typeFilter} onValueChange={setTypeFilter}>\n            <SelectTrigger className=\"w-[130px]\">\n              <Filter className=\"h-4 w-4 mr-2\" />\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Types</SelectItem>\n              <SelectItem value=\"application\">Application</SelectItem>\n              <SelectItem value=\"script\">Script</SelectItem>\n              <SelectItem value=\"shellcode\">Shellcode</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {isLoading ? (\n          Array.from({ length: 6 }).map((_, i) => (\n            <Card key={i} className=\"bg-card/50 border-border/50 animate-pulse\">\n              <CardHeader>\n                <div className=\"h-4 bg-muted rounded w-32\"></div>\n                <div className=\"h-3 bg-muted rounded w-24\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"h-3 bg-muted rounded w-full\"></div>\n                  <div className=\"h-3 bg-muted rounded w-3/4\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : filteredPayloads.length > 0 ? (\n          filteredPayloads.map((payload: MacOSPayload) => (\n            <PayloadCard key={payload.id} payload={payload} />\n          ))\n        ) : (\n          <div className=\"col-span-full text-center py-12\">\n            <Apple className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No macOS payloads found</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              {searchQuery || typeFilter !== \"all\" \n                ? \"No payloads match your current filters.\" \n                : \"No macOS payloads are available.\"}\n            </p>\n            <Button variant=\"outline\" data-testid=\"button-generate-payload-empty\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Generate Payload\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {!isLoading && filteredPayloads.length > 0 && (\n        <div className=\"mt-6 text-center text-sm text-muted-foreground\">\n          Showing {filteredPayloads.length} macOS payloads\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":14845},"client/src/pages/payloads/MobilePayloadsPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Search, Filter, Plus, Download, Smartphone, FileText, Package, Info, Cog } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\n\ninterface MobilePayload {\n  id: string;\n  name: string;\n  type: string;\n  description?: string;\n  size?: number;\n  config: any;\n  isGenerated: boolean;\n  createdAt: string;\n}\n\nfunction PayloadCard({ payload }: { payload: MobilePayload }) {\n  const [detailsOpen, setDetailsOpen] = useState(false);\n  const [configOpen, setConfigOpen] = useState(false);\n  const { toast } = useToast();\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"apk\": return Package;\n      case \"ipa\": return Smartphone;\n      case \"script\": return FileText;\n      default: return Smartphone;\n    }\n  };\n\n  const formatSize = (bytes?: number) => {\n    if (!bytes) return \"Unknown\";\n    if (bytes < 1024) return `${bytes} B`;\n    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;\n    return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;\n  };\n\n  const downloadMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/payloads/${payload.id}/download`, {\n        method: \"POST\"\n      });\n      if (!response.ok) throw new Error(\"Download failed\");\n      return response;\n    },\n    onSuccess: () => {\n      // Simulate file download\n      const link = document.createElement('a');\n      link.href = `/api/payloads/${payload.id}/download`;\n      link.download = `${payload.name}.${payload.type}`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      toast({\n        title: \"Download Started\",\n        description: `${payload.name} download initiated successfully.`\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Download Failed\",\n        description: \"Failed to download payload. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleDownload = () => {\n    downloadMutation.mutate();\n  };\n\n  const handleConfigure = () => {\n    setConfigOpen(true);\n  };\n\n  const handleDetails = () => {\n    setDetailsOpen(true);\n  };\n\n  const Icon = getTypeIcon(payload.type);\n\n  return (\n    <Card className=\"bg-card/50 border-border/50 hover:bg-card/80 transition-colors\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Icon className=\"h-4 w-4 text-cyan-400\" />\n            <CardTitle className=\"text-sm\">{payload.name}</CardTitle>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge variant={payload.isGenerated ? \"default\" : \"secondary\"}>\n              {payload.type.toUpperCase()}\n            </Badge>\n          </div>\n        </div>\n        <CardDescription className=\"line-clamp-2\">\n          {payload.description || \"Mobile application payload\"}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"pt-0\">\n        <div className=\"space-y-2 text-xs text-muted-foreground\">\n          <div>Size: {formatSize(payload.size)}</div>\n          <div>Platform: {payload.config?.platform || \"Android\"}</div>\n          <div>Created: {new Date(payload.createdAt).toLocaleDateString()}</div>\n        </div>\n        <div className=\"flex gap-2 mt-4\">\n          <Button \n            size=\"sm\" \n            className=\"h-7 text-xs bg-cyan-600 hover:bg-cyan-700\"\n            onClick={handleDownload}\n            disabled={downloadMutation.isPending}\n            data-testid={`button-download-${payload.id}`}\n          >\n            <Download className=\"h-3 w-3 mr-1\" />\n            {downloadMutation.isPending ? 'Downloading...' : 'Download'}\n          </Button>\n          <Dialog open={configOpen} onOpenChange={setConfigOpen}>\n            <DialogTrigger asChild>\n              <Button size=\"sm\" variant=\"secondary\" className=\"h-7 text-xs\" data-testid={`button-configure-${payload.id}`}>\n                <Cog className=\"h-3 w-3 mr-1\" />\n                Configure\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[425px]\">\n              <DialogHeader>\n                <DialogTitle>Configure {payload.name}</DialogTitle>\n                <DialogDescription>\n                  Modify payload configuration and settings\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4 py-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"platform\">Platform</Label>\n                  <Select defaultValue={(payload.config?.platform && payload.config.platform.trim() !== '') ? payload.config.platform : \"Android\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select platform\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Android\">Android</SelectItem>\n                      <SelectItem value=\"iOS\">iOS</SelectItem>\n                      <SelectItem value=\"React Native\">React Native</SelectItem>\n                      <SelectItem value=\"Flutter\">Flutter</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"host\">C2 Host</Label>\n                  <Input id=\"host\" defaultValue={payload.config?.host || \"127.0.0.1\"} placeholder=\"Command server host\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"port\">C2 Port</Label>\n                  <Input id=\"port\" type=\"number\" defaultValue={payload.config?.port || \"8443\"} placeholder=\"Command server port\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"permissions\">Permissions</Label>\n                  <Select defaultValue={(payload.config?.permissions && payload.config.permissions.trim() !== '') ? payload.config.permissions : \"standard\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select permissions\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"minimal\">Minimal</SelectItem>\n                      <SelectItem value=\"standard\">Standard</SelectItem>\n                      <SelectItem value=\"elevated\">Elevated</SelectItem>\n                      <SelectItem value=\"admin\">Administrator</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"stealth\">Stealth Mode</Label>\n                  <Select defaultValue={(payload.config?.stealth && payload.config.stealth.trim() !== '') ? payload.config.stealth : \"normal\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select stealth level\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"normal\">Normal</SelectItem>\n                      <SelectItem value=\"hidden\">Hidden Icon</SelectItem>\n                      <SelectItem value=\"system\">System Service</SelectItem>\n                      <SelectItem value=\"background\">Background Only</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <div className=\"flex justify-end gap-2\">\n                <Button variant=\"outline\" onClick={() => setConfigOpen(false)}>Cancel</Button>\n                <Button className=\"bg-cyan-600 hover:bg-cyan-700\">Save Configuration</Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n          <Dialog open={detailsOpen} onOpenChange={setDetailsOpen}>\n            <DialogTrigger asChild>\n              <Button size=\"sm\" variant=\"outline\" className=\"h-7 text-xs\" data-testid={`button-details-${payload.id}`}>\n                <Info className=\"h-3 w-3 mr-1\" />\n                Details\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[600px]\">\n              <DialogHeader>\n                <DialogTitle className=\"flex items-center gap-2\">\n                  <Icon className=\"h-5 w-5 text-cyan-400\" />\n                  {payload.name}\n                </DialogTitle>\n                <DialogDescription>\n                  Detailed information about this mobile payload\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4 py-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-sm font-semibold\">Type</Label>\n                    <p className=\"text-sm text-muted-foreground\">{payload.type.toUpperCase()}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-semibold\">Size</Label>\n                    <p className=\"text-sm text-muted-foreground\">{formatSize(payload.size)}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-semibold\">Platform</Label>\n                    <p className=\"text-sm text-muted-foreground\">{payload.config?.platform || \"Android\"}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-semibold\">Status</Label>\n                    <Badge variant={payload.isGenerated ? \"default\" : \"secondary\"}>\n                      {payload.isGenerated ? \"Generated\" : \"Template\"}\n                    </Badge>\n                  </div>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-semibold\">Description</Label>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    {payload.description || \"Mobile application payload for penetration testing and red team operations.\"}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-semibold\">Configuration</Label>\n                  <div className=\"mt-2 p-3 bg-muted/50 rounded-lg\">\n                    <pre className=\"text-xs\">{JSON.stringify(payload.config, null, 2)}</pre>\n                  </div>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-semibold\">Created</Label>\n                  <p className=\"text-sm text-muted-foreground\">{new Date(payload.createdAt).toLocaleString()}</p>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function MobilePayloadsPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\");\n  const [, navigate] = useLocation();\n\n  const { data: payloadsData, isLoading } = useQuery({\n    queryKey: [\"payloads\", \"mobile\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/payloads/platform/mobile\");\n      if (!response.ok) throw new Error(\"Failed to fetch mobile payloads\");\n      return response.json();\n    }\n  });\n\n  const payloads = payloadsData?.data || [];\n\n  const filteredPayloads = payloads.filter((payload: MobilePayload) => {\n    const matchesSearch = payload.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         payload.description?.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesType = typeFilter === \"all\" || payload.type === typeFilter;\n    return matchesSearch && matchesType;\n  });\n\n  return (\n    <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-cyan-400\">Mobile Payloads</h1>\n          <p className=\"text-muted-foreground\">Android and iOS applications and exploits</p>\n        </div>\n        <Button \n          className=\"bg-cyan-600 hover:bg-cyan-700\" \n          data-testid=\"button-generate-payload\"\n          onClick={() => navigate(\"/payloads/generator?platform=mobile\")}\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Generate Payload\n        </Button>\n      </div>\n\n      <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search mobile payloads...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-payloads\"\n          />\n        </div>\n        <div className=\"flex gap-2\">\n          <Select value={typeFilter} onValueChange={setTypeFilter}>\n            <SelectTrigger className=\"w-[130px]\">\n              <Filter className=\"h-4 w-4 mr-2\" />\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Types</SelectItem>\n              <SelectItem value=\"apk\">APK</SelectItem>\n              <SelectItem value=\"ipa\">IPA</SelectItem>\n              <SelectItem value=\"script\">Script</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {isLoading ? (\n          Array.from({ length: 6 }).map((_, i) => (\n            <Card key={i} className=\"bg-card/50 border-border/50 animate-pulse\">\n              <CardHeader>\n                <div className=\"h-4 bg-muted rounded w-32\"></div>\n                <div className=\"h-3 bg-muted rounded w-24\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"h-3 bg-muted rounded w-full\"></div>\n                  <div className=\"h-3 bg-muted rounded w-3/4\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : filteredPayloads.length > 0 ? (\n          filteredPayloads.map((payload: MobilePayload) => (\n            <PayloadCard key={payload.id} payload={payload} />\n          ))\n        ) : (\n          <div className=\"col-span-full text-center py-12\">\n            <Smartphone className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No mobile payloads found</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              {searchQuery || typeFilter !== \"all\" \n                ? \"No payloads match your current filters.\" \n                : \"No mobile payloads are available.\"}\n            </p>\n            <Button variant=\"outline\" data-testid=\"button-generate-payload-empty\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Generate Payload\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {!isLoading && filteredPayloads.length > 0 && (\n        <div className=\"mt-6 text-center text-sm text-muted-foreground\">\n          Showing {filteredPayloads.length} mobile payloads\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":15844},"client/src/pages/payloads/PayloadGeneratorPage.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { SEO } from \"@/components/SEO\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Wand2, Download, Settings, Play, Code, Shield } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\n\nconst platforms = [\n  { id: \"windows\", name: \"Windows\", color: \"text-blue-400\" },\n  { id: \"linux\", name: \"Linux\", color: \"text-orange-400\" },\n  { id: \"macos\", name: \"macOS\", color: \"text-gray-400\" },\n  { id: \"web\", name: \"Web\", color: \"text-purple-400\" },\n  { id: \"mobile\", name: \"Mobile\", color: \"text-cyan-400\" }\n];\n\nconst payloadTypes = {\n  windows: [\"executable\", \"dll\", \"script\", \"shellcode\"],\n  linux: [\"executable\", \"script\", \"shellcode\"],\n  macos: [\"application\", \"script\"],\n  web: [\"webshell\", \"script\"],\n  mobile: [\"apk\", \"ipa\"]\n};\n\nexport default function PayloadGeneratorPage() {\n  const [platform, setPlatform] = useState(\"\");\n  const [payloadType, setPayloadType] = useState(\"\");\n  const [payloadName, setPayloadName] = useState(\"\");\n  const [lhost, setLhost] = useState(\"192.168.1.100\");\n  const [lport, setLport] = useState(\"4444\");\n  const [architecture, setArchitecture] = useState(\"x64\");\n  const [encoder, setEncoder] = useState(\"none\");\n  const [iterations, setIterations] = useState(\"1\");\n  const [obfuscation, setObfuscation] = useState(false);\n  const [persistence, setPersistence] = useState(false);\n  const [antiVirus, setAntiVirus] = useState(false);\n  const [customCode, setCustomCode] = useState(\"\");\n  const [generatedPayload, setGeneratedPayload] = useState<any>(null);\n  \n  const { toast } = useToast();\n\n  // Handle URL parameters for platform pre-selection\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const platformParam = urlParams.get('platform');\n    if (platformParam && platforms.find(p => p.id === platformParam)) {\n      setPlatform(platformParam);\n      setPayloadName(`${platformParam}_payload_${Date.now()}`);\n    }\n  }, []);\n\n  const generateMutation = useMutation({\n    mutationFn: async (payloadConfig: any) => {\n      const response = await fetch('/api/payloads/generate', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payloadConfig)\n      });\n      if (!response.ok) throw new Error('Generation failed');\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setGeneratedPayload(data.data);\n      toast({\n        title: \"Payload Generated Successfully\",\n        description: `${payloadName} is ready for download`,\n      });\n      // Invalidate payloads cache to refresh payload lists\n      queryClient.invalidateQueries({ queryKey: ['payloads', platform] });\n    },\n    onError: () => {\n      toast({\n        title: \"Generation Failed\",\n        description: \"Failed to generate payload. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const downloadMutation = useMutation({\n    mutationFn: async (payloadId: string) => {\n      const response = await fetch(`/api/payloads/${payloadId}/download`, {\n        method: 'POST'\n      });\n      if (!response.ok) throw new Error('Download failed');\n      return { payloadId };\n    },\n    onSuccess: ({ payloadId }) => {\n      // Trigger file download\n      const link = document.createElement('a');\n      link.href = `/api/payloads/${payloadId}/download`;\n      link.download = `${payloadName}.${getFileExtension()}`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      toast({\n        title: \"Download Started\",\n        description: `${payloadName} download initiated successfully.`\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Download Failed\",\n        description: \"Failed to download payload. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleGenerate = () => {\n    if (!platform || !payloadType || !payloadName) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const payloadConfig = {\n      platform,\n      type: payloadType,\n      name: payloadName,\n      config: {\n        host: lhost,\n        port: parseInt(lport),\n        architecture,\n        encoder: encoder !== 'none' ? encoder : null,\n        iterations: encoder !== 'none' ? parseInt(iterations) : 1,\n        obfuscation,\n        persistence,\n        antiVirus,\n        customCode: customCode.trim() || null\n      }\n    };\n\n    generateMutation.mutate(payloadConfig);\n  };\n\n  const handleDownload = () => {\n    if (generatedPayload?.id) {\n      downloadMutation.mutate(generatedPayload.id);\n    }\n  };\n\n  const getFileExtension = () => {\n    switch (platform) {\n      case 'windows': return payloadType === 'dll' ? 'dll' : 'exe';\n      case 'linux': return 'elf';\n      case 'macos': return 'app';\n      case 'web': return payloadType === 'webshell' ? 'php' : 'js';\n      case 'mobile': return payloadType;\n      default: return 'bin';\n    }\n  };\n\n  const selectedPlatform = platforms.find(p => p.id === platform);\n  const availableTypes = platform ? payloadTypes[platform as keyof typeof payloadTypes] : [];\n\n  return (\n    <>\n      <SEO \n        title=\"Payload Generator - C2 Command & Control\"\n        description=\"Generate custom payloads for different platforms including Windows, Linux, macOS, web and mobile with advanced evasion features\"\n        keywords=\"payload generator, pentesting, red team, c2, command control\"\n      />\n      <div className=\"container-responsive py-6 max-w-6xl\">\n        <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold tracking-tight text-green-400\">Payload Generator</h1>\n        <p className=\"text-muted-foreground\">Generate custom payloads for different platforms and scenarios</p>\n      </div>\n\n      <div className=\"grid gap-6 lg:grid-cols-3\">\n        <div className=\"lg:col-span-2 space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Basic Configuration</CardTitle>\n              <CardDescription>Select platform and payload type</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid gap-4 sm:grid-cols-2\">\n                <div>\n                  <Label htmlFor=\"platform\">Target Platform</Label>\n                  <Select value={platform} onValueChange={setPlatform}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select platform...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {platforms.map((p) => (\n                        <SelectItem key={p.id} value={p.id}>\n                          <span className={p.color}>{p.name}</span>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"type\">Payload Type</Label>\n                  <Select value={payloadType} onValueChange={setPayloadType} disabled={!platform}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select type...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {availableTypes.map((type) => (\n                        <SelectItem key={type} value={type}>\n                          {type}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"name\">Payload Name</Label>\n                <Input\n                  id=\"name\"\n                  value={payloadName}\n                  onChange={(e) => setPayloadName(e.target.value)}\n                  placeholder=\"Enter payload name...\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Network Configuration</CardTitle>\n              <CardDescription>Configure connection parameters</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid gap-4 sm:grid-cols-2\">\n                <div>\n                  <Label htmlFor=\"lhost\">Listen Host (LHOST)</Label>\n                  <Input\n                    id=\"lhost\"\n                    value={lhost}\n                    onChange={(e) => setLhost(e.target.value)}\n                    placeholder=\"192.168.1.100\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"lport\">Listen Port (LPORT)</Label>\n                  <Input\n                    id=\"lport\"\n                    type=\"number\"\n                    value={lport}\n                    onChange={(e) => setLport(e.target.value)}\n                    placeholder=\"4444\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid gap-4 sm:grid-cols-2\">\n                <div>\n                  <Label htmlFor=\"architecture\">Architecture</Label>\n                  <Select value={architecture} onValueChange={setArchitecture}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"x86\">x86 (32-bit)</SelectItem>\n                      <SelectItem value=\"x64\">x64 (64-bit)</SelectItem>\n                      <SelectItem value=\"arm\">ARM</SelectItem>\n                      <SelectItem value=\"arm64\">ARM64</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"encoder\">Encoder</Label>\n                  <Select value={encoder} onValueChange={setEncoder}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"None\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"none\">None</SelectItem>\n                      <SelectItem value=\"shikata_ga_nai\">Shikata Ga Nai</SelectItem>\n                      <SelectItem value=\"alpha_mixed\">Alpha Mixed</SelectItem>\n                      <SelectItem value=\"xor\">XOR</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {encoder && encoder !== \"none\" && (\n                <div>\n                  <Label htmlFor=\"iterations\">Encoding Iterations</Label>\n                  <Input\n                    id=\"iterations\"\n                    type=\"number\"\n                    value={iterations}\n                    onChange={(e) => setIterations(e.target.value)}\n                    min=\"1\"\n                    max=\"10\"\n                  />\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Advanced Options</CardTitle>\n              <CardDescription>Configure evasion and persistence features</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Code Obfuscation</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Apply code obfuscation techniques\n                  </p>\n                </div>\n                <Switch checked={obfuscation} onCheckedChange={setObfuscation} />\n              </div>\n\n              <Separator />\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Persistence Mechanism</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Add persistence to maintain access\n                  </p>\n                </div>\n                <Switch checked={persistence} onCheckedChange={setPersistence} />\n              </div>\n\n              <Separator />\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Anti-Virus Evasion</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Apply AV evasion techniques\n                  </p>\n                </div>\n                <Switch checked={antiVirus} onCheckedChange={setAntiVirus} />\n              </div>\n\n              <Separator />\n\n              <div>\n                <Label htmlFor=\"custom\">Custom Code</Label>\n                <Textarea\n                  id=\"custom\"\n                  value={customCode}\n                  onChange={(e) => setCustomCode(e.target.value)}\n                  placeholder=\"Add custom code or modifications...\"\n                  rows={4}\n                  className=\"font-mono text-sm\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Generation Preview</CardTitle>\n              <CardDescription>Review payload configuration</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {platform && payloadType ? (\n                <div className=\"space-y-4\">\n                  <div className=\"p-4 bg-muted/50 rounded-lg\">\n                    <h3 className=\"font-medium mb-2\">Configuration Summary</h3>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Platform:</span>\n                        <span className={selectedPlatform?.color}>{selectedPlatform?.name}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Type:</span>\n                        <span className=\"font-mono\">{payloadType}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Name:</span>\n                        <span className=\"font-mono\">{payloadName || \"Unnamed\"}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Target:</span>\n                        <span className=\"font-mono\">{lhost}:{lport}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Arch:</span>\n                        <span className=\"font-mono\">{architecture}</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <h4 className=\"font-medium text-sm\">Features:</h4>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {encoder && encoder !== \"none\" && <Badge variant=\"secondary\">Encoded</Badge>}\n                      {obfuscation && <Badge variant=\"secondary\">Obfuscated</Badge>}\n                      {persistence && <Badge variant=\"secondary\">Persistent</Badge>}\n                      {antiVirus && <Badge variant=\"secondary\">AV Evasion</Badge>}\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Settings className=\"h-8 w-8 mx-auto mb-2\" />\n                  <p>Configure payload to see preview</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <div className=\"space-y-3\">\n            <Button \n              className=\"w-full bg-green-600 hover:bg-green-700\"\n              onClick={handleGenerate}\n              disabled={!platform || !payloadType || !payloadName || generateMutation.isPending}\n              data-testid=\"button-generate-payload\"\n            >\n              <Wand2 className=\"h-4 w-4 mr-2\" />\n              {generateMutation.isPending ? \"Generating...\" : \"Generate Payload\"}\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              className=\"w-full\" \n              disabled={!generatedPayload || downloadMutation.isPending}\n              onClick={handleDownload}\n              data-testid=\"button-download-payload\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              {downloadMutation.isPending ? \"Downloading...\" : \"Download Payload\"}\n            </Button>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm\">Security Notice</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-start gap-2\">\n                <Shield className=\"h-4 w-4 text-yellow-400 mt-0.5\" />\n                <p className=\"text-xs text-muted-foreground\">\n                  Generated payloads are for authorized testing only. \n                  Ensure you have proper authorization before deployment.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n      </div>\n    </>\n  );\n}","size_bytes":18087},"client/src/pages/payloads/WebPayloadsPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Search, Filter, Plus, Download, Globe, Code, FileText, Info, Cog } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\n\ninterface WebPayload {\n  id: string;\n  name: string;\n  type: string;\n  description?: string;\n  size?: number;\n  config: any;\n  isGenerated: boolean;\n  createdAt: string;\n}\n\nfunction PayloadCard({ payload }: { payload: WebPayload }) {\n  const [detailsOpen, setDetailsOpen] = useState(false);\n  const [configOpen, setConfigOpen] = useState(false);\n  const { toast } = useToast();\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"webshell\": return Globe;\n      case \"script\": return Code;\n      case \"inject\": return FileText;\n      default: return Globe;\n    }\n  };\n\n  const formatSize = (bytes?: number) => {\n    if (!bytes) return \"Unknown\";\n    if (bytes < 1024) return `${bytes} B`;\n    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;\n    return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;\n  };\n\n  const downloadMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/payloads/${payload.id}/download`, {\n        method: \"POST\"\n      });\n      if (!response.ok) throw new Error(\"Download failed\");\n      return response;\n    },\n    onSuccess: () => {\n      // Simulate file download\n      const link = document.createElement('a');\n      link.href = `/api/payloads/${payload.id}/download`;\n      link.download = `${payload.name}.${payload.type === 'webshell' ? 'php' : 'js'}`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      toast({\n        title: \"Download Started\",\n        description: `${payload.name} download initiated successfully.`\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Download Failed\",\n        description: \"Failed to download payload. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleDownload = () => {\n    downloadMutation.mutate();\n  };\n\n  const handleConfigure = () => {\n    setConfigOpen(true);\n  };\n\n  const handleDetails = () => {\n    setDetailsOpen(true);\n  };\n\n  const Icon = getTypeIcon(payload.type);\n\n  return (\n    <Card className=\"bg-card/50 border-border/50 hover:bg-card/80 transition-colors\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Icon className=\"h-4 w-4 text-purple-400\" />\n            <CardTitle className=\"text-sm\">{payload.name}</CardTitle>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge variant={payload.isGenerated ? \"default\" : \"secondary\"}>\n              {payload.type}\n            </Badge>\n          </div>\n        </div>\n        <CardDescription className=\"line-clamp-2\">\n          {payload.description || \"Web-based payload\"}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"pt-0\">\n        <div className=\"space-y-2 text-xs text-muted-foreground\">\n          <div>Size: {formatSize(payload.size)}</div>\n          <div>Language: {payload.config?.language || \"JavaScript\"}</div>\n          <div>Created: {new Date(payload.createdAt).toLocaleDateString()}</div>\n        </div>\n        <div className=\"flex gap-2 mt-4\">\n          <Button \n            size=\"sm\" \n            className=\"h-7 text-xs bg-purple-600 hover:bg-purple-700\"\n            onClick={handleDownload}\n            disabled={downloadMutation.isPending}\n            data-testid={`button-download-${payload.id}`}\n          >\n            <Download className=\"h-3 w-3 mr-1\" />\n            {downloadMutation.isPending ? 'Downloading...' : 'Download'}\n          </Button>\n          <Dialog open={configOpen} onOpenChange={setConfigOpen}>\n            <DialogTrigger asChild>\n              <Button size=\"sm\" variant=\"secondary\" className=\"h-7 text-xs\" data-testid={`button-configure-${payload.id}`}>\n                <Cog className=\"h-3 w-3 mr-1\" />\n                Configure\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[425px]\">\n              <DialogHeader>\n                <DialogTitle>Configure {payload.name}</DialogTitle>\n                <DialogDescription>\n                  Modify payload configuration and settings\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4 py-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"language\">Language</Label>\n                  <Select defaultValue={(payload.config?.language && payload.config.language.trim() !== '') ? payload.config.language : \"JavaScript\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select language\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"JavaScript\">JavaScript</SelectItem>\n                      <SelectItem value=\"PHP\">PHP</SelectItem>\n                      <SelectItem value=\"Python\">Python</SelectItem>\n                      <SelectItem value=\"ASP\">ASP.NET</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"host\">Callback Host</Label>\n                  <Input id=\"host\" defaultValue={payload.config?.host || \"127.0.0.1\"} placeholder=\"Callback host\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"port\">Callback Port</Label>\n                  <Input id=\"port\" type=\"number\" defaultValue={payload.config?.port || \"8080\"} placeholder=\"Callback port\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"method\">Injection Method</Label>\n                  <Select defaultValue={(payload.config?.method && payload.config.method.trim() !== '') ? payload.config.method : \"POST\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select method\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"GET\">GET</SelectItem>\n                      <SelectItem value=\"POST\">POST</SelectItem>\n                      <SelectItem value=\"Cookie\">Cookie</SelectItem>\n                      <SelectItem value=\"Header\">Header</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"obfuscation\">Obfuscation</Label>\n                  <Select defaultValue={(payload.config?.obfuscation && payload.config.obfuscation.trim() !== '') ? payload.config.obfuscation : \"none\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select obfuscation\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"none\">None</SelectItem>\n                      <SelectItem value=\"base64\">Base64</SelectItem>\n                      <SelectItem value=\"minify\">Minification</SelectItem>\n                      <SelectItem value=\"unicode\">Unicode Escape</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <div className=\"flex justify-end gap-2\">\n                <Button variant=\"outline\" onClick={() => setConfigOpen(false)}>Cancel</Button>\n                <Button className=\"bg-purple-600 hover:bg-purple-700\">Save Configuration</Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n          <Dialog open={detailsOpen} onOpenChange={setDetailsOpen}>\n            <DialogTrigger asChild>\n              <Button size=\"sm\" variant=\"outline\" className=\"h-7 text-xs\" data-testid={`button-details-${payload.id}`}>\n                <Info className=\"h-3 w-3 mr-1\" />\n                Details\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[600px]\">\n              <DialogHeader>\n                <DialogTitle className=\"flex items-center gap-2\">\n                  <Icon className=\"h-5 w-5 text-purple-400\" />\n                  {payload.name}\n                </DialogTitle>\n                <DialogDescription>\n                  Detailed information about this web payload\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4 py-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-sm font-semibold\">Type</Label>\n                    <p className=\"text-sm text-muted-foreground\">{payload.type}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-semibold\">Size</Label>\n                    <p className=\"text-sm text-muted-foreground\">{formatSize(payload.size)}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-semibold\">Language</Label>\n                    <p className=\"text-sm text-muted-foreground\">{payload.config?.language || \"JavaScript\"}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-semibold\">Status</Label>\n                    <Badge variant={payload.isGenerated ? \"default\" : \"secondary\"}>\n                      {payload.isGenerated ? \"Generated\" : \"Template\"}\n                    </Badge>\n                  </div>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-semibold\">Description</Label>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    {payload.description || \"Web-based payload for browser exploitation and client-side attacks.\"}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-semibold\">Configuration</Label>\n                  <div className=\"mt-2 p-3 bg-muted/50 rounded-lg\">\n                    <pre className=\"text-xs\">{JSON.stringify(payload.config, null, 2)}</pre>\n                  </div>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-semibold\">Created</Label>\n                  <p className=\"text-sm text-muted-foreground\">{new Date(payload.createdAt).toLocaleString()}</p>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function WebPayloadsPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\");\n  const [, navigate] = useLocation();\n\n  const { data: payloadsData, isLoading } = useQuery({\n    queryKey: [\"payloads\", \"web\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/payloads/platform/web\");\n      if (!response.ok) throw new Error(\"Failed to fetch web payloads\");\n      return response.json();\n    }\n  });\n\n  const payloads = payloadsData?.data || [];\n\n  const filteredPayloads = payloads.filter((payload: WebPayload) => {\n    const matchesSearch = payload.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         payload.description?.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesType = typeFilter === \"all\" || payload.type === typeFilter;\n    return matchesSearch && matchesType;\n  });\n\n  return (\n    <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-purple-400\">Web Payloads</h1>\n          <p className=\"text-muted-foreground\">Web-based exploits, scripts and malicious content</p>\n        </div>\n        <Button \n          className=\"bg-purple-600 hover:bg-purple-700\" \n          data-testid=\"button-generate-payload\"\n          onClick={() => navigate(\"/payloads/generator?platform=web\")}\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Generate Payload\n        </Button>\n      </div>\n\n      <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search web payloads...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-payloads\"\n          />\n        </div>\n        <div className=\"flex gap-2\">\n          <Select value={typeFilter} onValueChange={setTypeFilter}>\n            <SelectTrigger className=\"w-[130px]\">\n              <Filter className=\"h-4 w-4 mr-2\" />\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Types</SelectItem>\n              <SelectItem value=\"webshell\">Webshell</SelectItem>\n              <SelectItem value=\"script\">Script</SelectItem>\n              <SelectItem value=\"inject\">Injection</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {isLoading ? (\n          Array.from({ length: 6 }).map((_, i) => (\n            <Card key={i} className=\"bg-card/50 border-border/50 animate-pulse\">\n              <CardHeader>\n                <div className=\"h-4 bg-muted rounded w-32\"></div>\n                <div className=\"h-3 bg-muted rounded w-24\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"h-3 bg-muted rounded w-full\"></div>\n                  <div className=\"h-3 bg-muted rounded w-3/4\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : filteredPayloads.length > 0 ? (\n          filteredPayloads.map((payload: WebPayload) => (\n            <PayloadCard key={payload.id} payload={payload} />\n          ))\n        ) : (\n          <div className=\"col-span-full text-center py-12\">\n            <Globe className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No web payloads found</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              {searchQuery || typeFilter !== \"all\" \n                ? \"No payloads match your current filters.\" \n                : \"No web payloads are available.\"}\n            </p>\n            <Button variant=\"outline\" data-testid=\"button-generate-payload-empty\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Generate Payload\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {!isLoading && filteredPayloads.length > 0 && (\n        <div className=\"mt-6 text-center text-sm text-muted-foreground\">\n          Showing {filteredPayloads.length} web payloads\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":15756},"client/src/pages/payloads/WindowsPayloadsPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { SEO } from \"@/components/SEO\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Search, Filter, Plus, Download, Monitor, Settings, FileText, Info, Cog } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface WindowsPayload {\n  id: string;\n  name: string;\n  type: string;\n  description?: string;\n  size?: number;\n  config: any;\n  isGenerated: boolean;\n  createdAt: string;\n}\n\nfunction PayloadCard({ payload }: { payload: WindowsPayload }) {\n  const [detailsOpen, setDetailsOpen] = useState(false);\n  const [configOpen, setConfigOpen] = useState(false);\n  const { toast } = useToast();\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"executable\": return Monitor;\n      case \"dll\": return FileText;\n      case \"script\": return Settings;\n      default: return Monitor;\n    }\n  };\n\n  const formatSize = (bytes?: number) => {\n    if (!bytes) return \"Unknown\";\n    if (bytes < 1024) return `${bytes} B`;\n    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;\n    return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;\n  };\n\n  const downloadMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/payloads/${payload.id}/download`, {\n        method: \"POST\"\n      });\n      if (!response.ok) throw new Error(\"Download failed\");\n      return response;\n    },\n    onSuccess: () => {\n      // Simulate file download\n      const link = document.createElement('a');\n      link.href = `/api/payloads/${payload.id}/download`;\n      link.download = `${payload.name}.exe`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      toast({\n        title: \"Download Started\",\n        description: `${payload.name} download initiated successfully.`\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Download Failed\",\n        description: \"Failed to download payload. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleDownload = () => {\n    downloadMutation.mutate();\n  };\n\n  const handleConfigure = () => {\n    setConfigOpen(true);\n  };\n\n  const handleDetails = () => {\n    setDetailsOpen(true);\n  };\n\n  const Icon = getTypeIcon(payload.type);\n\n  return (\n    <Card className=\"bg-card/50 border-border/50 hover:bg-card/80 transition-colors\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Icon className=\"h-4 w-4 text-blue-400\" />\n            <CardTitle className=\"text-sm\">{payload.name}</CardTitle>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge variant={payload.isGenerated ? \"default\" : \"secondary\"}>\n              {payload.type}\n            </Badge>\n          </div>\n        </div>\n        <CardDescription className=\"line-clamp-2\">\n          {payload.description || \"Windows-specific payload\"}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"pt-0\">\n        <div className=\"space-y-2 text-xs text-muted-foreground\">\n          <div>Size: {formatSize(payload.size)}</div>\n          <div>Architecture: {payload.config?.architecture || \"x64\"}</div>\n          <div>Created: {new Date(payload.createdAt).toLocaleDateString()}</div>\n        </div>\n        <div className=\"flex gap-2 mt-4\">\n          <Button \n            size=\"sm\" \n            className=\"h-7 text-xs bg-blue-600 hover:bg-blue-700\"\n            onClick={handleDownload}\n            disabled={downloadMutation.isPending}\n            data-testid={`button-download-${payload.id}`}\n          >\n            <Download className=\"h-3 w-3 mr-1\" />\n            {downloadMutation.isPending ? 'Downloading...' : 'Download'}\n          </Button>\n          <Dialog open={configOpen} onOpenChange={setConfigOpen}>\n            <DialogTrigger asChild>\n              <Button size=\"sm\" variant=\"secondary\" className=\"h-7 text-xs\" data-testid={`button-configure-${payload.id}`}>\n                <Cog className=\"h-3 w-3 mr-1\" />\n                Configure\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[425px]\">\n              <DialogHeader>\n                <DialogTitle>Configure {payload.name}</DialogTitle>\n                <DialogDescription>\n                  Modify payload configuration and settings\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4 py-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"architecture\">Architecture</Label>\n                  <Select defaultValue={(payload.config?.architecture && payload.config.architecture.trim() !== '') ? payload.config.architecture : \"x64\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select architecture\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"x86\">x86 (32-bit)</SelectItem>\n                      <SelectItem value=\"x64\">x64 (64-bit)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"host\">LHOST</Label>\n                  <Input id=\"host\" defaultValue={payload.config?.host || \"127.0.0.1\"} placeholder=\"Listener host\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"port\">LPORT</Label>\n                  <Input id=\"port\" type=\"number\" defaultValue={payload.config?.port || \"4444\"} placeholder=\"Listener port\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"encoder\">Encoder</Label>\n                  <Select defaultValue={(payload.config?.encoder && payload.config.encoder.trim() !== '') ? payload.config.encoder : \"none\"}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select encoder\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"none\">None</SelectItem>\n                      <SelectItem value=\"base64\">Base64</SelectItem>\n                      <SelectItem value=\"xor\">XOR</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <div className=\"flex justify-end gap-2\">\n                <Button variant=\"outline\" onClick={() => setConfigOpen(false)}>Cancel</Button>\n                <Button className=\"bg-blue-600 hover:bg-blue-700\">Save Configuration</Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n          <Dialog open={detailsOpen} onOpenChange={setDetailsOpen}>\n            <DialogTrigger asChild>\n              <Button size=\"sm\" variant=\"outline\" className=\"h-7 text-xs\" data-testid={`button-details-${payload.id}`}>\n                <Info className=\"h-3 w-3 mr-1\" />\n                Details\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[600px]\">\n              <DialogHeader>\n                <DialogTitle className=\"flex items-center gap-2\">\n                  <Icon className=\"h-5 w-5 text-blue-400\" />\n                  {payload.name}\n                </DialogTitle>\n                <DialogDescription>\n                  Detailed information about this Windows payload\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4 py-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-sm font-semibold\">Type</Label>\n                    <p className=\"text-sm text-muted-foreground\">{payload.type}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-semibold\">Size</Label>\n                    <p className=\"text-sm text-muted-foreground\">{formatSize(payload.size)}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-semibold\">Architecture</Label>\n                    <p className=\"text-sm text-muted-foreground\">{payload.config?.architecture || \"x64\"}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-semibold\">Status</Label>\n                    <Badge variant={payload.isGenerated ? \"default\" : \"secondary\"}>\n                      {payload.isGenerated ? \"Generated\" : \"Template\"}\n                    </Badge>\n                  </div>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-semibold\">Description</Label>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    {payload.description || \"Windows-specific payload for penetration testing and red team operations.\"}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-semibold\">Configuration</Label>\n                  <div className=\"mt-2 p-3 bg-muted/50 rounded-lg\">\n                    <pre className=\"text-xs\">{JSON.stringify(payload.config, null, 2)}</pre>\n                  </div>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-semibold\">Created</Label>\n                  <p className=\"text-sm text-muted-foreground\">{new Date(payload.createdAt).toLocaleString()}</p>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function WindowsPayloadsPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\");\n  const [, navigate] = useLocation();\n\n  const { data: payloadsData, isLoading } = useQuery({\n    queryKey: [\"payloads\", \"windows\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/payloads/platform/windows\");\n      if (!response.ok) throw new Error(\"Failed to fetch Windows payloads\");\n      return response.json();\n    }\n  });\n\n  const payloads = payloadsData?.data || [];\n\n  const filteredPayloads = payloads.filter((payload: WindowsPayload) => {\n    const matchesSearch = payload.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         payload.description?.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesType = typeFilter === \"all\" || payload.type === typeFilter;\n    return matchesSearch && matchesType;\n  });\n\n  return (\n    <>\n      <SEO \n        title=\"Windows Payloads - C2 Command & Control\"\n        description=\"Browse and download Windows-specific executable payloads, DLLs, scripts and shellcode for penetration testing and red team operations\"\n        keywords=\"windows payloads, executable, dll, script, shellcode, pentesting, red team\"\n      />\n      <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-blue-400\">Windows Payloads</h1>\n          <p className=\"text-muted-foreground\">Windows-specific executable payloads and implants</p>\n        </div>\n        <Button \n          className=\"bg-blue-600 hover:bg-blue-700\"\n          onClick={() => navigate(\"/payloads/generator?platform=windows\")}\n          data-testid=\"button-generate-payload\"\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Generate Payload\n        </Button>\n      </div>\n\n      <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search Windows payloads...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n        <div className=\"flex gap-2\">\n          <Select value={typeFilter} onValueChange={setTypeFilter}>\n            <SelectTrigger className=\"w-[130px]\">\n              <Filter className=\"h-4 w-4 mr-2\" />\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Types</SelectItem>\n              <SelectItem value=\"executable\">Executable</SelectItem>\n              <SelectItem value=\"dll\">DLL</SelectItem>\n              <SelectItem value=\"script\">Script</SelectItem>\n              <SelectItem value=\"shellcode\">Shellcode</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {isLoading ? (\n          Array.from({ length: 6 }).map((_, i) => (\n            <Card key={i} className=\"bg-card/50 border-border/50 animate-pulse\">\n              <CardHeader>\n                <div className=\"h-4 bg-muted rounded w-32\"></div>\n                <div className=\"h-3 bg-muted rounded w-24\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"h-3 bg-muted rounded w-full\"></div>\n                  <div className=\"h-3 bg-muted rounded w-3/4\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : filteredPayloads.length > 0 ? (\n          filteredPayloads.map((payload: WindowsPayload) => (\n            <PayloadCard key={payload.id} payload={payload} />\n          ))\n        ) : (\n          <div className=\"col-span-full text-center py-12\">\n            <Monitor className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No Windows payloads found</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              {searchQuery || typeFilter !== \"all\" \n                ? \"No payloads match your current filters.\" \n                : \"No Windows payloads are available.\"}\n            </p>\n            <Button variant=\"outline\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Generate Payload\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {!isLoading && filteredPayloads.length > 0 && (\n        <div className=\"mt-6 text-center text-sm text-muted-foreground\">\n          Showing {filteredPayloads.length} Windows payloads\n        </div>\n      )}\n      </div>\n    </>\n  );\n}","size_bytes":15165},"client/src/pages/reports/AttackTimelinePage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { SEO } from \"@/components/SEO\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Filter, Plus, Clock, Activity } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function AttackTimelinePage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: reportsData, isLoading } = useQuery({\n    queryKey: [\"reports\", \"timeline\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/reports/kind/timeline\");\n      if (!response.ok) throw new Error(\"Failed to fetch timeline reports\");\n      return response.json();\n    }\n  });\n\n  const reports = reportsData?.data || [];\n\n  return (\n    <>\n      <SEO \n        title=\"Attack Timeline - C2 Command & Control\"\n        description=\"Generate and view chronological timelines of attack activities, events and operations for comprehensive red team reporting\"\n        keywords=\"attack timeline, red team reports, attack chronology, security assessment, penetration testing\"\n      />\n      <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-purple-400\">Attack Timeline</h1>\n          <p className=\"text-muted-foreground\">Chronological timeline of attack activities</p>\n        </div>\n        <Button className=\"bg-purple-600 hover:bg-purple-700\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Timeline\n        </Button>\n      </div>\n\n      <div className=\"text-center py-12\">\n        <Activity className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">Attack Timeline</h3>\n        <p className=\"text-muted-foreground mb-4\">Timeline generation coming soon</p>\n        <Button variant=\"outline\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Timeline\n        </Button>\n      </div>\n      </div>\n    </>\n  );\n}","size_bytes":2181},"client/src/pages/reports/EvidenceCollectionPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Filter, Plus, FolderOpen, Archive } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function EvidenceCollectionPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: evidenceData, isLoading } = useQuery({\n    queryKey: [\"evidence\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/evidence\");\n      if (!response.ok) throw new Error(\"Failed to fetch evidence\");\n      return response.json();\n    }\n  });\n\n  const evidence = evidenceData?.data || [];\n\n  return (\n    <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-cyan-400\">Evidence Collection</h1>\n          <p className=\"text-muted-foreground\">Digital evidence and artifact collection</p>\n        </div>\n        <Button className=\"bg-cyan-600 hover:bg-cyan-700\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Evidence\n        </Button>\n      </div>\n\n      <div className=\"text-center py-12\">\n        <Archive className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">Evidence Collection</h3>\n        <p className=\"text-muted-foreground mb-4\">Evidence management coming soon</p>\n        <Button variant=\"outline\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Evidence\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":1758},"client/src/pages/reports/ExecutiveSummaryPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Filter, Plus, FileText, BarChart3 } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function ExecutiveSummaryPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: reportsData, isLoading } = useQuery({\n    queryKey: [\"reports\", \"executive\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/reports/kind/executive\");\n      if (!response.ok) throw new Error(\"Failed to fetch executive reports\");\n      return response.json();\n    }\n  });\n\n  const reports = reportsData?.data || [];\n\n  return (\n    <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-blue-400\">Executive Summary</h1>\n          <p className=\"text-muted-foreground\">High-level executive reports and summaries</p>\n        </div>\n        <Button className=\"bg-blue-600 hover:bg-blue-700\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Report\n        </Button>\n      </div>\n\n      <div className=\"text-center py-12\">\n        <BarChart3 className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">Executive Summary Reports</h3>\n        <p className=\"text-muted-foreground mb-4\">Executive reporting coming soon</p>\n        <Button variant=\"outline\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Report\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":1798},"client/src/pages/reports/ExportDataPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Filter, Plus, Download, FileText } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function ExportDataPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: reportsData, isLoading } = useQuery({\n    queryKey: [\"reports\", \"export\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/reports/kind/export\");\n      if (!response.ok) throw new Error(\"Failed to fetch export data\");\n      return response.json();\n    }\n  });\n\n  const reports = reportsData?.data || [];\n\n  return (\n    <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-yellow-400\">Export Data</h1>\n          <p className=\"text-muted-foreground\">Data export and archival functionality</p>\n        </div>\n        <Button className=\"bg-yellow-600 hover:bg-yellow-700\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Export Data\n        </Button>\n      </div>\n\n      <div className=\"text-center py-12\">\n        <Download className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">Export Data</h3>\n        <p className=\"text-muted-foreground mb-4\">Data export functionality coming soon</p>\n        <Button variant=\"outline\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Export Data\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":1762},"client/src/pages/reports/ScreenshotsPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Filter, Plus, Camera, Image } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function ScreenshotsPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: evidenceData, isLoading } = useQuery({\n    queryKey: [\"evidence\", \"screenshots\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/evidence?type=screenshot\");\n      if (!response.ok) throw new Error(\"Failed to fetch screenshots\");\n      return response.json();\n    }\n  });\n\n  const screenshots = evidenceData?.data || [];\n\n  return (\n    <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-green-400\">Screenshots</h1>\n          <p className=\"text-muted-foreground\">Captured screenshots and visual evidence</p>\n        </div>\n        <Button className=\"bg-green-600 hover:bg-green-700\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Take Screenshot\n        </Button>\n      </div>\n\n      <div className=\"text-center py-12\">\n        <Camera className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">Screenshots</h3>\n        <p className=\"text-muted-foreground mb-4\">Screenshot management coming soon</p>\n        <Button variant=\"outline\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Take Screenshot\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":1776},"client/src/pages/reports/TechnicalReportPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Filter, Plus, FileCode, Settings } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function TechnicalReportPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: reportsData, isLoading } = useQuery({\n    queryKey: [\"reports\", \"technical\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/reports/kind/technical\");\n      if (!response.ok) throw new Error(\"Failed to fetch technical reports\");\n      return response.json();\n    }\n  });\n\n  const reports = reportsData?.data || [];\n\n  return (\n    <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-orange-400\">Technical Report</h1>\n          <p className=\"text-muted-foreground\">Detailed technical analysis and findings</p>\n        </div>\n        <Button className=\"bg-orange-600 hover:bg-orange-700\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Report\n        </Button>\n      </div>\n\n      <div className=\"text-center py-12\">\n        <FileCode className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">Technical Reports</h3>\n        <p className=\"text-muted-foreground mb-4\">Technical reporting coming soon</p>\n        <Button variant=\"outline\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Report\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":1790},"client/src/pages/sessions/ActiveSessionsPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { SEO } from \"@/components/SEO\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Search, Terminal, Monitor, Activity, Wifi, Clock, StopCircle } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Link, useLocation } from \"wouter\";\n\ninterface ActiveSession {\n  id: string;\n  clientId: string;\n  sessionType: string;\n  status: string;\n  startedAt: string;\n  lastActivity: string;\n  metadata?: any;\n}\n\nfunction ActiveSessionCard({ session }: { session: ActiveSession }) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n\n  const stopSessionMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"PUT\", `/api/sessions/${session.id}`, { \n        status: \"terminated\", \n        endedAt: new Date().toISOString() \n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Session Stopped\",\n        description: `Session ${session.id.slice(0, 8)} has been terminated`\n      });\n      queryClient.invalidateQueries({ queryKey: [\"sessions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"sessions\", \"active\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to stop session\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const connectToSession = async () => {\n    toast({\n      title: \"Connecting to Session\",\n      description: `Establishing connection to session ${session.id.slice(0, 8)}...`\n    });\n    // Navigate to terminal with session context\n    setTimeout(() => {\n      setLocation(`/remote-access?sessionId=${session.id}&sessionType=${session.sessionType}`);\n    }, 500);\n  };\n\n  const monitorSession = () => {\n    toast({\n      title: \"Opening Telemetry\",\n      description: `Loading monitoring interface for session ${session.id.slice(0, 8)}`\n    });\n    // Navigate to telemetry page with session context\n    setTimeout(() => {\n      setLocation(`/telemetry?sessionId=${session.id}&sessionType=${session.sessionType}`);\n    }, 500);\n  };\n\n  const handleStopSession = () => {\n    stopSessionMutation.mutate();\n  };\n  const getSessionIcon = (type: string) => {\n    switch (type) {\n      case \"shell\": return Terminal;\n      case \"file_manager\": return Monitor;\n      default: return Activity;\n    }\n  };\n\n  const Icon = getSessionIcon(session.sessionType);\n\n  const getActivityStatus = (lastActivity: string) => {\n    const now = new Date().getTime();\n    const lastSeen = new Date(lastActivity).getTime();\n    const diffMinutes = Math.floor((now - lastSeen) / (1000 * 60));\n    \n    if (diffMinutes < 5) return { text: \"Active now\", color: \"text-green-400\" };\n    if (diffMinutes < 30) return { text: `${diffMinutes}m ago`, color: \"text-yellow-400\" };\n    return { text: `${diffMinutes}m ago`, color: \"text-orange-400\" };\n  };\n\n  const activityStatus = getActivityStatus(session.lastActivity);\n\n  return (\n    <Card className=\"bg-card/50 border-border/50 hover:bg-card/80 transition-colors\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Icon className=\"h-4 w-4 text-green-400\" />\n            <CardTitle className=\"text-sm font-mono\">{session.id.slice(0, 8)}</CardTitle>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"flex items-center gap-1\">\n              <Wifi className={`h-3 w-3 ${activityStatus.color}`} />\n              <span className={`text-xs ${activityStatus.color}`}>\n                {activityStatus.text}\n              </span>\n            </div>\n          </div>\n        </div>\n        <CardDescription>\n          Client: {session.clientId} • Type: {session.sessionType}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"pt-0\">\n        <div className=\"space-y-2 text-xs text-muted-foreground\">\n          <div className=\"flex items-center gap-1\">\n            <Clock className=\"h-3 w-3\" />\n            Started: {new Date(session.startedAt).toLocaleString()}\n          </div>\n        </div>\n        <div className=\"flex gap-2 mt-4\">\n          <Button \n            size=\"sm\" \n            className=\"h-7 text-xs bg-green-600 hover:bg-green-700\"\n            onClick={connectToSession}\n            data-testid=\"button-connect\"\n          >\n            <Terminal className=\"h-3 w-3 mr-1\" />\n            Connect\n          </Button>\n          <Button \n            size=\"sm\" \n            variant=\"secondary\" \n            className=\"h-7 text-xs\"\n            onClick={monitorSession}\n            data-testid=\"button-monitor\"\n          >\n            <Monitor className=\"h-3 w-3 mr-1\" />\n            Monitor\n          </Button>\n          <AlertDialog>\n            <AlertDialogTrigger asChild>\n              <Button \n                size=\"sm\" \n                variant=\"outline\" \n                className=\"h-7 text-xs\"\n                data-testid=\"button-stop\"\n              >\n                <StopCircle className=\"h-3 w-3 mr-1\" />\n                Stop\n              </Button>\n            </AlertDialogTrigger>\n            <AlertDialogContent>\n              <AlertDialogHeader>\n                <AlertDialogTitle>Stop Session</AlertDialogTitle>\n                <AlertDialogDescription>\n                  Are you sure you want to terminate session {session.id.slice(0, 8)}? This action cannot be undone.\n                </AlertDialogDescription>\n              </AlertDialogHeader>\n              <AlertDialogFooter>\n                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                <AlertDialogAction \n                  onClick={handleStopSession}\n                  disabled={stopSessionMutation.isPending}\n                  className=\"bg-red-600 hover:bg-red-700\"\n                >\n                  {stopSessionMutation.isPending ? \"Stopping...\" : \"Stop Session\"}\n                </AlertDialogAction>\n              </AlertDialogFooter>\n            </AlertDialogContent>\n          </AlertDialog>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function ActiveSessionsPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: sessionsData, isLoading } = useQuery({\n    queryKey: [\"sessions\", \"active\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/sessions/status/active\");\n      if (!response.ok) throw new Error(\"Failed to fetch active sessions\");\n      return response.json();\n    },\n    refetchInterval: 5000 // Auto-refresh every 5 seconds\n  });\n\n  const sessions = sessionsData?.data || [];\n\n  const filteredSessions = sessions.filter((session: ActiveSession) => {\n    return session.id.toLowerCase().includes(searchQuery.toLowerCase()) ||\n           session.clientId.toLowerCase().includes(searchQuery.toLowerCase()) ||\n           session.sessionType.toLowerCase().includes(searchQuery.toLowerCase());\n  });\n\n  return (\n    <>\n      <SEO \n        title=\"Active Sessions - C2 Command & Control\"\n        description=\"Monitor and manage currently active C2 sessions in real-time with session status, client information, and connection details\"\n        keywords=\"active sessions, c2 monitoring, remote sessions, session status, real time\"\n      />\n      <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-green-400\">Active Sessions</h1>\n          <p className=\"text-muted-foreground\">Monitor and manage currently active sessions</p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Badge variant=\"secondary\" className=\"bg-green-500/20 text-green-400 border-green-500/30\">\n            {sessions.length} Active\n          </Badge>\n        </div>\n      </div>\n\n      <div className=\"mb-6\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search active sessions...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {isLoading ? (\n          Array.from({ length: 6 }).map((_, i) => (\n            <Card key={i} className=\"bg-card/50 border-border/50 animate-pulse\">\n              <CardHeader>\n                <div className=\"h-4 bg-muted rounded w-24\"></div>\n                <div className=\"h-3 bg-muted rounded w-32\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"h-3 bg-muted rounded w-full\"></div>\n                  <div className=\"h-3 bg-muted rounded w-3/4\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : filteredSessions.length > 0 ? (\n          filteredSessions.map((session: ActiveSession) => (\n            <ActiveSessionCard key={session.id} session={session} />\n          ))\n        ) : (\n          <div className=\"col-span-full text-center py-12\">\n            <Activity className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No active sessions</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              {searchQuery \n                ? \"No active sessions match your search.\" \n                : \"No sessions are currently active.\"}\n            </p>\n            <Link href=\"/sessions/all\">\n              <Button variant=\"outline\" data-testid=\"button-view-all\">\n                View All Sessions\n              </Button>\n            </Link>\n          </div>\n        )}\n      </div>\n\n      {!isLoading && filteredSessions.length > 0 && (\n        <div className=\"mt-6 text-center text-sm text-muted-foreground\">\n          Showing {filteredSessions.length} active sessions • Auto-refreshing every 5s\n        </div>\n      )}\n      </div>\n    </>\n  );\n}","size_bytes":10629},"client/src/pages/sessions/AllSessionsPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Search, Filter, Plus, Terminal, Monitor, Activity, Info } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link, useLocation } from \"wouter\";\n\ninterface Session {\n  id: string;\n  clientId: string;\n  sessionType: string;\n  status: string;\n  startedAt: string;\n  lastActivity: string;\n  metadata?: any;\n}\n\nfunction SessionCard({ session }: { session: Session }) {\n  const [showDetails, setShowDetails] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n\n  const connectToSession = async () => {\n    toast({\n      title: \"Connecting to Session\",\n      description: `Establishing connection to session ${session.id.slice(0, 8)}...`\n    });\n    // Navigate to terminal with session context\n    setTimeout(() => {\n      setLocation(`/remote-access?sessionId=${session.id}&sessionType=${session.sessionType}`);\n    }, 500);\n  };\n\n  const showSessionDetails = () => {\n    setShowDetails(true);\n  };\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      active: \"bg-green-500/20 text-green-400 border-green-500/30\",\n      inactive: \"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\", \n      terminated: \"bg-red-500/20 text-red-400 border-red-500/30\"\n    };\n    return variants[status as keyof typeof variants] || variants.inactive;\n  };\n\n  const getSessionIcon = (type: string) => {\n    switch (type) {\n      case \"shell\": return Terminal;\n      case \"file_manager\": return Monitor;\n      default: return Activity;\n    }\n  };\n\n  const Icon = getSessionIcon(session.sessionType);\n\n  return (\n    <Card className=\"bg-card/50 border-border/50 hover:bg-card/80 transition-colors\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Icon className=\"h-4 w-4 text-green-400\" />\n            <CardTitle className=\"text-sm font-mono\">{session.id.slice(0, 8)}</CardTitle>\n          </div>\n          <Badge className={getStatusBadge(session.status)}>\n            {session.status}\n          </Badge>\n        </div>\n        <CardDescription>\n          Client: {session.clientId} • Type: {session.sessionType}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"pt-0\">\n        <div className=\"space-y-2 text-xs text-muted-foreground\">\n          <div>Started: {new Date(session.startedAt).toLocaleString()}</div>\n          <div>Last Activity: {new Date(session.lastActivity).toLocaleString()}</div>\n        </div>\n        <div className=\"flex gap-2 mt-4\">\n          <Button \n            size=\"sm\" \n            variant=\"secondary\" \n            className=\"h-7 text-xs\"\n            onClick={connectToSession}\n            data-testid=\"button-connect\"\n          >\n            <Terminal className=\"h-3 w-3 mr-1\" />\n            Connect\n          </Button>\n          <Button \n            size=\"sm\" \n            variant=\"outline\" \n            className=\"h-7 text-xs\"\n            onClick={showSessionDetails}\n            data-testid=\"button-details\"\n          >\n            <Info className=\"h-3 w-3 mr-1\" />\n            Details\n          </Button>\n        </div>\n\n        <Dialog open={showDetails} onOpenChange={setShowDetails}>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Session Details</DialogTitle>\n              <DialogDescription>\n                Detailed information for session {session.id.slice(0, 8)}\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <span className=\"font-medium text-muted-foreground\">Session ID:</span>\n                  <div className=\"font-mono\">{session.id}</div>\n                </div>\n                <div>\n                  <span className=\"font-medium text-muted-foreground\">Client ID:</span>\n                  <div className=\"font-mono\">{session.clientId}</div>\n                </div>\n                <div>\n                  <span className=\"font-medium text-muted-foreground\">Type:</span>\n                  <div className=\"capitalize\">{session.sessionType}</div>\n                </div>\n                <div>\n                  <span className=\"font-medium text-muted-foreground\">Status:</span>\n                  <Badge className={getStatusBadge(session.status)}>\n                    {session.status}\n                  </Badge>\n                </div>\n                <div>\n                  <span className=\"font-medium text-muted-foreground\">Started:</span>\n                  <div>{new Date(session.startedAt).toLocaleString()}</div>\n                </div>\n                <div>\n                  <span className=\"font-medium text-muted-foreground\">Last Activity:</span>\n                  <div>{new Date(session.lastActivity).toLocaleString()}</div>\n                </div>\n              </div>\n              {session.metadata && (\n                <div>\n                  <span className=\"font-medium text-muted-foreground\">Metadata:</span>\n                  <pre className=\"mt-2 p-3 bg-muted rounded-md text-xs overflow-auto\">\n                    {JSON.stringify(session.metadata, null, 2)}\n                  </pre>\n                </div>\n              )}\n            </div>\n          </DialogContent>\n        </Dialog>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function AllSessionsPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n\n  const { data: sessionsData, isLoading } = useQuery({\n    queryKey: [\"sessions\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/sessions\");\n      if (!response.ok) throw new Error(\"Failed to fetch sessions\");\n      return response.json();\n    }\n  });\n\n  const sessions = sessionsData?.data || [];\n\n  const filteredSessions = sessions.filter((session: Session) => {\n    const matchesSearch = session.id.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         session.clientId.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         session.sessionType.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || session.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  return (\n    <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-green-400\">All Sessions</h1>\n          <p className=\"text-muted-foreground\">Manage and monitor all active and historical sessions</p>\n        </div>\n        <Link href=\"/sessions/new\">\n          <Button className=\"bg-green-600 hover:bg-green-700\" data-testid=\"button-new-session\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            New Session\n          </Button>\n        </Link>\n      </div>\n\n      <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search sessions...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n        <div className=\"flex gap-2\">\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"w-[130px]\">\n              <Filter className=\"h-4 w-4 mr-2\" />\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Status</SelectItem>\n              <SelectItem value=\"active\">Active</SelectItem>\n              <SelectItem value=\"inactive\">Inactive</SelectItem>\n              <SelectItem value=\"terminated\">Terminated</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {isLoading ? (\n          Array.from({ length: 6 }).map((_, i) => (\n            <Card key={i} className=\"bg-card/50 border-border/50 animate-pulse\">\n              <CardHeader>\n                <div className=\"h-4 bg-muted rounded w-24\"></div>\n                <div className=\"h-3 bg-muted rounded w-32\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"h-3 bg-muted rounded w-full\"></div>\n                  <div className=\"h-3 bg-muted rounded w-3/4\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : filteredSessions.length > 0 ? (\n          filteredSessions.map((session: Session) => (\n            <SessionCard key={session.id} session={session} />\n          ))\n        ) : (\n          <div className=\"col-span-full text-center py-12\">\n            <Activity className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No sessions found</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              {searchQuery || statusFilter !== \"all\" \n                ? \"No sessions match your current filters.\" \n                : \"No sessions are currently available.\"}\n            </p>\n            <Link href=\"/sessions/new\">\n              <Button variant=\"outline\" data-testid=\"button-create-session\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create Session\n              </Button>\n            </Link>\n          </div>\n        )}\n      </div>\n\n      {!isLoading && filteredSessions.length > 0 && (\n        <div className=\"mt-6 text-center text-sm text-muted-foreground\">\n          Showing {filteredSessions.length} of {sessions.length} sessions\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":10542},"client/src/pages/sessions/NewSessionPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { SEO } from \"@/components/SEO\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Terminal, Monitor, FolderOpen, Camera, Plus, Settings, Play } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\n\nconst sessionTypes = [\n  {\n    id: \"shell\",\n    name: \"Shell Session\",\n    description: \"Interactive command line access\",\n    icon: Terminal,\n    features: [\"Command execution\", \"File operations\", \"System monitoring\"]\n  },\n  {\n    id: \"file_manager\", \n    name: \"File Manager\",\n    description: \"Browse and manage remote files\",\n    icon: FolderOpen,\n    features: [\"File upload/download\", \"Directory browsing\", \"Permission management\"]\n  },\n  {\n    id: \"remote_desktop\",\n    name: \"Remote Desktop\",\n    description: \"Visual desktop control\",\n    icon: Monitor,\n    features: [\"Screen sharing\", \"Mouse/keyboard control\", \"Multi-monitor support\"]\n  },\n  {\n    id: \"surveillance\",\n    name: \"Surveillance\",\n    description: \"Monitoring and data collection\",\n    icon: Camera,\n    features: [\"Screenshot capture\", \"Audio recording\", \"Activity logging\"]\n  }\n];\n\nexport default function NewSessionPage() {\n  const [selectedType, setSelectedType] = useState(\"\");\n  const [clientId, setClientId] = useState(\"\");\n  const [customOptions, setCustomOptions] = useState(\"{}\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n\n  const { data: clientsData } = useQuery({\n    queryKey: [\"clients\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/clients\");\n      if (!response.ok) throw new Error(\"Failed to fetch clients\");\n      return response.json();\n    }\n  });\n\n  const createSessionMutation = useMutation({\n    mutationFn: async (sessionData: any) => {\n      const response = await fetch(\"/api/sessions\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(sessionData)\n      });\n      if (!response.ok) throw new Error(\"Failed to create session\");\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Session Created\",\n        description: \"New session has been successfully established\"\n      });\n      queryClient.invalidateQueries({ queryKey: [\"sessions\"] });\n      // Reset form\n      setSelectedType(\"\");\n      setClientId(\"\");\n      setCustomOptions(\"{}\");\n      // Navigate to active sessions to see the new session\n      setTimeout(() => {\n        setLocation(\"/sessions/active\");\n      }, 1000);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create session\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleCreateSession = () => {\n    if (!selectedType || !clientId) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please select a session type and client\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    let metadata;\n    try {\n      metadata = JSON.parse(customOptions);\n    } catch {\n      toast({\n        title: \"Invalid JSON\",\n        description: \"Custom options must be valid JSON\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    createSessionMutation.mutate({\n      clientId,\n      sessionType: selectedType,\n      status: \"active\",\n      metadata\n    });\n  };\n\n  const clients = clientsData?.data || [];\n  const selectedTypeData = sessionTypes.find(t => t.id === selectedType);\n\n  return (\n    <>\n      <SEO \n        title=\"Create New Session - C2 Command & Control\"\n        description=\"Establish new remote sessions including shell access, file management, remote desktop, and surveillance capabilities with connected clients\"\n        keywords=\"remote session, shell access, file manager, remote desktop, surveillance, c2\"\n      />\n      <div className=\"container-responsive py-6 max-w-4xl\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold tracking-tight text-green-400\">Create New Session</h1>\n        <p className=\"text-muted-foreground\">Establish a new connection with a remote client</p>\n      </div>\n\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Session Type</CardTitle>\n              <CardDescription>Choose the type of session to establish</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {sessionTypes.map((type) => {\n                const Icon = type.icon;\n                return (\n                  <div\n                    key={type.id}\n                    className={`p-4 border rounded-lg cursor-pointer transition-colors ${\n                      selectedType === type.id\n                        ? \"border-green-500 bg-green-500/10\"\n                        : \"border-border hover:border-green-500/50\"\n                    }`}\n                    onClick={() => setSelectedType(type.id)}\n                  >\n                    <div className=\"flex items-start gap-3\">\n                      <Icon className={`h-5 w-5 mt-0.5 ${\n                        selectedType === type.id ? \"text-green-400\" : \"text-muted-foreground\"\n                      }`} />\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-medium\">{type.name}</h3>\n                        <p className=\"text-sm text-muted-foreground\">{type.description}</p>\n                        <div className=\"flex flex-wrap gap-1 mt-2\">\n                          {type.features.map((feature) => (\n                            <Badge key={feature} variant=\"secondary\" className=\"text-xs\">\n                              {feature}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Client Selection</CardTitle>\n              <CardDescription>Select the target client for this session</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"client\">Target Client</Label>\n                  <Select value={clientId} onValueChange={setClientId}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select a client...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {clients.map((client: any) => (\n                        <SelectItem key={client.id} value={client.id}>\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"font-mono text-xs\">{client.id.slice(0, 8)}</span>\n                            <span>•</span>\n                            <span>{client.hostname}</span>\n                            <span className=\"text-muted-foreground\">({client.ipAddress})</span>\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Advanced Options</CardTitle>\n              <CardDescription>Customize session parameters (JSON format)</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"options\">Custom Metadata</Label>\n                  <Textarea\n                    id=\"options\"\n                    value={customOptions}\n                    onChange={(e) => setCustomOptions(e.target.value)}\n                    placeholder='{\"timeout\": 300, \"encoding\": \"utf-8\"}'\n                    className=\"font-mono text-sm\"\n                    rows={4}\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Session Preview</CardTitle>\n              <CardDescription>Review your session configuration</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {selectedTypeData ? (\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center gap-3 p-4 bg-muted/50 rounded-lg\">\n                    <selectedTypeData.icon className=\"h-8 w-8 text-green-400\" />\n                    <div>\n                      <h3 className=\"font-medium\">{selectedTypeData.name}</h3>\n                      <p className=\"text-sm text-muted-foreground\">{selectedTypeData.description}</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Session Type:</span>\n                      <span className=\"font-mono\">{selectedType}</span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Target Client:</span>\n                      <span className=\"font-mono\">{clientId || \"Not selected\"}</span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Status:</span>\n                      <Badge className=\"bg-green-500/20 text-green-400 border-green-500/30\">\n                        Active\n                      </Badge>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <h4 className=\"font-medium text-sm\">Features:</h4>\n                    <ul className=\"space-y-1\">\n                      {selectedTypeData.features.map((feature) => (\n                        <li key={feature} className=\"text-sm text-muted-foreground flex items-center gap-2\">\n                          <div className=\"h-1.5 w-1.5 bg-green-400 rounded-full\" />\n                          {feature}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Settings className=\"h-8 w-8 mx-auto mb-2\" />\n                  <p>Select a session type to see preview</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <div className=\"flex gap-3\">\n            <Button \n              className=\"flex-1 bg-green-600 hover:bg-green-700\" \n              onClick={handleCreateSession}\n              disabled={!selectedType || !clientId || createSessionMutation.isPending}\n            >\n              <Play className=\"h-4 w-4 mr-2\" />\n              {createSessionMutation.isPending ? \"Creating...\" : \"Create Session\"}\n            </Button>\n            <Button variant=\"outline\" onClick={() => {\n              setSelectedType(\"\");\n              setClientId(\"\");\n              setCustomOptions(\"{}\");\n            }}>\n              Reset\n            </Button>\n          </div>\n        </div>\n      </div>\n      </div>\n    </>\n  );\n}","size_bytes":12007},"client/src/pages/sessions/SessionHistoryPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Search, Filter, History, Terminal, Monitor, Activity, Clock, CalendarDays } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface HistoricalSession {\n  id: string;\n  clientId: string;\n  sessionType: string;\n  status: string;\n  startedAt: string;\n  lastActivity: string;\n  endedAt?: string;\n  metadata?: any;\n}\n\nfunction HistorySessionCard({ session }: { session: HistoricalSession }) {\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      active: \"bg-green-500/20 text-green-400 border-green-500/30\",\n      inactive: \"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\", \n      terminated: \"bg-red-500/20 text-red-400 border-red-500/30\"\n    };\n    return variants[status as keyof typeof variants] || variants.inactive;\n  };\n\n  const getSessionIcon = (type: string) => {\n    switch (type) {\n      case \"shell\": return Terminal;\n      case \"file_manager\": return Monitor;\n      default: return Activity;\n    }\n  };\n\n  const getDuration = () => {\n    const start = new Date(session.startedAt).getTime();\n    const end = session.endedAt ? new Date(session.endedAt).getTime() : new Date(session.lastActivity).getTime();\n    const duration = Math.floor((end - start) / (1000 * 60)); // minutes\n    \n    if (duration < 60) return `${duration}m`;\n    const hours = Math.floor(duration / 60);\n    const minutes = duration % 60;\n    return `${hours}h ${minutes}m`;\n  };\n\n  const Icon = getSessionIcon(session.sessionType);\n\n  return (\n    <Card className=\"bg-card/50 border-border/50 hover:bg-card/80 transition-colors\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Icon className=\"h-4 w-4 text-green-400\" />\n            <CardTitle className=\"text-sm font-mono\">{session.id.slice(0, 8)}</CardTitle>\n          </div>\n          <Badge className={getStatusBadge(session.status)}>\n            {session.status}\n          </Badge>\n        </div>\n        <CardDescription>\n          Client: {session.clientId} • Type: {session.sessionType}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"pt-0\">\n        <div className=\"space-y-2 text-xs text-muted-foreground\">\n          <div className=\"flex items-center gap-1\">\n            <CalendarDays className=\"h-3 w-3\" />\n            Started: {new Date(session.startedAt).toLocaleString()}\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Clock className=\"h-3 w-3\" />\n            Duration: {getDuration()}\n          </div>\n          {session.endedAt && (\n            <div className=\"text-red-400\">\n              Ended: {new Date(session.endedAt).toLocaleString()}\n            </div>\n          )}\n        </div>\n        <div className=\"flex gap-2 mt-4\">\n          <Button size=\"sm\" variant=\"secondary\" className=\"h-7 text-xs\">\n            <History className=\"h-3 w-3 mr-1\" />\n            View Logs\n          </Button>\n          <Button size=\"sm\" variant=\"outline\" className=\"h-7 text-xs\">\n            Details\n          </Button>\n          {session.status === \"terminated\" && (\n            <Button size=\"sm\" variant=\"outline\" className=\"h-7 text-xs text-red-400 border-red-500/30\">\n              Archive\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function SessionHistoryPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\");\n\n  const { data: sessionsData, isLoading } = useQuery({\n    queryKey: [\"sessions\", \"history\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/sessions\");\n      if (!response.ok) throw new Error(\"Failed to fetch session history\");\n      return response.json();\n    }\n  });\n\n  const sessions = sessionsData?.data || [];\n\n  const filteredSessions = sessions.filter((session: HistoricalSession) => {\n    const matchesSearch = session.id.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         session.clientId.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || session.status === statusFilter;\n    const matchesType = typeFilter === \"all\" || session.sessionType === typeFilter;\n    return matchesSearch && matchesStatus && matchesType;\n  });\n\n  // Sort by start time (most recent first)\n  const sortedSessions = filteredSessions.sort((a: HistoricalSession, b: HistoricalSession) => \n    new Date(b.startedAt).getTime() - new Date(a.startedAt).getTime()\n  );\n\n  return (\n    <div className=\"container-responsive py-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-green-400\">Session History</h1>\n          <p className=\"text-muted-foreground\">Browse and analyze historical session data</p>\n        </div>\n        <Button variant=\"outline\">\n          <History className=\"h-4 w-4 mr-2\" />\n          Export History\n        </Button>\n      </div>\n\n      <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search session history...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n        <div className=\"flex gap-2\">\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"w-[130px]\">\n              <Filter className=\"h-4 w-4 mr-2\" />\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Status</SelectItem>\n              <SelectItem value=\"active\">Active</SelectItem>\n              <SelectItem value=\"inactive\">Inactive</SelectItem>\n              <SelectItem value=\"terminated\">Terminated</SelectItem>\n            </SelectContent>\n          </Select>\n          <Select value={typeFilter} onValueChange={setTypeFilter}>\n            <SelectTrigger className=\"w-[130px]\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Types</SelectItem>\n              <SelectItem value=\"shell\">Shell</SelectItem>\n              <SelectItem value=\"file_manager\">File Manager</SelectItem>\n              <SelectItem value=\"remote_desktop\">Remote Desktop</SelectItem>\n              <SelectItem value=\"surveillance\">Surveillance</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {isLoading ? (\n          Array.from({ length: 6 }).map((_, i) => (\n            <Card key={i} className=\"bg-card/50 border-border/50 animate-pulse\">\n              <CardHeader>\n                <div className=\"h-4 bg-muted rounded w-24\"></div>\n                <div className=\"h-3 bg-muted rounded w-32\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"h-3 bg-muted rounded w-full\"></div>\n                  <div className=\"h-3 bg-muted rounded w-3/4\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : sortedSessions.length > 0 ? (\n          sortedSessions.map((session: HistoricalSession) => (\n            <HistorySessionCard key={session.id} session={session} />\n          ))\n        ) : (\n          <div className=\"col-span-full text-center py-12\">\n            <History className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No session history</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              {searchQuery || statusFilter !== \"all\" || typeFilter !== \"all\"\n                ? \"No sessions match your current filters.\" \n                : \"No session history is available.\"}\n            </p>\n            <Button variant=\"outline\">\n              View Active Sessions\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {!isLoading && sortedSessions.length > 0 && (\n        <div className=\"mt-6 text-center text-sm text-muted-foreground\">\n          Showing {sortedSessions.length} of {sessions.length} sessions\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":8929},"client/src/pages/sessions/SessionSettingsPage.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Settings, Save, RotateCcw, AlertTriangle, Shield, Clock, Network } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface SessionSettings {\n  autoReconnect: boolean;\n  timeout: number;\n  maxRetries: number;\n  logLevel: string;\n  encryptionEnabled: boolean;\n  compression: boolean;\n  bufferSize: number;\n  heartbeatInterval: number;\n  sessionPersistence: boolean;\n  cleanupOnDisconnect: boolean;\n}\n\nexport default function SessionSettingsPage() {\n  const [settings, setSettings] = useState<SessionSettings>({\n    autoReconnect: true,\n    timeout: 300,\n    maxRetries: 3,\n    logLevel: \"info\",\n    encryptionEnabled: true,\n    compression: true,\n    bufferSize: 8192,\n    heartbeatInterval: 30,\n    sessionPersistence: true,\n    cleanupOnDisconnect: false\n  });\n\n  const [hasChanges, setHasChanges] = useState(false);\n  const { toast } = useToast();\n\n  const updateSetting = (key: keyof SessionSettings, value: any) => {\n    setSettings(prev => ({ ...prev, [key]: value }));\n    setHasChanges(true);\n  };\n\n  const handleSave = () => {\n    // Simulate API call\n    setTimeout(() => {\n      toast({\n        title: \"Settings Saved\",\n        description: \"Session settings have been updated successfully\"\n      });\n      setHasChanges(false);\n    }, 1000);\n  };\n\n  const handleReset = () => {\n    setSettings({\n      autoReconnect: true,\n      timeout: 300,\n      maxRetries: 3,\n      logLevel: \"info\",\n      encryptionEnabled: true,\n      compression: true,\n      bufferSize: 8192,\n      heartbeatInterval: 30,\n      sessionPersistence: true,\n      cleanupOnDisconnect: false\n    });\n    setHasChanges(false);\n    toast({\n      title: \"Settings Reset\",\n      description: \"All settings have been reset to default values\"\n    });\n  };\n\n  return (\n    <div className=\"container-responsive py-6 max-w-4xl\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold tracking-tight text-green-400\">Session Settings</h1>\n          <p className=\"text-muted-foreground\">Configure global session behavior and preferences</p>\n        </div>\n        {hasChanges && (\n          <Badge variant=\"secondary\" className=\"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\">\n            Unsaved Changes\n          </Badge>\n        )}\n      </div>\n\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Network className=\"h-5 w-5 text-green-400\" />\n                Connection Settings\n              </CardTitle>\n              <CardDescription>Configure how sessions connect and reconnect</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Auto Reconnect</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Automatically attempt to reconnect lost sessions\n                  </p>\n                </div>\n                <Switch\n                  checked={settings.autoReconnect}\n                  onCheckedChange={(checked) => updateSetting(\"autoReconnect\", checked)}\n                />\n              </div>\n\n              <Separator />\n\n              <div className=\"grid gap-4\">\n                <div>\n                  <Label htmlFor=\"timeout\">Connection Timeout (seconds)</Label>\n                  <Input\n                    id=\"timeout\"\n                    type=\"number\"\n                    value={settings.timeout}\n                    onChange={(e) => updateSetting(\"timeout\", parseInt(e.target.value))}\n                    min=\"30\"\n                    max=\"3600\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"maxRetries\">Max Retry Attempts</Label>\n                  <Input\n                    id=\"maxRetries\"\n                    type=\"number\"\n                    value={settings.maxRetries}\n                    onChange={(e) => updateSetting(\"maxRetries\", parseInt(e.target.value))}\n                    min=\"0\"\n                    max=\"10\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"heartbeat\">Heartbeat Interval (seconds)</Label>\n                  <Input\n                    id=\"heartbeat\"\n                    type=\"number\"\n                    value={settings.heartbeatInterval}\n                    onChange={(e) => updateSetting(\"heartbeatInterval\", parseInt(e.target.value))}\n                    min=\"10\"\n                    max=\"300\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Shield className=\"h-5 w-5 text-green-400\" />\n                Security Settings\n              </CardTitle>\n              <CardDescription>Configure security and encryption options</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Encryption Enabled</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Enable end-to-end encryption for all sessions\n                  </p>\n                </div>\n                <Switch\n                  checked={settings.encryptionEnabled}\n                  onCheckedChange={(checked) => updateSetting(\"encryptionEnabled\", checked)}\n                />\n              </div>\n\n              <Separator />\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Data Compression</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Compress session data to reduce bandwidth\n                  </p>\n                </div>\n                <Switch\n                  checked={settings.compression}\n                  onCheckedChange={(checked) => updateSetting(\"compression\", checked)}\n                />\n              </div>\n\n              <Separator />\n\n              <div>\n                <Label htmlFor=\"bufferSize\">Buffer Size (bytes)</Label>\n                <Select value={settings.bufferSize.toString()} onValueChange={(value) => updateSetting(\"bufferSize\", parseInt(value))}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"1024\">1 KB</SelectItem>\n                    <SelectItem value=\"4096\">4 KB</SelectItem>\n                    <SelectItem value=\"8192\">8 KB</SelectItem>\n                    <SelectItem value=\"16384\">16 KB</SelectItem>\n                    <SelectItem value=\"32768\">32 KB</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Clock className=\"h-5 w-5 text-green-400\" />\n                Session Management\n              </CardTitle>\n              <CardDescription>Configure session lifecycle and persistence</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Session Persistence</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Maintain session state across reconnections\n                  </p>\n                </div>\n                <Switch\n                  checked={settings.sessionPersistence}\n                  onCheckedChange={(checked) => updateSetting(\"sessionPersistence\", checked)}\n                />\n              </div>\n\n              <Separator />\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Cleanup on Disconnect</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Remove session data when connection is lost\n                  </p>\n                </div>\n                <Switch\n                  checked={settings.cleanupOnDisconnect}\n                  onCheckedChange={(checked) => updateSetting(\"cleanupOnDisconnect\", checked)}\n                />\n              </div>\n\n              <Separator />\n\n              <div>\n                <Label htmlFor=\"logLevel\">Log Level</Label>\n                <Select value={settings.logLevel} onValueChange={(value) => updateSetting(\"logLevel\", value)}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"debug\">Debug</SelectItem>\n                    <SelectItem value=\"info\">Info</SelectItem>\n                    <SelectItem value=\"warn\">Warning</SelectItem>\n                    <SelectItem value=\"error\">Error</SelectItem>\n                    <SelectItem value=\"critical\">Critical</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <AlertTriangle className=\"h-5 w-5 text-yellow-400\" />\n                Advanced Configuration\n              </CardTitle>\n              <CardDescription>Expert settings - modify with caution</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"p-4 bg-yellow-500/10 border border-yellow-500/20 rounded-lg\">\n                  <p className=\"text-sm text-yellow-400\">\n                    <strong>Warning:</strong> Modifying these settings may affect system stability and security.\n                  </p>\n                </div>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium text-sm\">Current Configuration:</h4>\n                  <div className=\"bg-muted/50 p-3 rounded-lg font-mono text-xs\">\n                    <pre>{JSON.stringify(settings, null, 2)}</pre>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"flex gap-3\">\n            <Button \n              className=\"flex-1 bg-green-600 hover:bg-green-700\" \n              onClick={handleSave}\n              disabled={!hasChanges}\n            >\n              <Save className=\"h-4 w-4 mr-2\" />\n              Save Settings\n            </Button>\n            <Button variant=\"outline\" onClick={handleReset}>\n              <RotateCcw className=\"h-4 w-4 mr-2\" />\n              Reset\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11743}},"version":1}